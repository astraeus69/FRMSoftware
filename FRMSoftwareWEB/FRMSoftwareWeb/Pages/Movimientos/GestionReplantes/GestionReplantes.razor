@page "/Movimientos/GestionReplantes"

@using FRMSoftware.Data
@inject FRMSoftware.Services.Catalogos.CultivoService cultivoService
@inject FRMSoftware.Services.Catalogos.ViverosService viveroService
@inject FRMSoftware.Services.Movimientos.GestionPlantacionesService plantacionesService
@inject FRMSoftware.Services.Catalogos.RanchosService ranchoService
@inject FRMSoftware.Services.Movimientos.GestionLlavesService llavesService
@inject FRMSoftware.Services.Movimientos.GestionReplantesService replanteService

@inject FRMSoftware.Services.Utilidades.ErrorLogService errorLogs
@inject FRMSoftware.Data.UserSession UserSession


@inject NavigationManager Navigation

<div class="container d-flex justify-content-center align-items-center" style="min-height: calc(100vh - 3.5rem); overflow-y: auto;">
    <div class="row justify-content-center align-items-start mt-4">
        <h2 class="text-center fw-bold" style="margin-bottom: 20px">Gestión de replantes</h2>

        <!-- Primera fila -->
        <!-- PLANTACIÓN -->
        <div class="col-lg-4">
            <div class="card shadow-sm mb-3 same-height-Replante">
                <div class="card-body">
                    <EditForm Model="plantacion">

                        <h5 class="text-center fw-bold">Plantación</h5>
                        <div class="mb-1">
                            <label class="form-label">Fecha de plantación:</label>
                            <InputDate class="form-control" @bind-Value="plantacion.FechaPlantacion" disabled="true" />
                        </div>

                        <div class="mb-1">
                            <label class="form-label">Número de semana:</label>
                            <InputNumber class="form-control" @bind-Value="plantacion.NumSemPlantacion" disabled="true" />
                        </div>

                        <div class="mb-1">
                            <label class="form-label">Estatus de plantación:</label>
                            <InputText class="form-control" @bind-Value="plantacion.EstatusPlantacion" disabled="true" />
                        </div>

                        <div class="d-flex justify-content-center">
                            <button class="btn fixed-size-btn btn-seleccion mx-2" @onclick="AbrirModalPlantacion" disabled="@deshabilitarGuardar">
                                Seleccionar
                            </button>
                        </div>
                    </EditForm>


                    <!-- REPLANTE -->
                    <EditForm Model="replante" OnValidSubmit="GrabarRegistro" id="replanteForm">
                        <DataAnnotationsValidator />
                        <h5 class="text-center fw-bold" style="margin-top:30px">Replante</h5>
                        <!-- ID de plantación (Oculto) -->
                        <input type="hidden" @bind="replante.IdReplante" />
                        <!-- ID de plantación (Oculto) -->
                        <input type="hidden" @bind="replante.IdPlantacion" />
                        <!-- ID del Cultivo (Oculto) -->
                        <input type="hidden" @bind="replante.IdCultivo" />
                        <!-- ID del Vivero (Oculto) -->
                        <input type="hidden" @bind="replante.IdVivero" />

                        <div class="mb-1">
                            <label class="form-label">Cantidad de replante:</label>
                            <InputNumber id="CantidadReplante" class="form-control" @bind-Value="replante.CantidadReplante" disabled="@deshabilitarFormulario" />
                            <ValidationMessage For="@(() => replante.CantidadReplante)" class="text-danger" />
                        </div>

                        <div class="mb-1">
                            <label class="form-label">Fecha de replante:</label>
                            <InputDate id="FechaReplante"
                                       class="form-control"
                                       @bind-Value="replante.FechaReplante"
                                       @oninput="CalcularSemanaReplante"
                                       disabled="@deshabilitarFormulario" />
                            <ValidationMessage For="@(() => replante.FechaReplante)" class="text-danger" />
                        </div>

                        <div class="mb-1">
                            <label class="form-label">Número de semana:</label>
                            <InputNumber id="NumSemReplantes" class="form-control" @bind-Value="replante.NumSemReplante" disabled="true" />
                            <ValidationMessage For="@(() => replante.NumSemReplante)" class="text-danger" />
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>

        <!-- CULTIVO -->
        <div class="col-lg-4">
            <div class="card shadow-sm mb-3 same-height-Replante">
                <div class="card-body">
                    <EditForm Model="cultivo">

                        <h5 class="text-center fw-bold">Cultivo</h5>
                        <div class="mb-1">
                            <label class="form-label">Tipo de berry:</label>
                            <InputText class="form-control" @bind-Value="cultivo.TipoBerry" disabled="true" />
                        </div>
                        <div class="mb-1">
                            <label class="form-label">Variedad de berry:</label>
                            <InputText class="form-control" @bind-Value="cultivo.Variedad" disabled="true" />
                        </div>

                        <div class="d-flex justify-content-center">
                            <button class="btn fixed-size-btn btn-seleccion mx-2" @onclick="AbrirModalCultivos" disabled="@deshabilitarGuardar">
                                Seleccionar
                            </button>
                        </div>
                    </EditForm>


                    <EditForm Model="vivero">
                        <h5 class="text-center fw-bold margenReplantesVivero" style="margin-top:30px">Vivero</h5>
                        <div class="mb-1">
                            <label class="form-label">Nombre del vivero:</label>
                            <InputText class="form-control" @bind-Value="vivero.NombreVivero" disabled="true" />

                        </div>
                        <div class="mb-1">
                            <label class="form-label">Código de vivero:</label>
                            <InputText class="form-control" @bind-Value="vivero.CodigoVivero" disabled="true" />
                        </div>

                        <div class="d-flex justify-content-center">
                            <button class="btn fixed-size-btn btn-seleccion mx-2" @onclick="AbrirModalViveros" disabled="@deshabilitarGuardar">
                                Seleccionar
                            </button>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>


        <!-- Segunda fila -->
        <!-- RANCHO -->
        <div class="col-lg-4">
            <div class="card shadow-sm mb-3 same-height-Replante">
                <div class="card-body d-flex flex-column">
                    <EditForm Model="rancho">
                        <h5 class="text-center fw-bold">Rancho</h5>
                        <div class="mb-1">
                            <label class="form-label">Nombre del rancho:</label>
                            <InputText class="form-control" @bind-Value="rancho.NombreRancho" disabled="true" />
                        </div>

                        <div class="mb-1">
                            <label class="form-label">Número de rancho:</label>
                            <InputText class="form-control" @bind-Value="rancho.NumeroRancho" disabled="true" />
                        </div>
                    </EditForm>


                    <!-- LLAVES -->
                    <EditForm Model="llave">
                        <div>
                            <h5 class="text-center fw-bold margenReplantesLlaves" style="margin-top:30px">Llave</h5>
                            <div class="mb-1">
                                <label class="form-label">Nombre de la llave:</label>
                                <InputText class="form-control" @bind-Value="llave.NombreLlave" disabled="true" />
                            </div>

                            <div class="mb-1">
                                <label class="form-label">Superficie (Ha):</label>
                                <InputNumber class="form-control" @bind-Value="llave.SuperficieHa" disabled="true" />
                            </div>

                            <div class="mb-1">
                                <label class="form-label">Superficie (Acres):</label>
                                <InputNumber class="form-control" @bind-Value="llave.SuperficieAcres" disabled="true" />
                            </div>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>


        <div class="col-lg-4">
            
        </div>
    </div>
</div>



<!-- Botones -->
<div class="container-fluid">
    <div class="buttons fixed-bottom bg-white d-flex justify-content-center ms-auto botones-responsive">

        @if (UserSession.Rol == "Admin" || UserSession.Rol == "Editor")
        {
            <button class="btn fixed-size-btn mx-2" @onclick="NuevoRegistro" disabled="@deshabilitarNuevo">Nuevo</button>
            <button class="btn fixed-size-btn mx-2" type="submit" form="replanteForm" disabled="@deshabilitarGuardar">Guardar</button>
            <button class="btn fixed-size-btn mx-2" @onclick="AbrirModalReplante" disabled="@deshabilitarModificar">Modificar</button>
            <button class="btn fixed-size-btn mx-2" @onclick="Cancelar" disabled="@deshabilitarCancelar">Cancelar</button>
        }

        @if (UserSession.Rol == "Admin" || UserSession.Rol == "Consultor")
        {
            <button class="btn fixed-size-btn mx-2" @onclick="RedirigirAConsulta" disabled="@deshabilitarConsultar">Consultar</button>
        }

    </div>
</div>



<!-- MODAL para mostrar la tabla de seleccionar plantaciones -->
@if (mostrarModalPlantaciones)
{
    <div class="modal fade show d-block" tabindex="-1" role="dialog" style="background: rgba(0, 0, 0, 0.5);">
        <div class="modal-dialog modal-lg" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h3 class="modal-title" style="font-weight: bold;">Lista de plantaciones</h3>
                    <button type="button" class="btn-close" @onclick="CerrarModalPlantacion"></button>
                </div>
                <div class="modal-body">
                    <!-- Filtro de búsqueda -->
                    <div class="row mb-3 align-items-center">
                        <div class="col-auto">
                            <input @bind="searchTermPlantacion" placeholder="Buscar plantaciones..." class="form-control" />
                        </div>
                        <div class="col-auto">
                            <button class="btn fixed-size-btn" @onclick="AplicarFiltroPlantaciones">Buscar</button>
                        </div>
                    </div>

                    <!-- Tabla con scroll -->
                    <div class="table-responsive" style="max-height: 70vh; overflow-y: auto;">
                        <table class="table table-striped table-bordered">
                            <thead class="table-dark">
                                <tr>
                                    <th>ID Plantación</th>
                                    <th>Fecha de plantación</th>
                                    <th>Número de semana</th>
                                    <th>Estatus de plantación</th>

                                    <th>ID Cultivo</th>
                                    <th>Tipo de berry</th>
                                    <th>Variedad</th>

                                    <th>ID Vivero</th>
                                    <th>Nombre del vivero</th>
                                    <th>Código del vivero</th>

                                    <th>ID Rancho</th>
                                    <th>Nombre del rancho</th>
                                    <th>Número del rancho</th>

                                    <th>ID Llave</th>
                                    <th>Nombre de llave</th>
                                    <th>Superficie (HA)</th>
                                    <th>Superficie (Acres)</th>

                                 </tr>
                            </thead>
                            <tbody>
                                @foreach (var item in filteredPlantaciones)
                                {
                                    <tr @onclick="() => SeleccionarPlantacion(item)" class="fila-seleccionable">
                                        <td>@item.IdPlantacion</td>
                                        <td>@item.FechaPlantacion.ToString("dd/MM/yyyy")</td>
                                        <td>@item.NumSemPlantacion</td>
                                        <td>@item.EstatusPlantacion</td>

                                        <td>@item.IdCultivo</td>
                                        <td>@item.TipoBerry</td>
                                        <td>@item.Variedad</td>

                                        <td>@item.IdVivero</td>
                                        <td>@item.NombreVivero</td>
                                        <td>@item.CodigoVivero</td>

                                        <td>@item.IdRancho</td>
                                        <td>@item.NombreRancho</td>
                                        <td>@item.NumeroRancho</td>

                                        <td>@item.IdLlave</td>
                                        <td>@item.NombreLlave</td>
                                        <td>@item.SuperficieHa</td>
                                        <td>@item.SuperficieAcres</td>

                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>
}



<!-- MODAL para mostrar la tabla de seleccionar cultivos -->
@if (mostrarModalCultivo)
{
    <div class="modal fade show d-block" tabindex="-1" role="dialog" style="background: rgba(0, 0, 0, 0.5);">
        <div class="modal-dialog modal-lg" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h3 class="modal-title" style="font-weight: bold;">Lista de cultivos</h3>
                    <button type="button" class="btn-close" @onclick="CerrarModalCultivo"></button>
                </div>
                <div class="modal-body">
                    <!-- Filtro de búsqueda -->
                    <div class="row mb-3 align-items-center">
                        <div class="col-auto">
                            <input @bind="searchTermCultivo" placeholder="Buscar cultivos..." class="form-control" />
                        </div>
                        <div class="col-auto">
                            <button class="btn fixed-size-btn" @onclick="AplicarFiltroCultivos">Buscar</button>
                        </div>
                    </div>

                    <!-- Tabla con scroll -->
                    <div class="table-responsive" style="max-height: 70vh; overflow-y: auto;">
                        <table class="table table-striped table-bordered">
                            <thead class="table-dark">
                                <tr>
                                    <th>ID</th>
                                    <th>Tipo de berry</th>
                                    <th>Variedad</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var item in filteredCultivos)
                                {
                                    <tr @onclick="() => SeleccionarCultivo(item)" class="fila-seleccionable">
                                        <td>@item.IdCultivo</td>
                                        <td>@item.TipoBerry</td>
                                        <td>@item.Variedad</td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>
}

<!-- MODAL para mostrar la tabla de seleccionar viveros -->
@if (mostrarModalVivero)
{
    <div class="modal fade show d-block" tabindex="-1" role="dialog" style="background: rgba(0, 0, 0, 0.5);">
        <div class="modal-dialog modal-lg" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h3 class="modal-title" style="font-weight: bold;">Lista de viveros</h3>
                    <button type="button" class="btn-close" @onclick="CerrarModalVivero"></button>
                </div>
                <div class="modal-body">
                    <!-- Filtro de búsqueda -->
                    <div class="row mb-3 align-items-center">
                        <div class="col-auto">
                            <input @bind="searchTermVivero" placeholder="Buscar viveros..." class="form-control" />
                        </div>
                        <div class="col-auto">
                            <button class="btn fixed-size-btn" @onclick="AplicarFiltroViveros">Buscar</button>
                        </div>
                    </div>

                    <!-- Tabla con scroll -->
                    <div class="table-responsive" style="max-height: 70vh; overflow-y: auto;">
                        <table class="table table-striped table-bordered">
                            <thead class="table-dark">
                                <tr>
                                    <th>ID</th>
                                    <th>Nombre del vivero</th>
                                    <th>Código del vivero</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var item in filteredViveros)
                                {
                                    <tr @onclick="() => SeleccionarVivero(item)" class="fila-seleccionable">
                                        <td>@item.IdVivero</td>
                                        <td>@item.NombreVivero</td>
                                        <td>@item.CodigoVivero</td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>
}



<!-- MODAL para mostrar la tabla de modificación -->
@if (mostrarModalReplante)
{
    <div class="modal fade show d-block" tabindex="-1" role="dialog" style="background: rgba(0, 0, 0, 0.5);">
        <div class="modal-dialog modal-xl" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h3 class="modal-title" style="font-weight: bold;">Lista de plantaciones</h3>
                    <button type="button" class="btn-close" @onclick="CerrarModalReplante"></button>
                </div>
                <div class="modal-body">
                    <!-- Contenedor para alinear horizontalmente -->
                    <div class="row mb-3 align-items-center">
                        <div class="col-auto">
                            <input @bind="searchTermReplante" placeholder="Buscar plantaciones..." class="form-control" />
                        </div>
                        <div class="col-auto">
                            <button class="btn fixed-size-btn" @onclick="AplicarFiltroReplantes">Buscar</button>
                        </div>
                    </div>

                    <!-- Contenedor de la tabla con scroll -->
                    <div class="table-responsive" style="max-height: 70vh; overflow-y: auto;">
                        <table class="table table-striped table-bordered">
                            <thead class="table-dark">
                                <tr>
                                    <th style="width: 10%;">Acciones</th>

                                    <th>ID Replante</th>
                                    <th>Cantidad de replante</th>
                                    <th>Fecha de replante</th>
                                    <th>Número de semana</th>

                                    <th>ID Plantación</th>
                                    <th>Fecha de plantación</th>
                                    <th>Número de semana</th>
                                    <th>Estatus de plantación</th>

                                    <th>ID Cultivo</th>
                                    <th>Tipo de berry</th>
                                    <th>Variedad</th>

                                    <th>ID Vivero</th>
                                    <th>Nombre del vivero</th>
                                    <th>Código del vivero</th>

                                    <th>ID Rancho</th>
                                    <th>Nombre de rancho</th>
                                    <th>Número de rancho</th>

                                    <th>ID Llave</th>
                                    <th>Nombre de llave</th>
                                    <th>Superficie (Ha)</th>
                                    <th>Superficie (Acres)</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var item in filteredReplantes)
                                {
                                    <tr>
                                        <td>
                                            <div class="d-flex gap-2">
                                            <button class="btn editar" @onclick="() => SeleccionarReplante(item)">Editar</button>
                                                @if (UserSession.Rol == "Admin")
                                                {
                                                    <button class="btn btn-red editar" @onclick="() => ConfirmarEliminar(item.IdReplante)">Eliminar</button>
                                                }
                                            </div>
                                        </td>

                                        <td>@item.IdReplante</td>
                                        <td>@item.CantidadReplante</td>
                                        <td>@item.FechaReplante.ToString("dd/MM/yyyy")</td>
                                        <td>@item.NumSemReplante</td>

                                        <td>@item.IdPlantacion</td>
                                        <td>@item.FechaPlantacion.ToString("dd/MM/yyyy")</td>
                                        <td>@item.NumSemPlantacion</td>
                                        <td>@item.EstatusPlantacion</td>

                                        <td>@item.IdCultivo</td>
                                        <td>@item.TipoBerry</td>
                                        <td>@item.Variedad</td>

                                        <td>@item.IdVivero</td>
                                        <td>@item.NombreVivero</td>
                                        <td>@item.CodigoVivero</td>

                                        <td>@item.IdRancho</td>
                                        <td>@item.NombreRancho</td>
                                        <td>@item.NumeroRancho</td>

                                        <td>@item.IdLlave</td>
                                        <td>@item.NombreLlave</td>
                                        <td>@item.SuperficieHa</td>
                                        <td>@item.SuperficieAcres</td>

                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>
}

<!-- Modal de confirmación de eliminación -->
@if (mostrarConfirmacion)
{
    <div class="modal fade show d-block" tabindex="-1" role="dialog" style="background: rgba(0, 0, 0, 0.5);">
        <div class="modal-dialog modal-dialog-centered" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Confirmar eliminación</h5>
                </div>
                <div class="modal-body">
                    <p>¿Está seguro de que desea eliminar este replante?</p>
                </div>
                <div class="modal-footer">
                    <button class="btn" @onclick="CancelarEliminar">Cancelar</button>
                    <button class="btn btn-red" @onclick="EliminarReplanteConfirmado">Eliminar</button>
                </div>
            </div>
        </div>
    </div>
}



<!-- Modal para mostrar mensajes -->
@if (mostrarMensajeModal)
{
    <div class="modal fade show d-block" tabindex="-1" role="dialog" style="background: rgba(0, 0, 0, 0.5);">
        <div class="modal-dialog modal-dialog-centered" role="document">
            <!-- Agregar modal-dialog-centered -->
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">@mensajeTitulo</h5>
                    <button type="button" class="btn-close" @onclick="CerrarMensajeModal"></button>
                </div>
                <div class="modal-body">
                    <p>@mensajeContenido</p>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-red" @onclick="CerrarMensajeModal">Cerrar</button>
                </div>
            </div>
        </div>
    </div>
}


@code {
    private PlantacionesDetallesDto plantacion = new PlantacionesDetallesDto();
    private List<PlantacionesDetallesDto> plantaciones = new();

    private CultivosDto cultivo = new CultivosDto();
    private List<CultivosDto> cultivos = new();

    private ViverosDto vivero = new ViverosDto();
    private List<ViverosDto> viveros = new();

    private RanchosDto rancho = new RanchosDto();
    private List<RanchosDto> ranchos = new();

    private LlavesDto llave = new LlavesDto();
    private List<LlavesDto> llaves = new();

    private ReplantesDto replante = new ReplantesDto();
    private List<ReplantesDetallesDto> replantes = new();



    // MODALES
    private bool mostrarModalReplante = false;
    private bool mostrarConfirmacion = false;

    // FORMULARIO
    private bool deshabilitarFormulario = true;

    // BOTONES
    private bool deshabilitarNuevo = false;
    private bool deshabilitarGuardar = true;
    private bool deshabilitarModificar = false;
    private bool deshabilitarCancelar = true;
    private bool deshabilitarConsultar = false;
    private int idReplanteEliminar;

    // BÚSQUEDA INPUT
    private string searchTermReplante = string.Empty;  // Campo de búsqueda
    private List<ReplantesDetallesDto> filteredReplantes = new(); // Lista filtrada

    // MENSAJES
    private bool mostrarMensajeModal = false;
    private string mensajeTitulo = string.Empty;
    private string mensajeContenido = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await ConsultarPlantaciones();
        await ConsultarReplantes();

        await ConsultarCultivos();
        await ConsultarViveros();

    }

    private async Task ConsultarReplantes()
    {
        try
        {
            // Obtiene todos los replantes desde el servicio
            replantes = await replanteService.GetReplantesDetallesAsync();

            // Verificar si no se obtuvieron replantes
            if (replantes == null || !replantes.Any())
            {
                MostrarMensajeModal("Información", "No se encontraron replantes.");
                return;
            }

            // Filtra los replantes activos
            filteredReplantes = replantes
                .Where(r => r.EstatusPlantacion != "Inactiva") // Excluye las inactivas
                .OrderBy(r => r.IdReplante)
                .ToList();

            StateHasChanged(); // Refresca la UI

        }
        catch (Exception ex)
        {
            // Manejo de errores
            MostrarMensajeModal("Error", $"Error al consultar los replantes: {ex.Message}");
        
            // Opcionalmente, registrar el error
            await errorLogs.CreateErrorLogAsync(new ErrorLogDto
            {
                UserName = "Usuario",  // Cambiar por el nombre del usuario actual
                ErrorMessage = ex.Message,
                ErrorProcedure = "ConsultarReplantes",
                ErrorLine = new System.Diagnostics.StackTrace(true).GetFrame(0)?.GetFileLineNumber().ToString(),
                ErrorTime = DateTime.UtcNow
            });
        }
    }

    private void AplicarFiltroReplantes()
    {
        filteredReplantes = string.IsNullOrEmpty(searchTermReplante) ? 
            replantes : 
            replantes.Where(r =>
                r.IdReplante.ToString().Contains(searchTermReplante, StringComparison.OrdinalIgnoreCase) ||
                r.CantidadReplante.ToString().Contains(searchTermReplante, StringComparison.OrdinalIgnoreCase) ||
                r.FechaReplante.ToString("dd/MM/yyyy").Contains(searchTermReplante, StringComparison.OrdinalIgnoreCase) ||
                r.NumSemReplante.ToString().Contains(searchTermReplante, StringComparison.OrdinalIgnoreCase) ||
            
                // Datos de la Plantación
                r.IdPlantacion.ToString().Contains(searchTermReplante, StringComparison.OrdinalIgnoreCase) ||
                r.FechaPlantacion.ToString("dd/MM/yyyy").Contains(searchTermReplante, StringComparison.OrdinalIgnoreCase) ||
                r.NumSemPlantacion.ToString().Contains(searchTermReplante, StringComparison.OrdinalIgnoreCase) ||
                r.EstatusPlantacion.Contains(searchTermReplante, StringComparison.OrdinalIgnoreCase) ||

                // Datos del Cultivo
                r.IdCultivo.ToString().Contains(searchTermReplante, StringComparison.OrdinalIgnoreCase) ||
                r.TipoBerry.Contains(searchTermReplante, StringComparison.OrdinalIgnoreCase) ||
                r.Variedad.Contains(searchTermReplante, StringComparison.OrdinalIgnoreCase) ||

                // Datos de la Llave
                r.IdLlave.ToString().Contains(searchTermReplante, StringComparison.OrdinalIgnoreCase) ||
                r.NombreLlave.Contains(searchTermReplante, StringComparison.OrdinalIgnoreCase) ||
                r.SuperficieHa.ToString().Contains(searchTermReplante, StringComparison.OrdinalIgnoreCase) ||
                r.SuperficieAcres.ToString().Contains(searchTermReplante, StringComparison.OrdinalIgnoreCase) ||
                r.Disponibilidad.ToString().Contains(searchTermReplante, StringComparison.OrdinalIgnoreCase) ||

                // Datos del Rancho
                r.IdRancho.ToString().Contains(searchTermReplante, StringComparison.OrdinalIgnoreCase) ||
                r.NombreRancho.Contains(searchTermReplante, StringComparison.OrdinalIgnoreCase) ||
                r.NumeroRancho.ToString().Contains(searchTermReplante, StringComparison.OrdinalIgnoreCase) ||

                // Datos del Vivero
                r.IdVivero.ToString().Contains(searchTermReplante, StringComparison.OrdinalIgnoreCase) ||
                r.NombreVivero.Contains(searchTermReplante, StringComparison.OrdinalIgnoreCase) ||
                r.CodigoVivero.Contains(searchTermReplante, StringComparison.OrdinalIgnoreCase)
            ).ToList();
    }



    private void NuevoRegistro()
    {
        plantacion = new PlantacionesDetallesDto();
        cultivo = new CultivosDto();
        vivero = new ViverosDto();
        llave = new LlavesDto();
        rancho = new RanchosDto();
        replante = new ReplantesDto();

        deshabilitarFormulario = false;
        deshabilitarGuardar = false;
        deshabilitarNuevo = true;
        deshabilitarModificar = true;
        deshabilitarConsultar = true;
        deshabilitarCancelar = false;
    }

    private void Cancelar()
    {
        plantacion = new PlantacionesDetallesDto();
        cultivo = new CultivosDto();
        vivero = new ViverosDto();
        llave = new LlavesDto();
        rancho = new RanchosDto();
        replante = new ReplantesDto();

        deshabilitarFormulario = true;
        deshabilitarGuardar = true;
        deshabilitarNuevo = false;
        deshabilitarModificar = false;
        deshabilitarConsultar = false;
        deshabilitarCancelar = true;
    }

    private async Task GrabarRegistro()
    {
        try
        {
            // Verificar si se han seleccionado todos los datos necesarios
            if (plantacion == null || plantacion.IdPlantacion == 0 ||
                rancho == null || rancho.IdRancho == 0 ||
                cultivo == null || cultivo.IdCultivo == 0 ||
                vivero == null || vivero.IdVivero == 0 ||
                llave == null || llave.IdLlave == 0)
            {
                MostrarMensajeModal("Error", "Debe seleccionar todos los datos antes de continuar.");
                return;
            }

            // Validar si el tipo de cultivo coincide con el cultivo actual en la plantación
            var cultivoActual = await cultivoService.GetCultivos(plantacion.IdCultivo);

            if (cultivoActual == null || cultivoActual.TipoBerry != cultivo.TipoBerry)
            {
                MostrarMensajeModal("Error", "No es posible replantar " + cultivoActual.TipoBerry + " junto con " + cultivo.TipoBerry + ". Sólo puede existir diferencia en la variedad.");
                return;
            }

            bool success;
            string message;

            // Crear o actualizar el replante
            if (replante.IdReplante == 0)
            {
                var result = await replanteService.CreateReplanteAsync(replante);
                success = result.Success;
                message = result.Message;
            }
            else
            {
                success = await replanteService.UpdateReplanteAsync(replante.IdReplante, replante);
                message = success ? "Actualización exitosa." : "Error al actualizar el registro.";
            }

            // Si la operación fue exitosa
            if (success)
            {
                await ConsultarReplantes(); // Consultar los replantes actualizados
                deshabilitarFormulario = true;
                deshabilitarGuardar = true;
                deshabilitarNuevo = false;
                deshabilitarModificar = false;
                deshabilitarCancelar = true;
                deshabilitarConsultar = false;

                // Limpiar el formulario
                plantacion = new PlantacionesDetallesDto();
                cultivo = new CultivosDto(); 
                vivero = new ViverosDto();
                llave = new LlavesDto(); 
                rancho = new RanchosDto();
                replante = new ReplantesDto();

                MostrarMensajeModal("Éxito", message); // Mostrar mensaje de éxito
            }
            else
            {
                MostrarMensajeModal("Error", message); // Mostrar mensaje de error
            }
        }
        catch (Exception ex)
        {
            // Manejo de errores
            MostrarMensajeModal("Error", $"Error al grabar el registro: {ex.Message}");

            // Opcionalmente, registrar el error
            await errorLogs.CreateErrorLogAsync(new ErrorLogDto
            {
                UserName = UserSession.Usuario, // Reemplazar con el nombre del usuario real
                ErrorMessage = ex.Message,
                ErrorProcedure = "GrabarRegistroReplantes",
                ErrorLine = new System.Diagnostics.StackTrace(true).GetFrame(0)?.GetFileLineNumber().ToString(),
                ErrorTime = DateTime.UtcNow
            });
        }
    }

    private void MostrarMensajeModal(string titulo, string contenido)
    {
        mensajeTitulo = titulo;
        mensajeContenido = contenido;
        mostrarMensajeModal = true;
    }

    private void CerrarMensajeModal()
    {
        mostrarMensajeModal = false;
    }

    private void AbrirModalReplante()
    {
        mostrarModalReplante = true;
    }

    private void CerrarModalReplante()
    {
        mostrarModalReplante = false;
        searchTermReplante = string.Empty;
    }

    private async Task SeleccionarReplante(ReplantesDetallesDto selectedReplante)
    {
        try
        {
            // Asignar los datos del replante seleccionado
            replante = new ReplantesDto
            {
                IdReplante = selectedReplante.IdReplante,
                IdPlantacion = selectedReplante.IdPlantacion,
                IdCultivo = selectedReplante.IdCultivo,
                IdVivero = selectedReplante.IdVivero,
                CantidadReplante = selectedReplante.CantidadReplante,
                FechaReplante = selectedReplante.FechaReplante,
                NumSemReplante = selectedReplante.NumSemReplante
            };

            // Cargar los datos del cultivo correspondiente al replante seleccionado
            cultivo = await cultivoService.GetCultivos(selectedReplante.IdCultivo);
            if (cultivo != null)
            {
                cultivo.TipoBerry = cultivo.TipoBerry;
                cultivo.Variedad = cultivo.Variedad;
            }

            // Cargar los datos de la plantación correspondiente al replante seleccionado
            plantacion = await plantacionesService.GetPlantacionPorIdAsync(selectedReplante.IdPlantacion);
            if (plantacion != null)
            {
                plantacion.FechaPlantacion = plantacion.FechaPlantacion;
                plantacion.NumSemPlantacion = plantacion.NumSemPlantacion;
                plantacion.EstatusPlantacion = plantacion.EstatusPlantacion;
            }

            // Cargar los datos de la llave correspondiente a la plantación
            llave = await llavesService.GetLlave(plantacion.IdLlave);
            if (llave != null)
            {
                llave.NombreLlave = llave.NombreLlave;
                llave.Disponibilidad = llave.Disponibilidad;
            }

            // Cargar los datos del rancho correspondiente a la llave
            rancho = await ranchoService.GetRancho(llave.IdRancho);
            if (rancho != null)
            {
                rancho.NombreRancho = rancho.NombreRancho;
                rancho.NumeroRancho = rancho.NumeroRancho;
            }

            // Cargar los datos del vivero correspondiente al replante
            vivero = await viveroService.GetVivero(selectedReplante.IdVivero);
            if (vivero != null)
            {
                vivero.NombreVivero = vivero.NombreVivero;
                vivero.CodigoVivero = vivero.CodigoVivero;
            }

            // Actualizar el formulario con los datos obtenidos
            deshabilitarFormulario = false;
            deshabilitarGuardar = false;
            deshabilitarNuevo = true;
            deshabilitarModificar = true;
            deshabilitarCancelar = false;
            deshabilitarConsultar = true;
            mostrarModalReplante = false;
        }
        catch (Exception ex)
        {
            // Manejo de errores
            MostrarMensajeModal("Error", $"Error al seleccionar el replante: {ex.Message}");

            // Opcionalmente, registrar el error
            await errorLogs.CreateErrorLogAsync(new ErrorLogDto
            {
                UserName = UserSession.Usuario, // Reemplazar con el nombre del usuario real
                ErrorMessage = ex.Message,
                ErrorProcedure = "SeleccionarReplante",
                ErrorLine = new System.Diagnostics.StackTrace(true).GetFrame(0)?.GetFileLineNumber().ToString(),
                ErrorTime = DateTime.UtcNow
            });
        }
    }

        
    private void ConfirmarEliminar(int id)
    {
        idReplanteEliminar = id;
        mostrarConfirmacion = true;
    }

    private void CancelarEliminar()
    {
        mostrarConfirmacion = false;
    }

    private async Task EliminarReplanteConfirmado()
    {
        try
        {
            mostrarConfirmacion = false;

            // Llamada al servicio para eliminar el replante
            bool success = await replanteService.DeleteReplanteAsync(idReplanteEliminar);

            // Verificar si la eliminación fue exitosa
            if (success)
            {
                // Refrescar la lista de replantes después de la eliminación
                await ConsultarReplantes();
                MostrarMensajeModal("Éxito", "Replante eliminado con éxito.");
            }
            else
            {
                MostrarMensajeModal("Error", "Error al eliminar el replante.");
            }
        }
        catch (Exception ex)
        {
            // Manejo de errores
            MostrarMensajeModal("Error", $"Error al eliminar el replante: {ex.Message}");

            // Opcionalmente, registrar el error
            await errorLogs.CreateErrorLogAsync(new ErrorLogDto
            {
                UserName = UserSession.Usuario, // Reemplazar con el nombre del usuario real
                ErrorMessage = ex.Message,
                ErrorProcedure = "EliminarReplanteConfirmado",
                ErrorLine = new System.Diagnostics.StackTrace(true).GetFrame(0)?.GetFileLineNumber().ToString(),
                ErrorTime = DateTime.UtcNow
            });
        }
    }

    private void RedirigirAConsulta()
    {
        Navigation.NavigateTo("/Movimientos/GestionReplantesConsulta");
    }


    // MODALES DE SELECCIÓN

    // MODAL PARA SELECCIONAR PLANTACIÓN
    // BÚSQUEDA INPUT
    private bool mostrarModalPlantaciones = false;

    private string searchTermPlantacion = string.Empty;  // Campo de búsqueda
    private List<PlantacionesDetallesDto> filteredPlantaciones = new(); // Lista filtrada

    // Función para consultar los cultivos
    private async Task ConsultarPlantaciones()
    {
        try
        {
            // Obtiene todas las plantaciones desde el servicio
            plantaciones = await plantacionesService.GetPlantacionesDetalles();

            // Verificar si no se obtuvieron plantaciones
            if (plantaciones == null || !plantaciones.Any())
            {
                MostrarMensajeModal("Información", "No se encontraron plantaciones.");
                return;
            }

            // Filtra las plantaciones activas
            filteredPlantaciones = plantaciones
                .Where(p => p.EstatusPlantacion != "Inactiva") // Excluye las inactivas
                .OrderBy(p => p.IdPlantacion)
                .ToList();

            StateHasChanged(); // Refresca la UI

        }
        catch (Exception ex)
        {
            // Manejo de errores
            MostrarMensajeModal("Error", $"Error al consultar las plantaciones: {ex.Message}");

            // Opcionalmente, registrar el error
            await errorLogs.CreateErrorLogAsync(new ErrorLogDto
            {
                UserName = UserSession.Usuario, // Reemplazar con el nombre del usuario real
                ErrorMessage = ex.Message,
                ErrorProcedure = "ConsultarPlantaciones",
                ErrorLine = new System.Diagnostics.StackTrace(true).GetFrame(0)?.GetFileLineNumber().ToString(),
                ErrorTime = DateTime.UtcNow
            });
        }
    }

    // Función para aplicar el filtro de búsqueda
    private void AplicarFiltroPlantaciones()
    {
        filteredPlantaciones = string.IsNullOrEmpty(searchTermPlantacion) ?
            plantaciones :
            plantaciones.Where(p =>
                p.IdPlantacion.ToString().Contains(searchTermPlantacion, StringComparison.OrdinalIgnoreCase) ||

                p.IdCultivo.ToString().Contains(searchTermPlantacion, StringComparison.OrdinalIgnoreCase) ||
                p.TipoBerry.Contains(searchTermPlantacion, StringComparison.OrdinalIgnoreCase) ||
                p.Variedad.Contains(searchTermPlantacion, StringComparison.OrdinalIgnoreCase) ||

                p.IdLlave.ToString().Contains(searchTermPlantacion, StringComparison.OrdinalIgnoreCase) ||
                p.NombreLlave.Contains(searchTermPlantacion, StringComparison.OrdinalIgnoreCase) ||
                p.SuperficieHa.ToString().Contains(searchTermPlantacion, StringComparison.OrdinalIgnoreCase) ||
                p.SuperficieAcres.ToString().Contains(searchTermPlantacion, StringComparison.OrdinalIgnoreCase) ||

                p.IdRancho.ToString().Contains(searchTermPlantacion, StringComparison.OrdinalIgnoreCase) ||
                p.NombreRancho.Contains(searchTermPlantacion, StringComparison.OrdinalIgnoreCase) ||
                p.NumeroRancho.Contains(searchTermPlantacion, StringComparison.OrdinalIgnoreCase) ||

                p.IdVivero.ToString().Contains(searchTermPlantacion, StringComparison.OrdinalIgnoreCase) ||
                p.NombreVivero.Contains(searchTermPlantacion, StringComparison.OrdinalIgnoreCase) ||
                p.CodigoVivero.Contains(searchTermPlantacion, StringComparison.OrdinalIgnoreCase) ||

                p.FechaPlantacion.ToString("dd/MM/yyyy").Contains(searchTermPlantacion, StringComparison.OrdinalIgnoreCase) ||
                p.NumSemPlantacion.ToString().Contains(searchTermPlantacion, StringComparison.OrdinalIgnoreCase) ||
                p.EstatusPlantacion.Contains(searchTermPlantacion, StringComparison.OrdinalIgnoreCase)
            ).ToList();
    }

    // Carga los datos del cultivo seleccionado en el formulario
    private async Task SeleccionarPlantacion(PlantacionesDetallesDto selectedPlantacion)
    {
        try
        {
            // Asignar los datos de la plantación seleccionada
            plantacion = new PlantacionesDetallesDto
            {
                IdPlantacion = selectedPlantacion.IdPlantacion,
                IdCultivo = selectedPlantacion.IdCultivo,
                IdLlave = selectedPlantacion.IdLlave,
                IdVivero = selectedPlantacion.IdVivero,
                FechaPlantacion = selectedPlantacion.FechaPlantacion,
                NumSemPlantacion = selectedPlantacion.NumSemPlantacion,
                EstatusPlantacion = selectedPlantacion.EstatusPlantacion
            };

            // Cargar los datos del cultivo correspondiente a la plantación seleccionada
            cultivo = await cultivoService.GetCultivos(selectedPlantacion.IdCultivo);
            if (cultivo != null)
            {
                cultivo.TipoBerry = cultivo.TipoBerry;
                cultivo.Variedad = cultivo.Variedad;
            }

            // Cargar los datos de la llave correspondiente a la plantación seleccionada
            llave = await llavesService.GetLlave(selectedPlantacion.IdLlave);
            if (llave != null)
            {
                llave.NombreLlave = llave.NombreLlave;
                llave.Disponibilidad = llave.Disponibilidad;
            }

            // Cargar los datos del rancho correspondiente a la plantación seleccionada
            rancho = await ranchoService.GetRancho(selectedPlantacion.IdRancho);
            if (rancho != null)
            {
                rancho.NombreRancho = rancho.NombreRancho;
                rancho.NumeroRancho = rancho.NumeroRancho;
            }

            // Cargar los datos del vivero correspondiente a la plantación seleccionada
            vivero = await viveroService.GetVivero(selectedPlantacion.IdVivero);
            if (vivero != null)
            {
                vivero.NombreVivero = vivero.NombreVivero;
                vivero.CodigoVivero = vivero.CodigoVivero;
            }

            // Actualizar el formulario con los datos obtenidos
            deshabilitarFormulario = false;
            deshabilitarGuardar = false;
            deshabilitarNuevo = true;
            deshabilitarModificar = true;
            deshabilitarCancelar = false;
            deshabilitarConsultar = true;
            mostrarModalPlantaciones = false;

            // Asignar datos para replante
            replante.IdPlantacion = selectedPlantacion.IdPlantacion;
            replante.IdCultivo = selectedPlantacion.IdCultivo;
            replante.IdVivero = selectedPlantacion.IdVivero;
        }
        catch (Exception ex)
        {
            // Manejo de errores
            MostrarMensajeModal("Error", $"Error al seleccionar la plantación: {ex.Message}");

            // Opcionalmente, registrar el error
            await errorLogs.CreateErrorLogAsync(new ErrorLogDto
            {
                UserName = UserSession.Usuario, // Reemplazar con el nombre del usuario real
                ErrorMessage = ex.Message,
                ErrorProcedure = "SeleccionarPlantacion",
                ErrorLine = new System.Diagnostics.StackTrace(true).GetFrame(0)?.GetFileLineNumber().ToString(),
                ErrorTime = DateTime.UtcNow
            });
        }
    }

    private void AbrirModalPlantacion()
    {
        mostrarModalPlantaciones = true;
    }

    private void CerrarModalPlantacion()
    {
        mostrarModalPlantaciones = false;
        searchTermPlantacion = string.Empty;
    }



    // MODAL PARA SELECCIONAR CULTIVO
    // BÚSQUEDA INPUT
    private bool mostrarModalCultivo = false;

    private string searchTermCultivo = string.Empty;  // Campo de búsqueda
    private List<CultivosDto> filteredCultivos = new(); // Lista filtrada

	// Función para consultar los cultivos
    private async Task ConsultarCultivos()
    {
        try
        {
            // Obtiene todos los cultivos desde el servicio
            cultivos = await cultivoService.GetCultivosAsync();

            // Verificar si no se obtuvieron cultivos
            if (cultivos == null || !cultivos.Any())
            {
                MostrarMensajeModal("Información", "No se encontraron cultivos.");
                return;
            }

            // Inicializa filteredCultivos con la lista completa de cultivos
            filteredCultivos = cultivos;
        
            // Refresca la UI después de consultar
            StateHasChanged();
        }
        catch (Exception ex)
        {
            // Manejo de errores
            MostrarMensajeModal("Error", $"Error al consultar los cultivos: {ex.Message}");

            // Opcionalmente, registrar el error
            await errorLogs.CreateErrorLogAsync(new ErrorLogDto
            {
                UserName = UserSession.Usuario, // Reemplazar con el nombre del usuario real
                ErrorMessage = ex.Message,
                ErrorProcedure = "ConsultarCultivos",
                ErrorLine = new System.Diagnostics.StackTrace(true).GetFrame(0)?.GetFileLineNumber().ToString(),
                ErrorTime = DateTime.UtcNow
            });
        }
    }

	// Función para aplicar el filtro de búsqueda
    private void AplicarFiltroCultivos()
    {
        if (string.IsNullOrEmpty(searchTermCultivo))
        {
            filteredCultivos = cultivos;
        }
        else
        {
            searchTermCultivo = searchTermCultivo.Trim();

            filteredCultivos = cultivos.Where(c =>
                c.TipoBerry.Contains(searchTermCultivo, StringComparison.OrdinalIgnoreCase) ||
                c.Variedad.Contains(searchTermCultivo, StringComparison.OrdinalIgnoreCase)
            ).ToList();
        }
    }

	// Carga los datos del cultivo seleccionado en el formulario
    private void SeleccionarCultivo(CultivosDto selectedCultivo)
    {
        cultivo = new CultivosDto
            {
                IdCultivo = selectedCultivo.IdCultivo,
                TipoBerry = selectedCultivo.TipoBerry,
                Variedad = selectedCultivo.Variedad
            };

        replante.IdCultivo = selectedCultivo.IdCultivo;  // Se asigna automáticamente el ID al formulario de llaves

        mostrarModalCultivo = false;
    }

    private void AbrirModalCultivos()
    {
        mostrarModalCultivo = true;
    }

    private void CerrarModalCultivo()
    {
        mostrarModalCultivo = false;
        searchTermCultivo = string.Empty;
    }

    // MODAL PARA SELECCIONAR VIVERO
    private bool mostrarModalVivero = false;
    private string searchTermVivero = string.Empty;
    private List<ViverosDto> filteredViveros = new(); // Lista filtrada

    // Función para consultar los viveros
    private async Task ConsultarViveros()
    {
        try
        {
            // Obtiene todos los viveros desde el servicio
            viveros = await viveroService.GetViverosAsync();

            // Verificar si no se obtuvieron viveros
            if (viveros == null || !viveros.Any())
            {
                MostrarMensajeModal("Información", "No se encontraron viveros.");
                return;
            }

            // Inicializa filteredViveros con la lista completa, ordenada por IdVivero
            filteredViveros = viveros.OrderBy(v => v.IdVivero).ToList();

            // Refresca la UI después de la consulta
            StateHasChanged();
        }
        catch (Exception ex)
        {
            // Manejo de errores
            MostrarMensajeModal("Error", $"Error al consultar los viveros: {ex.Message}");

            // Opcionalmente, registrar el error
            await errorLogs.CreateErrorLogAsync(new ErrorLogDto
            {
                UserName = UserSession.Usuario, // Reemplazar con el nombre del usuario real
                ErrorMessage = ex.Message,
                ErrorProcedure = "ConsultarViveros",
                ErrorLine = new System.Diagnostics.StackTrace(true).GetFrame(0)?.GetFileLineNumber().ToString(),
                ErrorTime = DateTime.UtcNow
            });
        }
    }

    // Función para aplicar el filtro de búsqueda
    private void AplicarFiltroViveros()
    {
        if (string.IsNullOrEmpty(searchTermVivero))
        {
            filteredViveros = viveros;
        }
        else
        {
            searchTermVivero = searchTermVivero.Trim();
            filteredViveros = viveros.Where(v =>
                v.NombreVivero.Contains(searchTermVivero, StringComparison.OrdinalIgnoreCase) ||
                v.CodigoVivero.Contains(searchTermVivero, StringComparison.OrdinalIgnoreCase)
            ).ToList();
        }
    }

    // Carga los datos del vivero seleccionado en el formulario
    private void SeleccionarVivero(ViverosDto selectedVivero)
    {
        vivero = new ViverosDto
            {
                IdVivero = selectedVivero.IdVivero,
                NombreVivero = selectedVivero.NombreVivero,
                CodigoVivero = selectedVivero.CodigoVivero
            };

        replante.IdVivero = selectedVivero.IdVivero; // Se asigna automáticamente el ID

        mostrarModalVivero = false;
    }

    // Funciones para abrir y cerrar el modal
    private void AbrirModalViveros() => mostrarModalVivero = true;
    private void CerrarModalVivero()
    {
        mostrarModalVivero = false;
        vivero = new ViverosDto();
        searchTermVivero = string.Empty;
    }

    // Método de cálculo de la semana del año
    private void CalcularSemanaReplante(ChangeEventArgs e)
    {
        if (DateTime.TryParse(e.Value?.ToString(), out DateTime fecha))
        {
            replante.FechaReplante = fecha;

            var cultura = System.Globalization.CultureInfo.CurrentCulture;
            var calendario = cultura.Calendar;

            int semana = calendario.GetWeekOfYear(
                fecha,
                System.Globalization.CalendarWeekRule.FirstFourDayWeek,
                DayOfWeek.Monday
            );

            replante.NumSemReplante = semana;

            StateHasChanged(); // Actualiza la interfaz
        }
    }

}
