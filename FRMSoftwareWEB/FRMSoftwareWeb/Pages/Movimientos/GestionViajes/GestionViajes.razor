@page "/Movimientos/GestionViajes"

@using FRMSoftware.Data
@inject FRMSoftware.Services.Catalogos.CultivoService cultivoService
@inject FRMSoftware.Services.Catalogos.RanchosService ranchoService
@inject FRMSoftware.Services.Catalogos.VehiculosService vehiculosService
@inject FRMSoftware.Services.Catalogos.EmpleadosService empleadosService

@inject FRMSoftware.Services.Movimientos.GestionCosechasService cosechasService
@inject FRMSoftware.Services.Movimientos.GestionViajesService viajesService

@inject FRMSoftware.Services.Utilidades.ErrorLogService errorLogs
@inject FRMSoftware.Data.UserSession UserSession

@inject NavigationManager Navigation


<div class="container" style="min-height: calc(100vh - 3.5rem); overflow-y: auto; display: block;">
    <div class="row justify-content-center align-items-start mt-4">
        <h2 class="text-center fw-bold">Gestión de viajes</h2>
        
        <div class="row">
            <!-- Columna 1: Cosecha y Producción -->
            <div class="col-lg-4 mb-3">
                <div class="card shadow-sm mb-3 same-height-PC-1">
                    <div class="card-body">
                        <EditForm Model="cosecha">

                            <h5 class="text-center fw-bold">Cosecha</h5>
                            <div class="mb-1">
                                <label class="form-label">Fecha de cosecha:</label>
                                <InputDate class="form-control" @bind-Value="cosecha.FechaCosecha" disabled="true" />
                            </div>

                            <div class="mb-1">
                                <label class="form-label">Número de semana:</label>
                                <InputNumber class="form-control" @bind-Value="cosecha.NumSemCosecha" disabled="true" />
                            </div>


                            <div class="d-flex justify-content-center">
                                <button class="btn fixed-size-btn btn-seleccion mx-2" @onclick="AbrirModalCosecha" disabled="@deshabilitarGuardar">
                                    Seleccionar
                                </button>
                            </div>
                        </EditForm>


                        <EditForm Model="produccion">
                            <h5 class="text-center fw-bold margenProduccionViajes" style="margin-top:30px">Producción</h5>
                            <div class="mb-1">
                                <label class="form-label">Tipo de clamshell:</label>
                                <InputText class="form-control" @bind-Value="produccion.TipoCaja" disabled="true" />
                            </div>
                            <div class="mb-1">
                                <label class="form-label">Cantidad de cajas:</label>
                                <InputNumber class="form-control" @bind-Value="produccion.CantidadCajas" disabled="true" />
                            </div>
                            <div class="mb-1">
                                <label class="form-label">Kilos de proceso:</label>
                                <InputNumber class="form-control" @bind-Value="produccion.KilosProceso" disabled="true" />
                            </div>
                        </EditForm>
                    </div>
                </div>
            </div>


            <!-- Columna 2: Rancho arriba, Cultivo abajo -->
            <div class="col-lg-4 mb-3">
                <div class="card shadow-sm mb-3 same-height-PC-2">
                    <div class="card-body">
                        <EditForm Model="viaje">
                            <h5 class="text-center fw-bold">Viaje</h5>
                            <div class="mb-1">
                                <label class="form-label">Estado de aprobación de viaje:</label>
                                <InputSelect id="EstadoAprobacion" class="form-control" @bind-Value="viaje.EstadoAprobacion" disabled="@deshabilitarFormulario">
                                    <option disabled selected value="">Seleccione un estado:</option>
                                    <option value="Pendiente">Pendiente</option>
                                    <option value="Aceptado">Aceptado</option>
                                    <option value="Rechazado">Rechazado</option>
                                </InputSelect>
                            </div>
                        </EditForm>
                    </div>
                </div>


                <div class="card shadow-sm mb-3 same-height-PC-2">
                    <div class="card-body">
                        <EditForm Model="rancho">
                            <h5 class="text-center fw-bold">Rancho</h5>
                            <div class="mb-1">
                                <label class="form-label">Nombre del rancho:</label>
                                <InputText class="form-control" @bind-Value="rancho.NombreRancho" disabled="true" />
                            </div>
                            <div class="mb-1">
                                <label class="form-label">Número del rancho:</label>
                                <InputText class="form-control" @bind-Value="rancho.NumeroRancho" disabled="true" />
                            </div>
                        </EditForm>
                    </div>
                </div>

                <div class="card shadow-sm mb-3 same-height-PC-2">
                    <div class="card-body">
                        <EditForm Model="cultivo">
                            <h5 class="text-center fw-bold">Cultivo</h5>
                            <div class="mb-1">
                                <label class="form-label">Tipo de berry:</label>
                                <InputText class="form-control" @bind-Value="cultivo.TipoBerry" disabled="true" />
                            </div>
                            <div class="mb-1">
                                <label class="form-label">Variedad de berry:</label>
                                <InputText class="form-control" @bind-Value="cultivo.Variedad" disabled="true" />
                            </div>
                        </EditForm>
                    </div>
                </div>
            </div>


            <!-- Columna 3: Conductor y Vehículo -->
            <div class="col-lg-4 mb-3">
                <div class="card shadow-sm mb-3 same-height-Viajes">
                    <div class="card-body">
                        <EditForm Model="conductor">
                            <h5 class="text-center fw-bold">Conductor</h5>
                            <div class="mb-1">
                                <label class="form-label">Nombre del empleado:</label>
                                <InputText class="form-control" @bind-Value="empleado.Nombre" disabled="true" />
                            </div>

                            <div class="mb-1">
                                <label class="form-label">Teléfono:</label>
                                <InputText class="form-control" @bind-Value="empleado.Telefono" disabled="true" />
                            </div>

                            <div class="d-flex justify-content-center">
                                <button class="btn fixed-size-btn btn-seleccion mx-2" @onclick="AbrirModalEmpleados" disabled="@deshabilitarGuardar">
                                    Seleccionar
                                </button>
                            </div>
                        </EditForm>



                        <EditForm Model="vehiculo">

                            <h5 class="text-center fw-bold" style="margin-top:30px">Vehículo</h5>

                            <div class="mb-1">
                                <label class="form-label">Placas:</label>
                                <InputText class="form-control" @bind-Value="vehiculo.Placas" disabled="true" />
                            </div>

                            <div class="mb-1">
                                <label class="form-label">Modelo:</label>
                                <InputText class="form-control" @bind-Value="vehiculo.Modelo" disabled="true" />
                            </div>

                            <div class="mb-1">
                                <label class="form-label">Marca:</label>
                                <InputText class="form-control" @bind-Value="vehiculo.Marca" disabled="true" />
                            </div>

                            <div class="d-flex justify-content-center">
                                <button class="btn fixed-size-btn btn-seleccion mx-2" @onclick="AbrirModalVehiculos" disabled="@deshabilitarGuardar">
                                    Seleccionar
                                </button>
                            </div>
                        </EditForm>
                    </div>
                </div>
            </div>
        </div>

        @if (MostarFormularioTarimas)
        {
            <!-- Tercera fila: 2 columnas -->
            <div class="row justify-content-center align-items-start">
                <div class="col-lg-6">
                    <div class="card shadow-sm mb-3 same-height-Cosecha03">
                        <div class="card-body">
                            <EditForm Model="tarima" OnValidSubmit="GrabarRegistro" id="tarimaForm">

                                @if (mostrarTarima)
                                {
                                    <h5 class="text-center fw-bold">Datos de tarima</h5>


                                    <div class="mb-1">
                                        <label class="form-label">Cantidad de cajas:</label>
                                        <InputNumber class="form-control" @bind-Value="tarima.CantidadCajasViaje" disabled="@deshabilitarFormulario" />
                                    </div>

                                    <div class="mb-1">
                                        <label class="form-label">Licencia:</label>
                                        <InputNumber class="form-control" @bind-Value="tarima.Licencia" disabled="@deshabilitarFormulario" />
                                    </div>

                                }
                                <!-- Kilos de proceso -->
                                @if (mostrarKilosProceso)
                                {
                                    <h5 class="text-center fw-bold">Datos de proceso</h5>

                                    <div class="mb-1">
                                        <label class="form-label">Kilos de proceso:</label>
                                        <InputNumber class="form-control" @bind-Value="tarima.KilosProcesoViaje" disabled="@deshabilitarGuardar" />
                                    </div>
                                }
                            </EditForm>

                            @if (mostrarTarima)
                            {
                                <div class="d-flex justify-content-center">
                                    <button class="btn fixed-size-btn btn-seleccion mx-2" @onclick="AgregarTarima" disabled="@deshabilitarGuardar">
                                        @(modificando ? "Editar" : "Agregar")
                                    </button>

                                </div>

                            }
                        </div>
                    </div>
                </div>

                @if (mostrarTarima)
                {
                    <div class="col-lg-6">
                                <div class="card shadow-sm mb-3 same-height-Cosecha03">
                            <div class="card-body">
                                <div class="table-responsive" style="max-height: 200px; overflow-y: auto;">
                                    <h5 class="text-center fw-bold">Tarimas agregadas</h5>
                                    <table class="table table-bordered">
                                        <thead>
                                            <tr>
                                                <th>Cantidad de Cajas</th>
                                                <th>Licencia</th>

                                                <th>Acciones</th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            @foreach (var item in tarimas)
                                            {
                                                <tr>
                                                    <td>@item.CantidadCajasViaje</td>
                                                    <td>@item.Licencia</td>
                                                    <td>
                                                        <div class="d-flex gap-2">
                                                            @if (mostrarTarima && modificando)
                                                            {
                                                                <button class="btn editar" @onclick="() => EditarTarima(item.IdTarima)">Editar</button>
                                                            }
                                                            <button class="btn btn-red editar" @onclick="() => EliminarTarima(item)">Eliminar</button>
                                                        </div>
                                                    </td>
                                                </tr>
                                            }
                                        </tbody>
                                    </table>
                                </div>
                            </div>
                        </div>
                    </div>
                }
            </div>
        }
    </div>
</div>



<!-- Botones -->
<div class="container-fluid">
    <div class="buttons fixed-bottom bg-white d-flex justify-content-center ms-auto botones-responsive">

        @if (UserSession.Rol == "Admin" || UserSession.Rol == "Editor")
        {
            <button class="btn fixed-size-btn mx-2" @onclick="NuevoRegistro" disabled="@deshabilitarNuevo">Nuevo</button>
            <button class="btn fixed-size-btn mx-2" type="submit" form="tarimaForm" disabled="@deshabilitarGuardar">Guardar</button>
            <button class="btn fixed-size-btn mx-2" @onclick="AbrirModalViaje" disabled="@deshabilitarModificar">Modificar</button>
            <button class="btn fixed-size-btn mx-2" @onclick="Cancelar" disabled="@deshabilitarCancelar">Cancelar</button>
        }

        @if (UserSession.Rol == "Admin" || UserSession.Rol == "Consultor")
        {
            <button class="btn fixed-size-btn mx-2" @onclick="RedirigirAConsulta" disabled="@deshabilitarConsultar">Consultar</button>
        }

    </div>
</div>



<!-- MODAL para mostrar la tabla de detalles de viajes -->
@if (mostrarModalViaje)
{
    <div class="modal fade show d-block" tabindex="-1" role="dialog" style="background: rgba(0, 0, 0, 0.5);">
        <div class="modal-dialog modal-xl" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h3 class="modal-title" style="font-weight: bold;">Lista de viajes</h3>
                    <button type="button" class="btn-close" @onclick="CerrarModalViaje"></button>
                </div>
                <div class="modal-body">

                    <!-- Contenedor para alinear horizontalmente -->
                    <div class="row mb-3 align-items-center">
                        <div class="col-auto">
                            <input @bind="searchTermViajes" placeholder="Buscar viajes..." class="form-control" />
                        </div>
                        <div class="col-auto">
                            <button class="btn fixed-size-btn" @onclick="AplicarFiltroViajes">Buscar</button>
                        </div>
                    </div>

                    <!-- Botones deslizantes para alternar entre tablas -->
                    <div class="d-flex justify-content-center mb-3">
                        <div class="toggle-container">
                            <div class="toggle-slider" style='left: @(tablaActual == 1 ? "0%" : "50%")'></div>
                            <button class="toggle-btn @(tablaActual == 1 ? "active" : "")" @onclick="() => FiltrarViajes(1)">
                                Consulta de cajas
                            </button>
                            <button class="toggle-btn @(tablaActual == 2 ? "active" : "")" @onclick="() => FiltrarViajes(2)">
                                Consulta de proceso
                            </button>
                        </div>
                    </div>

                    <!-- Contenedor de la tabla con scroll -->
                    <div class="table-responsive" style="max-height: 70vh; overflow-y: auto;">
                        <table class="table table-striped table-bordered">
                            <thead class="table-dark">
                                <tr>
                                    <th>Acciones</th>

                                    <th>ID Viaje</th> 
                                    <th>Fecha de salida</th>
                                    <th>Número de semana</th>
                                    <th>Estado de aprobación</th>

                                    @if (tablaActual != 2)
                                    {
                                        <th>ID Tarima</th>
                                        <th>Cantidad de cajas</th>
                                        <th>Licencia</th>
                                    }
                                    @if (tablaActual != 1)
                                    {
                                        <th>Kilos proceso</th>
                                    }

                                    <th>ID Cosecha</th>
                                    <th>Fecha de cosecha</th>
                                    <th>Número de semana</th>

                                    <th>ID Producción</th>
                                    <th>Tipo de clamshell</th>
                                    <th>Cantidad de cajas</th>
                                    <th>Kilos de proceso</th>

                                    <th>ID Cultivo</th>
                                    <th>Tipo de berry</th>
                                    <th>Variedad</th>

                                    <th>ID Rancho</th>
                                    <th>Nombre del rancho</th>
                                    <th>Número del rancho</th>

                                    <th>ID Empleado</th>
                                    <th>Nombre del empleado</th>
                                    <th>Teléfono</th>

                                    <th>ID Vehículo</th>
                                    <th>Placas</th>
                                    <th>Modelo</th>
                                    <th>Marca</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var grupo in filteredViajes.GroupBy(v => new { v.IdViaje, v.IdProduccion }))
                                {
                                    var primeraTarima = grupo.FirstOrDefault(v => v.IdTarima != null);
                                    bool esPrimeraFila = true;

                                    @foreach (var item in grupo)
                                    {
                                        <tr>
                                            <!-- Colocar ACCIONES siempre en la primera columna, SOLO en la primera fila del grupo -->
                                            @if (esPrimeraFila)
                                            {
                                                <td rowspan="@grupo.Count()">
                                                    <div class="d-flex gap-2">
                                                        <button class="btn editar" @onclick="() => SeleccionarViaje(item)">Editar</button>
                                                        @if (UserSession.Rol == "Admin")
                                                        {
                                                            <button class="btn btn-red editar" @onclick="() => ConfirmarEliminar(item.IdViaje)">Eliminar</button>
                                                        }
                                                    </div>
                                                </td>
                                            }

                                            @if (tablaActual != 2)
                                            {
                                                <!-- Solo mostramos ID Viaje y Fecha Salida en la primera fila -->
                                                @if (esPrimeraFila)
                                                {
                                                    <td rowspan="@grupo.Count()">@item.IdViaje</td>
                                                    <td rowspan="@grupo.Count()">@item.FechaSalida.ToString("dd/MM/yyyy")</td>
                                                    <td rowspan="@grupo.Count()">@item.NumSemViaje</td>
                                                    <td rowspan="@grupo.Count()">@item.EstadoAprobacion</td>
                                                }

                                                <!-- Mostrar solo en la primera fila si hay tarimas -->
                                                @if (esPrimeraFila && primeraTarima != null)
                                                {
                                                    <td>@primeraTarima.IdTarima</td>
                                                    <td>@primeraTarima.CantidadCajasViaje</td>
                                                    <td>@primeraTarima.Licencia</td>
                                                }
                                                else if (!esPrimeraFila)
                                                {
                                                    <td>@item.IdTarima</td>
                                                    <td>@item.CantidadCajasViaje</td>
                                                    <td>@item.Licencia</td>
                                                }

                                            }

                                            <!-- Datos generales del viaje, solo en la primera fila -->
                                            @if (esPrimeraFila)
                                            {

                                                if (tablaActual != 1)
                                                {
                                                    <td rowspan="@grupo.Count()">@item.IdViaje</td>
                                                    <td rowspan="@grupo.Count()">@item.FechaSalida.ToString("dd/MM/yyyy")</td>
                                                    <td rowspan="@grupo.Count()">@item.NumSemViaje</td>
                                                    <td rowspan="@grupo.Count()">@item.EstadoAprobacion</td>
                                                    <td>@item.KilosProcesoViaje</td>

                                                }

                                                <td rowspan="@grupo.Count()">@item.IdCosecha</td>
                                                <td rowspan="@grupo.Count()">@item.FechaCosecha.ToString("dd/MM/yyyy")</td>
                                                <td rowspan="@grupo.Count()">@item.NumSemCosecha</td>

                                                <td rowspan="@grupo.Count()">@item.IdProduccion</td>
                                                <td rowspan="@grupo.Count()">@item.TipoCaja</td>
                                                <td rowspan="@grupo.Count()">@item.CantidadCajas</td>
                                                <td rowspan="@grupo.Count()">@item.KilosProceso</td>

                                                <td rowspan="@grupo.Count()">@item.IdCultivo</td>
                                                <td rowspan="@grupo.Count()">@item.TipoBerry</td>
                                                <td rowspan="@grupo.Count()">@item.Variedad</td>

                                                <td rowspan="@grupo.Count()">@item.IdRancho</td>
                                                <td rowspan="@grupo.Count()">@item.NombreRancho</td>
                                                <td rowspan="@grupo.Count()">@item.NumeroRancho</td>

                                                <td rowspan="@grupo.Count()">@item.IdEmpleado</td>
                                                <td rowspan="@grupo.Count()">@item.Nombre</td>
                                                <td rowspan="@grupo.Count()">@item.Telefono</td>

                                                <td rowspan="@grupo.Count()">@item.IdVehiculo</td>
                                                <td rowspan="@grupo.Count()">@item.Placas</td>
                                                <td rowspan="@grupo.Count()">@item.Modelo</td>
                                                <td rowspan="@grupo.Count()">@item.Marca</td>
                                            }

                                        </tr>
                                        esPrimeraFila = false;
                                    }
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>
}





<!-- MODAL para mostrar la tabla de modificación -->
@if (mostrarModalCosecha)
{
    <div class="modal fade show d-block" tabindex="-1" role="dialog" style="background: rgba(0, 0, 0, 0.5);">
        <div class="modal-dialog modal-xl" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h3 class="modal-title" style="font-weight: bold;">Lista de cosechas</h3>
                    <button type="button" class="btn-close" @onclick="CerrarModalCosecha"></button>
                </div>
                <div class="modal-body">
                    <!-- Contenedor para alinear horizontalmente -->
                    <div class="row mb-3 align-items-center">
                        <div class="col-auto">
                            <input @bind="searchTermCosecha" placeholder="Buscar cosechas..." class="form-control" />
                        </div>
                        <div class="col-auto">
                            <button class="btn fixed-size-btn" @onclick="AplicarFiltroCosechas">Buscar</button>
                        </div>
                    </div>

                    <!-- Contenedor de la tabla con scroll -->
                    <div class="table-responsive" style="max-height: 70vh; overflow-y: auto;">
                        <table class="table table-striped table-bordered">
                            <thead class="table-dark">
                                <tr>
                                    <th>ID Cosecha</th>
                                    <th>Fecha de cosecha</th>
                                    <th>Número de semana</th>

                                    <th>ID Producción</th>
                                    <th>Tipo de clamshell</th>
                                    <th>Cantidad de cajas</th>
                                    <th>Kilos de proceso</th>

                                    <th>ID Cultivo</th>
                                    <th>Tipo de berry</th>
                                    <th>Variedad</th>

                                    <th>ID Rancho</th>
                                    <th>Nombre del rancho</th>
                                    <th>Número del rancho</th>

                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var item in filteredCosechas)
                                {
                                    <tr @onclick="() => SeleccionarCosecha(item)" class="fila-seleccionable">
                                        <td>@item.IdCosecha</td>
                                        <td>@item.FechaCosecha.ToString("dd/MM/yyyy")</td>
                                        <td>@item.NumSemCosecha</td>

                                        <td>@item.IdProduccion</td>
                                        <td>@item.TipoCaja</td>
                                        <td>@item.CantidadCajas</td>
                                        <td>@item.KilosProceso</td>

                                        <td>@item.IdCultivo</td>
                                        <td>@item.TipoBerry</td>
                                        <td>@item.Variedad</td>

                                        <td>@item.IdRancho</td>
                                        <td>@item.NombreRancho</td>
                                        <td>@item.NumeroRancho</td>

                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>
}



<!-- MODAL para mostrar la tabla de empleados -->
@if (mostrarModalEmpleado)
{
    <div class="modal fade show d-block" tabindex="-1" role="dialog" style="background: rgba(0, 0, 0, 0.5);">
        <div class="modal-dialog modal-xl" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h3 class="modal-title" style="font-weight: bold;">Lista de Empleados</h3>
                    <button type="button" class="btn-close" @onclick="CerrarModalEmpleados"></button>
                </div>
                <div class="modal-body">
                    <!-- Contenedor para alinear horizontalmente -->
                    <div class="row mb-3 align-items-center">
                        <div class="col-auto">
                            <input @bind="searchTermEmpleados" placeholder="Buscar empleados..." class="form-control" />
                        </div>
                        <div class="col-auto">
                            <button class="btn fixed-size-btn" @onclick="AplicarFiltroEmpleados">Buscar</button>
                        </div>
                    </div>

                    <!-- Contenedor de la tabla con scroll -->
                    <div class="table-responsive" style="max-height: 70vh; overflow-y: auto;">
                        <table class="table table-striped table-bordered">
                            <thead class="table-dark">
                                <tr>
                                    <th>ID Empleado</th>
                                    <th>Nombre</th>
                                    <th>Departamento</th>
                                    <th>Puesto</th>
                                    <th>Dirección</th>
                                    <th>Municipio</th>
                                    <th>Estado</th>
                                    <th>Teléfono</th>
                                    <th>Estatus</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var item in filteredEmpleados)
                                {
                                    <tr @onclick="() => SeleccionarEmpleado(item)" class="fila-seleccionable">
                                        <td>@item.IdEmpleado</td>
                                        <td>@item.Nombre</td>
                                        <td>@item.Departamento</td>
                                        <td>@item.Puesto</td>
                                        <td>@item.Direccion</td>
                                        <td>@item.Municipio</td>
                                        <td>@item.Estado</td>
                                        <td>@item.Telefono</td>
                                        <td>@item.Estatus</td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>
}


<!-- MODAL para mostrar la tabla de vehículos -->
@if (mostrarModalVehiculo)
{
    <div class="modal fade show d-block" tabindex="-1" role="dialog" style="background: rgba(0, 0, 0, 0.5);">
        <div class="modal-dialog modal-xl" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h3 class="modal-title" style="font-weight: bold;">Lista de Vehículos</h3>
                    <button type="button" class="btn-close" @onclick="CerrarModalVehiculos"></button>
                </div>
                <div class="modal-body">
                    <!-- Contenedor para alinear horizontalmente -->
                    <div class="row mb-3 align-items-center">
                        <div class="col-auto">
                            <input @bind="searchTermVehiculos" placeholder="Buscar vehículos..." class="form-control" />
                        </div>
                        <div class="col-auto">
                            <button class="btn fixed-size-btn" @onclick="AplicarFiltroVehiculos">Buscar</button>
                        </div>
                    </div>

                    <!-- Contenedor de la tabla con scroll -->
                    <div class="table-responsive" style="max-height: 70vh; overflow-y: auto;">
                        <table class="table table-striped table-bordered">
                            <thead class="table-dark">
                                <tr>
                                    <th>ID Vehículo</th>
                                    <th>Placas</th>
                                    <th>Modelo</th>
                                    <th>Marca</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var item in filteredVehiculos)
                                {
                                    <tr @onclick="() => SeleccionarVehiculo(item)" class="fila-seleccionable">
                                        <td>@item.IdVehiculo</td>
                                        <td>@item.Placas</td>
                                        <td>@item.Modelo</td>
                                        <td>@item.Marca</td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>
}


<!-- Modal de confirmación de eliminación -->
@if (mostrarConfirmacion)
{
    <div class="modal fade show d-block" tabindex="-1" role="dialog" style="background: rgba(0, 0, 0, 0.5);">
        <div class="modal-dialog modal-dialog-centered" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Confirmar eliminación</h5>
                </div>
                <div class="modal-body">
                    <p>¿Está seguro de que desea eliminar este rancho?</p>
                </div>
                <div class="modal-footer">
                    <button class="btn" @onclick="CancelarEliminar">Cancelar</button>
                    <button class="btn btn-red" @onclick="EliminarViajeConfirmado">Eliminar</button>
                </div>
            </div>
        </div>
    </div>
}



<!-- Modal para mostrar mensajes -->
@if (mostrarMensajeModal)
{
    <div class="modal fade show d-block" tabindex="-1" role="dialog" style="background: rgba(0, 0, 0, 0.5);">
        <div class="modal-dialog modal-dialog-centered" role="document">
            <!-- Agregar modal-dialog-centered -->
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">@mensajeTitulo</h5>
                    <button type="button" class="btn-close" @onclick="CerrarMensajeModal"></button>
                </div>
                <div class="modal-body">
                    <p>@mensajeContenido</p>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-red" @onclick="CerrarMensajeModal">Cerrar</button>
                </div>
            </div>
        </div>
    </div>
}


<!-- Modal de confirmación de eliminación -->
@if (mostrarModalTipoViaje)
{
    <div class="modal fade show d-block" tabindex="-1" role="dialog" style="background: rgba(0, 0, 0, 0.5);">
        <div class="modal-dialog modal-dialog-centered" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Tipo de viaje</h5>
                    <button type="button" class="btn-close" @onclick="CerrarModalTipoViaje"></button>
                </div>
                <div class="modal-body">
                    <p>¿Se trata de un viaje de cajas o de proceso?</p>
                </div>
                <div class="modal-footer d-flex justify-content-center align-items-center">
                    <button class="btn" @onclick="ViajeCajas">Cajas</button>
                    <button class="btn" @onclick="ViajeProceso">Proceso</button>
                </div>
            </div>
        </div>
    </div>
}


@code {
    private CosechasDto cosecha = new CosechasDto();
    private ProduccionDto produccion = new ProduccionDto();
    private List<CosechasProduccionDto> cosechas = new();

    private CultivosDto cultivo = new CultivosDto();
    private List<CultivosDto> cultivos = new();

    private RanchosDto rancho = new RanchosDto();
    private List<RanchosDto> ranchos = new();

    private VehiculosDto vehiculo = new VehiculosDto();
    private List<VehiculosDto> vehiculos = new();

    private EmpleadosDto empleado = new EmpleadosDto();
    private List<EmpleadosDto> empleados = new();

    private TarimasDto tarima = new TarimasDto();
    private List<TarimasDto> tarimas = new();

    private ConductoresDto conductor = new ConductoresDto();
    private List<ConductoresDto> conductores = new();


    private ViajesDto viaje = new ViajesDto();
    private List<ViajesDto> viajes = new();
    private List<ViajesDetallesDto> viajesDetalles = new();

    // BUSQUEDA INPUT
    private string searchTermViajes = string.Empty;  
    private List<ViajesDetallesDto> filteredViajes = new();

    // FORMULARIO TARIMAS
    private bool mostrarTarima = false;
    private bool mostrarKilosProceso = false;
    private bool MostarFormularioTarimas = false;

    private bool mostrarModalTipoViaje = false;

    // MODALES
    private bool mostrarModalCosecha = false;
    private bool mostrarConfirmacion = false;

    // MENSAJES
    private bool mostrarMensajeModal = false;
    private string mensajeTitulo = string.Empty;
    private string mensajeContenido = string.Empty;


    // FORMULARIO
    private bool deshabilitarFormulario = true;

    // BOTONES
    private bool deshabilitarNuevo = false;
    private bool deshabilitarGuardar = true;
    private bool deshabilitarModificar = false;
    private bool deshabilitarCancelar = true;
    private bool deshabilitarConsultar = false;

    // ELIMINAR
    private int idViajeEliminar;

    // MODAL PROCESO
    bool mostrarModalTarimasProceso = false; // Controla la visibilidad del modal de tarimas o proceso

    // BANDERA DE MODIFICACION
    private bool modificando = false;


    protected override async Task OnInitializedAsync()
    {
        await ConsultarEmpleados();
        await ConsultarCosechas();
        await ConsultarVehiculos();
        await ConsultarViajes();
    }

    private async Task ConsultarViajes()
    {
        try
        {
            viajesDetalles = await viajesService.GetViajesDetallesAsync();
            filteredViajes = viajesDetalles.OrderBy(c => c.IdViaje).ToList(); // Inicializa  con la lista completa
            FiltrarViajes(1); // Filtra la tabla de viajes por defecto

            // Verificar existencia de datos
            if (viajesDetalles == null || !viajesDetalles.Any())
            {
                MostrarMensajeModal("Sin datos", "No se encontraron viajes.");
                return;
            }
            StateHasChanged(); // Fuerza el refresco de la UI después de consultar
        }
        catch (Exception ex)
        {
            // Registrar el error en la base de datos usando el servicio ErrorLogService
            await errorLogs.CreateErrorLogAsync(new ErrorLogDto
                {
                    UserName = UserSession.Usuario, // Reemplazar con el nombre del usuario real
                    ErrorMessage = ex.Message,
                    ErrorProcedure = "ConsultarViajesDetalles",
                    ErrorLine = ex.StackTrace?.Split('\n').FirstOrDefault(),
                    ErrorTime = DateTime.UtcNow
                });

            // Mostrar el mensaje de error al usuario
            MostrarMensajeModal("Error inesperado", $"Error: {ex.Message}");
        }
    }

    private void AplicarFiltroViajes()
    {
        var listaBase = viajesDetalles;

        // Aplicar el filtro según la tabla seleccionada
        if (tablaActual == 1)
        {
            listaBase = listaBase.Where(v => v.KilosProcesoViaje == 0).ToList();
        }
        else if (tablaActual == 2)
        {
            listaBase = listaBase.Where(v => v.CantidadCajasViaje == 0 && v.Licencia == 0).ToList();
        }

        // Aplicar búsqueda sobre la lista filtrada
        filteredViajes = string.IsNullOrEmpty(searchTermViajes)
            ? listaBase
            : listaBase.Where(v =>                

                // Datos del Viaje
                v.IdViaje.ToString().Contains(searchTermViajes, StringComparison.OrdinalIgnoreCase) ||
                v.FechaSalida.ToString("dd/MM/yyyy").Contains(searchTermViajes, StringComparison.OrdinalIgnoreCase) ||
                v.NumSemViaje.ToString().Contains(searchTermViajes, StringComparison.OrdinalIgnoreCase) ||
                v.CantidadCajasViaje.ToString().Contains(searchTermViajes, StringComparison.OrdinalIgnoreCase) ||
                v.Licencia.ToString().Contains(searchTermViajes, StringComparison.OrdinalIgnoreCase) ||
                v.KilosProcesoViaje.ToString().Contains(searchTermViajes, StringComparison.OrdinalIgnoreCase) ||

                // Datos de la Cosecha
                v.IdCosecha.ToString().Contains(searchTermViajes, StringComparison.OrdinalIgnoreCase) ||
                v.FechaCosecha.ToString("dd/MM/yyyy").Contains(searchTermViajes, StringComparison.OrdinalIgnoreCase) ||
                v.NumSemCosecha.ToString().Contains(searchTermViajes, StringComparison.OrdinalIgnoreCase) ||

                // Datos de la Producción
                v.IdProduccion.ToString().Contains(searchTermViajes, StringComparison.OrdinalIgnoreCase) ||
                v.TipoCaja.Contains(searchTermViajes, StringComparison.OrdinalIgnoreCase) ||
                (v.CantidadCajas?.ToString().Contains(searchTermViajes, StringComparison.OrdinalIgnoreCase) ?? false) ||
                (v.KilosProceso?.ToString().Contains(searchTermViajes, StringComparison.OrdinalIgnoreCase) ?? false) ||

                // Datos del Cultivo
                v.IdCultivo.ToString().Contains(searchTermViajes, StringComparison.OrdinalIgnoreCase) ||
                (v.TipoBerry?.Contains(searchTermViajes, StringComparison.OrdinalIgnoreCase) ?? false) ||
                (v.Variedad?.Contains(searchTermViajes, StringComparison.OrdinalIgnoreCase) ?? false) ||

                // Datos del Rancho
                v.IdRancho.ToString().Contains(searchTermViajes, StringComparison.OrdinalIgnoreCase) ||
                (v.NombreRancho?.Contains(searchTermViajes, StringComparison.OrdinalIgnoreCase) ?? false) ||
                (v.NumeroRancho?.Contains(searchTermViajes, StringComparison.OrdinalIgnoreCase) ?? false) ||

                // Datos del Empleado
                v.IdEmpleado.ToString().Contains(searchTermViajes, StringComparison.OrdinalIgnoreCase) ||
                v.Nombre.Contains(searchTermViajes, StringComparison.OrdinalIgnoreCase) ||
                v.Telefono.Contains(searchTermViajes, StringComparison.OrdinalIgnoreCase) ||

                // Datos del Vehículo
                v.IdVehiculo.ToString().Contains(searchTermViajes, StringComparison.OrdinalIgnoreCase) ||
                v.Placas.Contains(searchTermViajes, StringComparison.OrdinalIgnoreCase) ||
                v.Modelo.Contains(searchTermViajes, StringComparison.OrdinalIgnoreCase) ||
                v.Marca.Contains(searchTermViajes, StringComparison.OrdinalIgnoreCase)

            ).ToList();
    }

    private async Task SeleccionarViaje(ViajesDetallesDto selectedViaje)
    {
        try
        {
            cosecha = await cosechasService.GetCosechaPorIdAsync(selectedViaje.IdCosecha);
            if (cosecha != null)
            {
                cosecha.IdCosecha = cosecha.IdCosecha;
                cosecha.FechaCosecha = cosecha.FechaCosecha;
                cosecha.NumSemCosecha = cosecha.NumSemCosecha;
            }

            // Asignar datos del viaje
            viaje = new ViajesDto
                {
                    IdViaje = selectedViaje.IdViaje,
                    IdVehiculo = selectedViaje.IdVehiculo,
                    IdConductor = selectedViaje.IdEmpleado,
                    FechaSalida = DateOnly.FromDateTime(cosecha.FechaCosecha),
                    NumSemViaje = cosecha.NumSemCosecha ?? 0,
                    EstadoAprobacion = selectedViaje.EstadoAprobacion
                };


            produccion = await cosechasService.GetProduccionPorIdAsync(selectedViaje.IdProduccion);
            if (produccion != null)
            {
                produccion.TipoCaja = produccion.TipoCaja;
                produccion.CantidadCajas = produccion.CantidadCajas;
                produccion.KilosProceso = produccion.KilosProceso;
            }

            cultivo = await cultivoService.GetCultivos(selectedViaje.IdCultivo);
            if (cultivo != null)
            {
                cultivo.TipoBerry = cultivo.TipoBerry;
                cultivo.Variedad = cultivo.Variedad;
            }

            rancho = await ranchoService.GetRancho(selectedViaje.IdRancho);
            if (rancho != null)
            {
                rancho.NombreRancho = rancho.NombreRancho;
                rancho.NumeroRancho = rancho.NumeroRancho;
            }

            vehiculo = await vehiculosService.GetVehiculosPorIdAsync(selectedViaje.IdVehiculo);
            if (vehiculo != null)
            {
                vehiculo.Placas = vehiculo.Placas;
                vehiculo.Modelo = vehiculo.Modelo;
                vehiculo.Marca = vehiculo.Marca;
            }

            empleado = await empleadosService.GetEmpleadoPorIdAsync(selectedViaje.IdEmpleado);
            if (empleado != null)
            {
                empleado.Nombre = empleado.Nombre;
                empleado.Telefono = empleado.Telefono;
            }

            if (tablaActual == 1)
            {
                foreach (var item in viajesDetalles)
                {
                    if (item.CantidadCajasViaje > 0 && item.Licencia > 0 && item.IdViaje == selectedViaje.IdViaje) // Usamos item en vez de tarima
                    {
                        tarimas.Add(new TarimasDto
                            {
                                IdTarima = item.IdTarima,
                                IdProduccion = item.IdProduccion, // Tomamos los valores de item
                                IdViaje = item.IdViaje,
                                CantidadCajasViaje = item.CantidadCajasViaje,
                                Licencia = item.Licencia,
                                KilosProcesoViaje = item.KilosProcesoViaje
                            });
                    }
                }
            }
            if (tablaActual == 2)
            {
                tarima.KilosProcesoViaje = selectedViaje.KilosProcesoViaje;
                tarima = new TarimasDto
                    {
                        IdTarima = selectedViaje.IdTarima,
                        IdProduccion = selectedViaje.IdProduccion,
                        IdViaje = selectedViaje.IdViaje,
                        CantidadCajasViaje = selectedViaje.CantidadCajasViaje,
                        Licencia = selectedViaje.Licencia,
                        KilosProcesoViaje = selectedViaje.KilosProcesoViaje
                    };

            }

            StateHasChanged(); // Forzar actualización de la UI

            // Actualizar el formulario con los datos obtenidos
            deshabilitarFormulario = false;
            deshabilitarGuardar = false;
            deshabilitarNuevo = true;
            deshabilitarModificar = true;
            deshabilitarCancelar = false;
            deshabilitarConsultar = true;
            mostrarModalViaje = false;
            modificando = true;

            MostarFormularioTarimas = true;
            mostrarTarima = !mostrarModalTarimasProceso;
            mostrarKilosProceso = mostrarModalTarimasProceso;

            produccion.IdCosecha = selectedViaje.IdCosecha;
        }
        catch (Exception ex)
        {
            MostrarMensajeModal("Error inesperado", $"Error: {ex.Message}");

            // Registrar el error inesperado
            await errorLogs.CreateErrorLogAsync(new ErrorLogDto
                {
                    UserName = UserSession.Usuario, // Reemplazar con el nombre del usuario real
                    ErrorMessage = ex.Message,
                    ErrorProcedure = "SeleccionarViaje",
                    ErrorLine = new System.Diagnostics.StackTrace(true).GetFrame(0)?.GetFileLineNumber().ToString(),
                    ErrorTime = DateTime.UtcNow
                });
        }
    }


    private async Task EditarTarima(int id)
    {
        try
        {
            tarima = await viajesService.GetTarimasPorIdAsync(id);
            if (tarima != null)
            {
                tarima.CantidadCajasViaje = tarima.CantidadCajasViaje;
                tarima.Licencia = tarima.Licencia;
            }


        }
        catch (Exception ex)
        {
            MostrarMensajeModal("Error inesperado", $"Error: {ex.Message}");

            // Registrar el error inesperado
            await errorLogs.CreateErrorLogAsync(new ErrorLogDto
                {
                    UserName = UserSession.Usuario, // Reemplazar con el nombre del usuario real
                    ErrorMessage = ex.Message,
                    ErrorProcedure = "SeleccionarViaje",
                    ErrorLine = new System.Diagnostics.StackTrace(true).GetFrame(0)?.GetFileLineNumber().ToString(),
                    ErrorTime = DateTime.UtcNow
                });
        }
    }

    // Modelo para los datos de la tarima

    // Función para agregar una tarima a la lista
    private void AgregarTarima()
    {
        if (modificando)
        {
            // Buscar la tarima en la lista
            var tarimaExistente = tarimas.FirstOrDefault(t => t.IdTarima == tarima.IdTarima);
            if (tarimaExistente != null)
            {
                // Actualizar sus valores
                tarimaExistente.CantidadCajasViaje = tarima.CantidadCajasViaje;
                tarimaExistente.Licencia = tarima.Licencia;
                tarimaExistente.KilosProcesoViaje = 0;

                // Limpiar los campos después de agregar
                tarima = new TarimasDto();

            }
        }
        else
        {
            // Verificamos que los campos no estén vacíos
            if (tarima.CantidadCajasViaje > 0 && tarima.Licencia > 0)
            {
                tarimas.Add(new TarimasDto
                    {
                        IdTarima = tarima.IdTarima,
                        IdProduccion = produccion.IdProduccion,
                        IdViaje = viaje.IdViaje,
                        CantidadCajasViaje = tarima.CantidadCajasViaje,
                        Licencia = tarima.Licencia,
                        KilosProcesoViaje = 0
                    });

                // Limpiar los campos después de agregar
                tarima = new TarimasDto();
            }

        }
    }

    // Función para eliminar una tarima de la lista
    private void EliminarTarima(TarimasDto item)
    {
        tarimas.Remove(item);
    }


    // CONTROL MODAL MODIFICACIÓN
    private int tablaActual = 1; // 1 = Sin KilosProcesoViajes, 2 = Sin Cantidad de Cajas ni Licencia

    private void FiltrarViajes(int opcion)
    {
        tablaActual = opcion;

        if (opcion == 1)
        {
            // Filtrar solo los que tienen KilosProcesoViajes en 0
            filteredViajes = viajesDetalles.Where(v => v.KilosProcesoViaje == 0).ToList();

            mostrarModalTarimasProceso = false;
            searchTermViajes = string.Empty; // Limpiar el campo de búsqueda

        }
        else if (opcion == 2)
        {
            // Filtrar solo los que tienen CantidadCajasViaje y Licencia en 0 o vacío
            filteredViajes = viajesDetalles.Where(v => v.CantidadCajasViaje == 0 && v.Licencia == 0).ToList();

            mostrarModalTarimasProceso = true;
            searchTermViajes = string.Empty; // Limpiar el campo de búsqueda

        }
    }


    private void NuevoRegistro()
    {
        deshabilitarFormulario = false;
        deshabilitarGuardar = false;
        deshabilitarNuevo = true;
        deshabilitarModificar = true;
        deshabilitarConsultar = true;
        deshabilitarCancelar = false;

        mostrarModalTipoViaje = true;

    }

    private void ViajeCajas()
    {
        MostarFormularioTarimas = true;
        mostrarModalTipoViaje = false;
        mostrarTarima = true;
    }

    private void ViajeProceso()
    {
        MostarFormularioTarimas = true;
        mostrarModalTipoViaje = false;
        mostrarKilosProceso = true;
    }

    private void Cancelar()
    {
        cosecha = new CosechasDto();
        produccion = new ProduccionDto();
        cultivo = new CultivosDto();
        rancho = new RanchosDto();
        empleado = new EmpleadosDto();
        vehiculo = new VehiculosDto();
        viaje = new ViajesDto();
        tarima = new TarimasDto();
        tarimas.Clear();

        deshabilitarFormulario = true;
        deshabilitarGuardar = true;
        deshabilitarNuevo = false;
        deshabilitarModificar = false;
        deshabilitarConsultar = false;
        deshabilitarCancelar = true;

        MostarFormularioTarimas = false;
        mostrarTarima = false;
        mostrarKilosProceso = false;

        modificando = false;
    }

    private async Task GrabarRegistro()
    {
        if (vehiculo == null || vehiculo.IdVehiculo == 0 ||
            empleado == null || empleado.IdEmpleado == 0 ||
            produccion == null || produccion.IdProduccion == 0 ||
            (mostrarTarima && !tarimas.Any()) || (mostrarKilosProceso && tarima == null))
        {
            MostrarMensajeModal("Error", "Debe seleccionar todos los datos antes de continuar.");
            return;
        }

        if (mostrarKilosProceso)
        {
            tarimas = await viajesService.GetTarimasAsync();

            // 1. Filtrar tarimas del mismo proceso
            var tarimasFiltradas = tarimas
                .Where(t => t.IdProduccion == produccion.IdProduccion)
                .ToList();

            // 2. Si la tarima ya existe (edición), quitamos su versión anterior
            if (tarima.IdTarima != 0)
            {
                var tarimaExistente = tarimasFiltradas.FirstOrDefault(t => t.IdTarima == tarima.IdTarima);
                if (tarimaExistente != null)
                {
                    tarimasFiltradas.Remove(tarimaExistente);
                }
            }

            // 3. Sumar los kilos actuales + lo nuevo ingresado
            decimal? sumaKilosProceso = tarimasFiltradas.Sum(t => t.KilosProcesoViaje);
            sumaKilosProceso += tarima.KilosProcesoViaje;

            // 4. Comparar con el límite del proceso
            if (sumaKilosProceso > produccion.KilosProceso)
            {
                decimal? exceso = sumaKilosProceso - produccion.KilosProceso;
                MostrarMensajeModal("Error",
                            $"Total calculado: {sumaKilosProceso} kg (Existente: {sumaKilosProceso - tarima.KilosProcesoViaje}, Nuevo: {tarima.KilosProcesoViaje}). \n" +
                            $"Límite de producción: {produccion.KilosProceso.Value} kg. \n" +
                            $"Exceso: {exceso} kg."); 
                return;
            }

        }

        if (mostrarTarima)
        {
            // 1. Obtener tarimas de la base de datos
            var tarimasDB = await viajesService.GetTarimasAsync();
    
            // 2. Filtrar solo las de esta producción
            var tarimasDeDB = tarimasDB?
                .Where(t => t.IdProduccion == produccion.IdProduccion)
                .ToList();

            // 3. Obtener tarimas locales (nuevas o modificadas)
            var tarimasLocales = tarimas
                .Where(t => t.IdProduccion == produccion.IdProduccion)
                .ToList();

            // 4. Calcular suma de DB excluyendo las tarimas que están siendo editadas/modificadas localmente
            int? sumaDB = tarimasDeDB
                .Where(tDb => !tarimasLocales.Any(tLocal => tLocal.IdTarima == tDb.IdTarima))
                .Sum(t => t.CantidadCajasViaje ?? 0);

            // 5. Calcular suma de tarimas locales (incluye modificaciones)
            int? sumaLocales = tarimasLocales.Sum(t => t.CantidadCajasViaje ?? 0);

            // 6. Total correcto (DB no modificadas + Locales/modificadas)
            int? totalCajas = sumaDB + sumaLocales;

            // 7. Validación
            if (produccion.CantidadCajas.HasValue && totalCajas > produccion.CantidadCajas.Value)
            {
                int? exceso = totalCajas - produccion.CantidadCajas.Value;
                MostrarMensajeModal("Error", 
                    $"Total calculado: {totalCajas} cajas (Existente: {sumaDB}, Nuevo: {sumaLocales}). \n" +
                    $"Límite de producción: {produccion.CantidadCajas.Value} cajas. \n" +
                    $"Exceso: {exceso} cajas.");
                return;
            }
        }

        try
        {
            bool success = false;
            string message = string.Empty;

            if (modificando)
            {
                // Verificar si el viaje ya existe
                if (viaje.IdViaje > 0)
                {
                    var resultViaje = await viajesService.UpdateViajeAsync(viaje);

                    if (!resultViaje.Success)
                    {
                        MostrarMensajeModal("Error", resultViaje.Message);

                        await errorLogs.CreateErrorLogAsync(new ErrorLogDto
                            {
                                UserName = UserSession.Usuario, // Reemplazar con el nombre del usuario real
                                ErrorMessage = resultViaje.Message,
                                ErrorProcedure = "GrabarViajeConTarimas - UpdateViaje",
                                ErrorLine = new System.Diagnostics.StackTrace(true).GetFrame(0)?.GetFileLineNumber().ToString(),
                                ErrorTime = DateTime.UtcNow
                            });

                        return;
                    }
                }

                // Si hay tarimas, las actualizamos
                if (mostrarTarima && tarimas.Any())
                {
                    foreach (var tarimaItem in tarimas)
                    {
                        tarimaItem.IdViaje = viaje.IdViaje;
                    }

                    var resultTarimas = await viajesService.UpdateTarimasLoteAsync(tarimas);

                    if (!resultTarimas.Success)
                    {
                        MostrarMensajeModal("Error", resultTarimas.Message);

                        await errorLogs.CreateErrorLogAsync(new ErrorLogDto
                            {
                                UserName = UserSession.Usuario, // Reemplazar con el nombre del usuario real
                                ErrorMessage = resultTarimas.Message,
                                ErrorProcedure = "GrabarViajeConTarimas - UpdateTarimas",
                                ErrorLine = new System.Diagnostics.StackTrace(true).GetFrame(0)?.GetFileLineNumber().ToString(),
                                ErrorTime = DateTime.UtcNow
                            });

                        return;
                    }
                }
                else if (mostrarKilosProceso && tarima != null)
                {
                    var resultTarima = await viajesService.UpdateTarimaAsync(tarima);

                    if (!resultTarima.Success)
                    {
                        MostrarMensajeModal("Error", resultTarima.Message);

                        await errorLogs.CreateErrorLogAsync(new ErrorLogDto
                            {
                                UserName = UserSession.Usuario, // Reemplazar con el nombre del usuario real
                                ErrorMessage = resultTarima.Message,
                                ErrorProcedure = "GrabarViajeConTarimas - UpdateTarima",
                                ErrorLine = new System.Diagnostics.StackTrace(true).GetFrame(0)?.GetFileLineNumber().ToString(),
                                ErrorTime = DateTime.UtcNow
                            });

                        return;
                    }
                }

                MostrarMensajeModal("Éxito", "Viaje y tarimas actualizados correctamente.");
            }
            else
            {
                // Primero, intenta crear el Viaje
                if (viaje.IdViaje == 0)
                {
                    var resultViaje = await viajesService.CreateViajeAsync(viaje);

                    if (!resultViaje.Success)
                    {
                        MostrarMensajeModal("Error", resultViaje.Message);

                        // Registrar el error
                        await errorLogs.CreateErrorLogAsync(new ErrorLogDto
                            {
                                UserName = UserSession.Usuario, // Reemplazar con el nombre del usuario real
                                ErrorMessage = resultViaje.Message,
                                ErrorProcedure = "GrabarViajeConTarimas - CreateViaje",
                                ErrorLine = new System.Diagnostics.StackTrace(true).GetFrame(0)?.GetFileLineNumber().ToString(),
                                ErrorTime = DateTime.UtcNow
                            });

                        return;
                    }
                    viaje.IdViaje = resultViaje.IdViaje;
                    tarima.IdViaje = viaje.IdViaje;
                }

                // Grabar tarimas:
                if (mostrarTarima)
                {
                    if (tarimas == null)
                    {
                        MostrarMensajeModal("Error", "No se puede grabar sin tarimas asociadas.");
                        return;
                    }

                    // Asignar el IdViaje a cada tarima antes de guardarlas
                    foreach (var tarimaItem in tarimas)
                    {
                        tarimaItem.IdViaje = viaje.IdViaje;
                    }

                    // Graba la Tarima
                    var resultTarima = await viajesService.CreateTarimasLoteAsync(tarimas);

                    if (!resultTarima.Success)
                    {
                        MostrarMensajeModal("Error", resultTarima.Message);

                        // Registrar el error
                        await errorLogs.CreateErrorLogAsync(new ErrorLogDto
                            {
                                UserName = UserSession.Usuario, // Reemplazar con el nombre del usuario real
                                ErrorMessage = resultTarima.Message,
                                ErrorProcedure = "GrabarViajeConTarimas - CreateTarima",
                                ErrorLine = new System.Diagnostics.StackTrace(true).GetFrame(0)?.GetFileLineNumber().ToString(),
                                ErrorTime = DateTime.UtcNow
                            });

                        return;
                    }
                    else
                    {
                        MostrarMensajeModal("Éxito", "Viaje y tarimas guardados correctamente.");
                    }

                }
                else if (mostrarKilosProceso)
                {
                    // Si mostrarKilosProceso es true, grabamos una sola tarima.
                    if (tarima == null || tarima.IdProduccion == 0)
                    {
                        MostrarMensajeModal("Error", "No se puede grabar la tarima sin una producción asociada.");
                        return;
                    }

                    // Ajustamos los valores de la tarima para el proceso
                    tarima.CantidadCajasViaje = mostrarTarima ? tarima.CantidadCajasViaje : 0;
                    tarima.Licencia = mostrarTarima ? tarima.Licencia : 0;
                    tarima.KilosProcesoViaje = mostrarKilosProceso ? tarima.KilosProcesoViaje : 0;

                    // Graba la Tarima
                    var resultTarima = await viajesService.CreateTarimaAsync(tarima);

                    if (!resultTarima.Success)
                    {
                        MostrarMensajeModal("Error", resultTarima.Message);

                        // Registrar el error
                        await errorLogs.CreateErrorLogAsync(new ErrorLogDto
                            {
                                UserName = UserSession.Usuario, // Reemplazar con el nombre del usuario real
                                ErrorMessage = resultTarima.Message,
                                ErrorProcedure = "GrabarViajeConTarimas - CreateTarima",
                                ErrorLine = new System.Diagnostics.StackTrace(true).GetFrame(0)?.GetFileLineNumber().ToString(),
                                ErrorTime = DateTime.UtcNow
                            });

                        return;
                    }
                    else
                    {
                        MostrarMensajeModal("Éxito", "Viaje de proceso guardado correctamente.");
                    }
                }

            }

            // Actualizamos la UI y limpiamos el formulario
            await ConsultarViajes();
            deshabilitarFormulario = true;
            deshabilitarGuardar = true;
            deshabilitarNuevo = false;
            deshabilitarModificar = false;
            deshabilitarCancelar = true;
            deshabilitarConsultar = false;

            cosecha = new CosechasDto();
            produccion = new ProduccionDto();
            cultivo = new CultivosDto();
            rancho = new RanchosDto();
            empleado = new EmpleadosDto();
            vehiculo = new VehiculosDto();
            tarima = new TarimasDto();
            viaje = new ViajesDto();
            tarimas.Clear();  // Limpiamos la lista de tarimas

            mostrarTarima = false;
            mostrarKilosProceso = false;
            MostarFormularioTarimas = false;

            modificando = false;
        }
        catch (Exception ex)
        {
            MostrarMensajeModal("Error inesperado", $"Error: {ex.Message}");

            // Registrar el error inesperado
            await errorLogs.CreateErrorLogAsync(new ErrorLogDto
                {
                    UserName = UserSession.Usuario, // Reemplazar con el nombre del usuario real
                    ErrorMessage = ex.Message,
                    ErrorProcedure = "GrabarViajeConTarimas",
                    ErrorLine = new System.Diagnostics.StackTrace(true).GetFrame(0)?.GetFileLineNumber().ToString(),
                    ErrorTime = DateTime.UtcNow
                });

            mostrarTarima = false;
            mostrarKilosProceso = false;
            MostarFormularioTarimas = false;
            modificando = false;

        }
    }



    private void MostrarMensajeModal(string titulo, string contenido)
    {
        mensajeTitulo = titulo;
        mensajeContenido = contenido;
        mostrarMensajeModal = true;
    }

    private void CerrarMensajeModal()
    {
        mostrarMensajeModal = false;
    }

    bool mostrarModalViaje = false;

    private void AbrirModalViaje()
    {
        mostrarModalViaje = true;
    }

    private void CerrarModalViaje()
    {
        mostrarModalViaje = false;
        searchTermViajes = string.Empty;
    }

    private void CerrarModalTipoViaje()
    {
        Cancelar();
        mostrarModalTipoViaje = false;
    }

    private void ConfirmarEliminar(int id)
    {
        idViajeEliminar = id;
        mostrarConfirmacion = true;
    }

    private void CancelarEliminar()
    {
        mostrarConfirmacion = false;
    }

    private async Task EliminarViajeConfirmado()
    {
        try
        {
            mostrarConfirmacion = false;

            // Eliminar el viaje
            bool success = await viajesService.DeleteViajeAsync(idViajeEliminar);
            if (success)
            {
                await ConsultarViajes();
            }
        }
        catch (Exception ex)
        {
            // Registrar el error en la base de datos usando el servicio ErrorLogService
            await errorLogs.CreateErrorLogAsync(new ErrorLogDto
                {
                    UserName = UserSession.Usuario, // Reemplazar con el nombre del usuario real
                    ErrorMessage = ex.Message,
                    ErrorProcedure = "EliminarProcesoConfirmado",
                    ErrorLine = ex.StackTrace?.Split('\n').FirstOrDefault(),
                    ErrorTime = DateTime.UtcNow
                });

            // Mostrar el mensaje de error al usuario
            MostrarMensajeModal("Error inesperado", $"Error: {ex.Message}");
        }
    }


    private void RedirigirAConsulta()
    {
        Navigation.NavigateTo("/Movimientos/GestionViajesConsulta");
    }



    // MODAL COSECHAS
    // BÚSQUEDA INPUT
    private string searchTermCosecha = string.Empty;  // Campo de búsqueda
    private List<CosechasProduccionDto> filteredCosechas = new(); // Lista filtrada


    private async Task ConsultarCosechas()
    {
        try
        {
            cosechas = await cosechasService.GetCosechasProduccionAsync();
            filteredCosechas = cosechas.OrderBy(p => p.IdCosecha).ToList(); // Inicializa con la lista completa
            StateHasChanged(); // Fuerza el refresco de la UI después de consultar
        }
        catch (Exception ex)
        {
            // Registrar el error en la base de datos usando el servicio ErrorLogService
            await errorLogs.CreateErrorLogAsync(new ErrorLogDto
                {
                    UserName = UserSession.Usuario, // Reemplazar con el nombre del usuario real
                    ErrorMessage = ex.Message,
                    ErrorProcedure = "ConsultarCosechas",
                    ErrorLine = ex.StackTrace?.Split('\n').FirstOrDefault(),
                    ErrorTime = DateTime.UtcNow
                });

            // Mostrar el mensaje de error al usuario
            MostrarMensajeModal("Error inesperado", $"Error: {ex.Message}");
        }
    }

    private async Task AplicarFiltroCosechas()
    {
        try
        {
            filteredCosechas = string.IsNullOrEmpty(searchTermCosecha) ?
                cosechas :
                cosechas.Where(c =>
                    c.IdCosecha.ToString().Contains(searchTermCosecha, StringComparison.OrdinalIgnoreCase) ||
                    c.FechaCosecha.ToString("dd/MM/yyyy").Contains(searchTermCosecha, StringComparison.OrdinalIgnoreCase) ||
                    c.NumSemCosecha.ToString().Contains(searchTermCosecha, StringComparison.OrdinalIgnoreCase) ||

                    c.TipoCaja.Contains(searchTermCosecha, StringComparison.OrdinalIgnoreCase) ||
                    c.CantidadCajas.ToString().Contains(searchTermCosecha, StringComparison.OrdinalIgnoreCase) ||
                    c.KilosProceso.ToString().Contains(searchTermCosecha, StringComparison.OrdinalIgnoreCase) ||

                    // Datos del Cultivo
                    c.IdCultivo.ToString().Contains(searchTermCosecha, StringComparison.OrdinalIgnoreCase) ||
                    c.TipoBerry.Contains(searchTermCosecha, StringComparison.OrdinalIgnoreCase) ||
                    c.Variedad.Contains(searchTermCosecha, StringComparison.OrdinalIgnoreCase) ||

                    // Datos del Rancho
                    c.IdRancho.ToString().Contains(searchTermCosecha, StringComparison.OrdinalIgnoreCase) ||
                    c.NombreRancho.Contains(searchTermCosecha, StringComparison.OrdinalIgnoreCase) ||
                    c.NumeroRancho.ToString().Contains(searchTermCosecha, StringComparison.OrdinalIgnoreCase) 

                ).ToList();
        }
        catch (Exception ex)
        {
            // Registrar el error en la base de datos usando el servicio ErrorLogService
            await errorLogs.CreateErrorLogAsync(new ErrorLogDto
                {
                    UserName = UserSession.Usuario, // Reemplazar con el nombre del usuario real
                    ErrorMessage = ex.Message,
                    ErrorProcedure = "AplicarFiltroCosechas",
                    ErrorLine = ex.StackTrace?.Split('\n').FirstOrDefault(),
                    ErrorTime = DateTime.UtcNow
                });

            // Mostrar el mensaje de error al usuario
            MostrarMensajeModal("Error inesperado", $"Error: {ex.Message}");
        }
    }

    private async Task SeleccionarCosecha(CosechasProduccionDto selectedCosecha)
    {
        try
        {
            // Asignar datos de cosecha
            cosecha = new CosechasDto
                {
                    IdCosecha = selectedCosecha.IdCosecha,
                    IdPlantacion = selectedCosecha.IdPlantacion,
                    FechaCosecha = selectedCosecha.FechaCosecha,
                    NumSemCosecha = selectedCosecha.NumSemCosecha
                };

            // Asignar datos de producción
            produccion = new ProduccionDto
                {
                    IdProduccion = selectedCosecha.IdProduccion,
                    IdCosecha = selectedCosecha.IdCosecha,
                    TipoCaja = selectedCosecha.TipoCaja,
                    CantidadCajas = selectedCosecha.CantidadCajas,
                    KilosProceso = selectedCosecha.KilosProceso
                };

            viaje.NumSemViaje = cosecha.NumSemCosecha ?? 0;

            // Cargar los datos de los formularios correspondientes al replante seleccionado
            cultivo = await cultivoService.GetCultivos(selectedCosecha.IdCultivo);
            if (cultivo != null)
            {
                cultivo.TipoBerry = cultivo.TipoBerry;
                cultivo.Variedad = cultivo.Variedad;
            }

            rancho = await ranchoService.GetRancho(selectedCosecha.IdRancho);
            if (rancho != null)
            {
                rancho.NombreRancho = rancho.NombreRancho;
                rancho.NumeroRancho = rancho.NumeroRancho;
            }

            // Actualizar el formulario con los datos obtenidos
            deshabilitarFormulario = false;
            deshabilitarGuardar = false;
            deshabilitarNuevo = true;
            deshabilitarModificar = true;
            deshabilitarCancelar = false;
            deshabilitarConsultar = true;
            mostrarModalCosecha = false;

            produccion.IdCosecha = selectedCosecha.IdCosecha;
            tarima.IdProduccion = selectedCosecha.IdProduccion;
        }
        catch (Exception ex)
        {
            // Registrar el error en la base de datos usando el servicio ErrorLogService
            await errorLogs.CreateErrorLogAsync(new ErrorLogDto
                {
                    UserName = UserSession.Usuario, // Reemplazar con el nombre del usuario real
                    ErrorMessage = ex.Message,
                    ErrorProcedure = "SeleccionarCosecha",
                    ErrorLine = ex.StackTrace?.Split('\n').FirstOrDefault(),
                    ErrorTime = DateTime.UtcNow
                });

            // Mostrar el mensaje de error al usuario
            MostrarMensajeModal("Error inesperado", $"Error: {ex.Message}");
        }
    }

    private void AbrirModalCosecha()
    {
        mostrarModalCosecha = true;
    }

    private void CerrarModalCosecha()
    {
        mostrarModalCosecha = false;
        searchTermCosecha = string.Empty;
    }


    // MODAL EMPLEADOS

    // BÚSQUEDA INPUT
    private string searchTermEmpleados = string.Empty;  // Campo de búsqueda
    private List<EmpleadosDto> filteredEmpleados = new(); // Lista filtrada

    // Actualiza la lista de empleados
    private async Task ConsultarEmpleados()
    {
        try
        {
            empleados = await empleadosService.GetEmpleadosAsync();
            filteredEmpleados = empleados.OrderBy(e => e.IdEmpleado).ToList(); // Inicializa con la lista completa
            StateHasChanged(); // Fuerza el refresco de la UI después de consultar los empleados
        }
        catch (Exception ex)
        {
            // Registrar el error en la base de datos usando el servicio ErrorLogService
            await errorLogs.CreateErrorLogAsync(new ErrorLogDto
                {
                    UserName = UserSession.Usuario, // Reemplazar con el nombre del usuario real
                    ErrorMessage = ex.Message,
                    ErrorProcedure = "ConsultarEmpleados",
                    ErrorLine = ex.StackTrace?.Split('\n').FirstOrDefault(),
                    ErrorTime = DateTime.UtcNow
                });

            // Mostrar el mensaje de error al usuario
            MostrarMensajeModal("Error inesperado", $"Error: {ex.Message}");
            Console.WriteLine($"Error inesperado al consultar los empleados: {ex.Message}");
        }
    }

    private async Task AplicarFiltroEmpleados()
    {
        try
        {
            if (string.IsNullOrEmpty(searchTermEmpleados))
            {
                filteredEmpleados = empleados;
            }
            else
            {
                searchTermEmpleados = searchTermEmpleados.Trim();

                filteredEmpleados = empleados.Where(e =>
                    e.Nombre.Contains(searchTermEmpleados, StringComparison.OrdinalIgnoreCase) ||
                    e.Departamento.Contains(searchTermEmpleados, StringComparison.OrdinalIgnoreCase) ||
                    e.Puesto.Contains(searchTermEmpleados, StringComparison.OrdinalIgnoreCase) ||
                    e.Direccion.Contains(searchTermEmpleados, StringComparison.OrdinalIgnoreCase) ||
                    e.Colonia.Contains(searchTermEmpleados, StringComparison.OrdinalIgnoreCase) ||
                    e.CP.Contains(searchTermEmpleados, StringComparison.OrdinalIgnoreCase) ||
                    e.Municipio.Contains(searchTermEmpleados, StringComparison.OrdinalIgnoreCase) ||
                    e.Estado.Contains(searchTermEmpleados, StringComparison.OrdinalIgnoreCase) ||
                    e.Telefono.Contains(searchTermEmpleados, StringComparison.OrdinalIgnoreCase) ||
                    e.Estatus.Contains(searchTermEmpleados, StringComparison.OrdinalIgnoreCase)
                ).ToList();
            }
        }
        catch (Exception ex)
        {
            // Registrar el error en la base de datos usando el servicio ErrorLogService
            await errorLogs.CreateErrorLogAsync(new ErrorLogDto
                {
                    UserName = UserSession.Usuario, // Reemplazar con el nombre del usuario real
                    ErrorMessage = ex.Message,
                    ErrorProcedure = "AplicarFiltroEmpleados",
                    ErrorLine = ex.StackTrace?.Split('\n').FirstOrDefault(),
                    ErrorTime = DateTime.UtcNow
                });

            // Mostrar el mensaje de error al usuario
            MostrarMensajeModal("Error inesperado", $"Error: {ex.Message}");
        }
    }

    // MODIFICAR EMPLEADO (Editar)
    private async Task SeleccionarEmpleado(EmpleadosDto selectedEmpleado)
    {
        try
        {
            empleado = new EmpleadosDto
                {
                    IdEmpleado = selectedEmpleado.IdEmpleado,
                    Nombre = selectedEmpleado.Nombre,
                    Departamento = selectedEmpleado.Departamento,
                    Puesto = selectedEmpleado.Puesto,
                    Direccion = selectedEmpleado.Direccion,
                    Colonia = selectedEmpleado.Colonia,
                    CP = selectedEmpleado.CP,
                    Municipio = selectedEmpleado.Municipio,
                    Estado = selectedEmpleado.Estado,
                    Telefono = selectedEmpleado.Telefono,
                    Estatus = selectedEmpleado.Estatus
                };

            deshabilitarFormulario = false;
            deshabilitarGuardar = false;
            deshabilitarNuevo = true;
            deshabilitarModificar = true;
            deshabilitarCancelar = false;
            deshabilitarConsultar = true;
            mostrarModalEmpleado = false; // Cierra el modal

            viaje.IdConductor = selectedEmpleado.IdEmpleado;
        }
        catch (Exception ex)
        {
            // Registrar el error en la base de datos usando el servicio ErrorLogService
            await errorLogs.CreateErrorLogAsync(new ErrorLogDto
                {
                    UserName = UserSession.Usuario, // Reemplazar con el nombre del usuario real
                    ErrorMessage = ex.Message,
                    ErrorProcedure = "SeleccionarEmpleado",
                    ErrorLine = ex.StackTrace?.Split('\n').FirstOrDefault(),
                    ErrorTime = DateTime.UtcNow
                });

            // Mostrar el mensaje de error al usuario
            MostrarMensajeModal("Error inesperado", $"Error: {ex.Message}");
        }
    }


    bool mostrarModalEmpleado = false;

    private void AbrirModalEmpleados()
    {
        mostrarModalEmpleado = true;
    }

    private void CerrarModalEmpleados()
    {
        mostrarModalEmpleado = false;
        searchTermEmpleados = string.Empty;

    }


    // MODAL VEHÍCULOS

    // BÚSQUEDA INPUT
    private string searchTermVehiculos = string.Empty;  // Campo de búsqueda
    private List<VehiculosDto> filteredVehiculos = new(); // Lista filtrada

    // Actualiza la lista de vehículos
    private async Task ConsultarVehiculos()
    {
        try
        {
            vehiculos = await vehiculosService.GetVehiculosAsync();
            filteredVehiculos = vehiculos.OrderBy(v => v.IdVehiculo).ToList(); // Inicializa con la lista completa
            StateHasChanged(); // Fuerza el refresco de la UI después de consultar los vehículos
        }
        catch (Exception ex)
        {
            // Registrar el error en la base de datos usando el servicio ErrorLogService
            await errorLogs.CreateErrorLogAsync(new ErrorLogDto
                {
                    UserName = UserSession.Usuario, // Reemplazar con el nombre del usuario real
                    ErrorMessage = ex.Message,
                    ErrorProcedure = "ConsultarVehiculos",
                    ErrorLine = ex.StackTrace?.Split('\n').FirstOrDefault(),
                    ErrorTime = DateTime.UtcNow
                });

            // Mostrar el mensaje de error al usuario
            MostrarMensajeModal("Error inesperado", $"Error: {ex.Message}");
            Console.WriteLine($"Error inesperado al consultar los vehículos: {ex.Message}");
        }
    }

    // Aplica filtro a la lista de vehículos
    private async Task AplicarFiltroVehiculos()
    {
        try
        {
            if (string.IsNullOrEmpty(searchTermVehiculos))
            {
                filteredVehiculos = vehiculos;
            }
            else
            {
                searchTermVehiculos = searchTermVehiculos.Trim();

                filteredVehiculos = vehiculos.Where(v =>
                    v.Placas.Contains(searchTermVehiculos, StringComparison.OrdinalIgnoreCase) ||
                    v.Modelo.Contains(searchTermVehiculos, StringComparison.OrdinalIgnoreCase) ||
                    v.Marca.Contains(searchTermVehiculos, StringComparison.OrdinalIgnoreCase) 
                ).ToList();
            }
        }
        catch (Exception ex)
        {
            // Registrar el error en la base de datos usando el servicio ErrorLogService
            await errorLogs.CreateErrorLogAsync(new ErrorLogDto
                {
                    UserName = UserSession.Usuario, // Reemplazar con el nombre del usuario real
                    ErrorMessage = ex.Message,
                    ErrorProcedure = "AplicarFiltroVehiculos",
                    ErrorLine = ex.StackTrace?.Split('\n').FirstOrDefault(),
                    ErrorTime = DateTime.UtcNow
                });

            // Mostrar el mensaje de error al usuario
            MostrarMensajeModal("Error inesperado", $"Error: {ex.Message}");
        }
    }

    // MODIFICAR VEHÍCULO (Editar)
    private async Task SeleccionarVehiculo(VehiculosDto selectedVehiculo)
    {
        try
        {
            vehiculo = new VehiculosDto
                {
                    IdVehiculo = selectedVehiculo.IdVehiculo,
                    Placas = selectedVehiculo.Placas,
                    Modelo = selectedVehiculo.Modelo,
                    Marca = selectedVehiculo.Marca,
                };

            deshabilitarFormulario = false;
            deshabilitarGuardar = false;
            deshabilitarNuevo = true;
            deshabilitarModificar = true;
            deshabilitarCancelar = false;
            deshabilitarConsultar = true;
            mostrarModalVehiculo = false; // Cierra el modal

            viaje.IdVehiculo = selectedVehiculo.IdVehiculo;

        }
        catch (Exception ex)
        {
            // Registrar el error en la base de datos usando el servicio ErrorLogService
            await errorLogs.CreateErrorLogAsync(new ErrorLogDto
                {
                    UserName = UserSession.Usuario, // Reemplazar con el nombre del usuario real
                    ErrorMessage = ex.Message,
                    ErrorProcedure = "SeleccionarVehiculo",
                    ErrorLine = ex.StackTrace?.Split('\n').FirstOrDefault(),
                    ErrorTime = DateTime.UtcNow
                });

            // Mostrar el mensaje de error al usuario
            MostrarMensajeModal("Error inesperado", $"Error: {ex.Message}");
        }
    }

    bool mostrarModalVehiculo = false;

    private void AbrirModalVehiculos()
    {
        mostrarModalVehiculo = true;
    }

    private void CerrarModalVehiculos()
    {
        mostrarModalVehiculo = false;
        searchTermVehiculos = string.Empty;
    }

    private void CalcularSemanaViaje(ChangeEventArgs e)
    {
        if (DateOnly.TryParse(e.Value?.ToString(), out DateOnly fecha))
        {
            viaje.FechaSalida = fecha;

            var cultura = System.Globalization.CultureInfo.CurrentCulture;
            var calendario = cultura.Calendar;

            // Convertir DateOnly a DateTime (agregando hora 00:00:00)
            var fechaDateTime = fecha.ToDateTime(TimeOnly.MinValue);

            int semana = calendario.GetWeekOfYear(
                fechaDateTime,
                System.Globalization.CalendarWeekRule.FirstFourDayWeek,
                DayOfWeek.Monday
            );

            viaje.NumSemViaje = semana;

            StateHasChanged(); // Actualiza la interfaz
        }
    }

}
