@page "/Catalogos/EmpleadosConsulta"
@using FRMSoftware.Data
@inject FRMSoftware.Services.Catalogos.EmpleadosService empleadosService
@inject FRMSoftware.Services.Utilidades.ErrorLogService errorLogs
@inject FRMSoftware.Data.UserSession UserSession

@inject NavigationManager Navigation

<div class="container">
    <div class="row justify-content-center align-items-center" style="margin-top:20px">
        <h2 class="text-center fw-bold" style="margin-bottom: 20px">Consulta de empleados</h2>
        <!-- Contenedor para alinear horizontalmente -->
        <div class="row mb-3 align-items-center">
            <div class="col-auto">
                <input @bind="searchTerm" placeholder="Buscar empleados..." class="form-control" />
            </div>
            <div class="col-auto">
                <button class="btn fixed-size-btn" @onclick="AplicarFiltro">Buscar</button>
            </div> 
        </div>

        <div class="d-flex justify-content-end gap-2 mb-3">
            <button class="btn" @onclick="DescargarPDF_Empleados">Descargar PDF</button>
            <button class="btn" @onclick="DescargarExcel_Empleados">Descargar Excel</button>
        </div>

        <!-- Contenedor de la tabla con scroll -->
        <div class="table-responsive" style="max-height: 70vh; overflow-y: auto;">
            <table class="table table-striped table-bordered">
                <thead class="table-dark">
                    <tr>
                        <th>ID Empleado</th>
                        <th>Nombre</th>
                        <th>Departamento</th>
                        <th>Puesto</th>
                        <th>Dirección</th>
                        <th>Colonia</th>
                        <th>CP</th>
                        <th>Municipio</th>
                        <th>Estado</th>
                        <th>Teléfono</th>
                        <th>Estatus</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in filteredEmpleados)
                    {
                            <tr>
                                <td>@item.IdEmpleado</td>
                                <td>@item.Nombre</td>
                                <td>@item.Departamento</td>
                                <td>@item.Puesto</td>
                                <td>@item.Direccion</td>
                                <td>@item.Colonia</td>
                                <td>@item.CP</td>
                                <td>@item.Municipio</td>
                                <td>@item.Estado</td>
                                <td>@item.Telefono</td>
                                <td>@item.Estatus</td>
                            </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
</div>

<!-- Botones -->
<div class="container-fluid">
    <div class="buttons fixed-bottom bg-white d-flex justify-content-center ms-auto botones-responsive">
        <button class="btn fixed-size-btn mx-2" @onclick="RedirigirEmpleados">Regresar</button>
    </div>
</div>

@code {
    private List<EmpleadosDto> empleados = new(); // Lista completa de empleados
    private string searchTerm = string.Empty;  // Campo de búsqueda
    private List<EmpleadosDto> filteredEmpleados = new(); // Lista filtrada

    // Se llama al inicializar para cargar los empleados
    protected override async Task OnInitializedAsync()
    {
        await ConsultarEmpleados(); // Llamada al servicio para obtener los empleados
    }

    // Actualiza la lista de empleados
    private async Task ConsultarEmpleados()
    {
        try
        {
            empleados = await empleadosService.GetEmpleadosAsync();
            filteredEmpleados = empleados.OrderBy(e => e.IdEmpleado).ToList();
            StateHasChanged(); // Refresca la UI
        }
        catch (Exception ex)
        {
            // Registrar el error en la base de datos
            await errorLogs.CreateErrorLogAsync(new ErrorLogDto
                {
                    UserName = UserSession.Usuario, // Reemplazar con el nombre del usuario real
                    ErrorMessage = ex.Message,
                    ErrorProcedure = "ConsultarEmpleados",
                    ErrorLine = new System.Diagnostics.StackTrace(true).GetFrame(0)?.GetFileLineNumber().ToString(),
                    ErrorTime = DateTime.UtcNow
                });
        }
    }

    private void AplicarFiltro()
    {
        filteredEmpleados = string.IsNullOrEmpty(searchTerm) ?
            empleados :
            empleados.Where(e => e.Nombre.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                                e.Departamento.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                                e.Puesto.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                                e.Telefono.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                                e.Direccion.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                                e.Colonia.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                                e.CP.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                                e.Municipio.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                                e.Estado.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                                e.Estatus.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)).ToList();
    }

    // Redirigir a la página de consulta de empleados
    private void RedirigirEmpleados()
    {
        Navigation.NavigateTo("/Catalogos/Empleados");
    }

    private async Task DescargarPDF_Empleados()
    {
        try
        {
            await JS.InvokeVoidAsync("descargarPDF_Empleados");
        }
        catch (Exception ex)
        {
            await errorLogs.CreateErrorLogAsync(new ErrorLogDto
                {
                    UserName = UserSession.Usuario,
                    ErrorMessage = ex.Message,
                    ErrorProcedure = "DescargarPDF - Empleados",
                    ErrorLine = new System.Diagnostics.StackTrace(true).GetFrame(0)?.GetFileLineNumber().ToString(),
                    ErrorTime = DateTime.UtcNow
                });
        }
    }

    private async Task DescargarExcel_Empleados()
    {
        try
        {
            await JS.InvokeVoidAsync("descargarExcel_Empleados");
        }
        catch (Exception ex)
        {
            await errorLogs.CreateErrorLogAsync(new ErrorLogDto
                {
                    UserName = UserSession.Usuario,
                    ErrorMessage = ex.Message,
                    ErrorProcedure = "DescargarExcel - Empleados",
                    ErrorLine = new System.Diagnostics.StackTrace(true).GetFrame(0)?.GetFileLineNumber().ToString(),
                    ErrorTime = DateTime.UtcNow
                });
        }
    }

    [Inject] private IJSRuntime JS { get; set; }

}
