@page "/Reportes/ReporteViajeEstatusProceso"
@using FRMSoftware.Data
@inject FRMSoftware.Services.Movimientos.GestionViajesService viajesService

@inject FRMSoftware.Services.Utilidades.ErrorLogService errorLogs
@inject FRMSoftware.Data.UserSession UserSession

<div class="container">
    <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 20px;">
        <img src="images/LogoFRM.png" alt="Logo FRM" style="height: 80px;" />

        <div class="ms-3" style="flex: 1;">
            <div class="fw-bold fs-5">Frutillos Rojos de México S. de P. R. de R. L.</div>
            <div class="text-muted fs-6">Calle Zapotlán 193, Lomas de San Cayetano, 49040, Ciudad Guzmán, Jalisco, México</div>
        </div>

        <span class="fs-5 fw-semibold" style="white-space: nowrap;">
            @DateTime.Now.ToString("dd/MM/yyyy")
        </span>
    </div>

    <h2 class="text-center fw-bold mb-4">Reporte de viajes de proceso agrupados por estatus</h2>

    <div class="d-flex justify-content-end gap-2 mb-3">
        <button class="btn" @onclick="DescargarPDF_ViajesProcesoEstatus">Descargar PDF</button>
        <button class="btn" @onclick="DescargarExcel_ViajesProcesoEstatus">Descargar Excel</button>
    </div>

    <!-- Tabla -->
    <div class="table-responsive" style="max-height: 70vh; overflow-y: auto;">
        <table class="table table-striped table-bordered">
            <thead class="table-dark">
                <tr>
                    <th>ID Viaje</th>
                    <th>Fecha de salida</th>
                    <th>Número de semana</th>

                    @if (tablaActual != 2)
                    {
                        <th>ID Tarima</th>
                        <th>Cantidad de cajas</th>
                        <th>Licencia</th>
                    }
                    @if (tablaActual != 1)
                    {
                        <th>Kilos proceso</th>
                    }

                    <th>ID Cosecha</th>
                    <th>Fecha de cosecha</th>
                    <th>Número de semana</th>

                    <th>ID Producción</th>
                    <th>Tipo de clamshell</th>
                    <th>Cantidad de cajas</th>
                    <th>Kilos de proceso</th>

                    <th>ID Cultivo</th>
                    <th>Tipo de berry</th>
                    <th>Variedad</th>

                    <th>ID Rancho</th>
                    <th>Nombre del rancho</th>
                    <th>Número del rancho</th>

                    <th>ID Empleado</th>
                    <th>Nombre del empleado</th>
                    <th>Teléfono</th>

                    <th>ID Vehículo</th>
                    <th>Placas</th>
                    <th>Modelo</th>
                    <th>Marca</th>
                </tr>
            </thead>
            <tbody>
                <!-- Primero, agrupamos por EstadoAprobacion -->
                @foreach (var grupoEstado in viajes.GroupBy(v => v.EstadoAprobacion))
                {
                    string estiloFila = grupoEstado.Key switch
                    {
                        "Aceptado" => "background-color: #d4edda; color: #000; font-weight: bold;",    // Verde claro
                        "Pendiente" => "background-color: #cce5ff; color: #000; font-weight: bold;",   // Azul claro
                        "Rechazado" => "background-color: #f8d7da; color: #000; font-weight: bold;",   // Rojo claro
                        _ => "background-color: #e2e3e5; color: #383d41; font-weight: bold;"              // Gris por default
                    };

                    <tr style="@estiloFila">
                        <td colspan="24" class="text-start">
                            Estado de aprobación: @grupoEstado.Key
                        </td>
                    </tr>
                    // Luego, agrupamos por IdViaje e IdProduccion dentro del grupo de EstadoAprobacion
                    foreach (var grupoViaje in grupoEstado.GroupBy(v => new { v.IdViaje, v.IdProduccion }))
                    {
                        var primeraTarima = grupoViaje.FirstOrDefault(v => v.IdTarima != null);
                        bool esPrimeraFila = true;

                        @foreach (var item in grupoViaje)
                        {
                            <tr>
                                @if (tablaActual != 2)
                                {
                                    <!-- Solo mostramos ID Viaje y Fecha Salida en la primera fila -->
                                    @if (esPrimeraFila)
                                    {
                                        <td rowspan="@grupoViaje.Count()">@item.IdViaje</td>
                                        <td rowspan="@grupoViaje.Count()">@item.FechaSalida.ToString("dd/MM/yyyy")</td>
                                        <td rowspan="@grupoViaje.Count()">@item.NumSemViaje</td>
                                    }

                                    <!-- Mostrar solo en la primera fila si hay tarimas -->
                                    @if (esPrimeraFila && primeraTarima != null)
                                    {
                                        <td>@primeraTarima.IdTarima</td>
                                        <td>@primeraTarima.CantidadCajasViaje</td>
                                        <td>@primeraTarima.Licencia</td>
                                    }
                                    else if (!esPrimeraFila)
                                    {
                                        <td>@item.IdTarima</td>
                                        <td>@item.CantidadCajasViaje</td>
                                        <td>@item.Licencia</td>
                                    }
                                }

                                <!-- Datos generales del viaje, solo en la primera fila -->
                                @if (esPrimeraFila)
                                {
                                    if (tablaActual != 1)
                                    {
                                        <td rowspan="@grupoViaje.Count()">@item.IdViaje</td>
                                        <td rowspan="@grupoViaje.Count()">@item.FechaSalida.ToString("dd/MM/yyyy")</td>
                                        <td rowspan="@grupoViaje.Count()">@item.NumSemViaje</td>
                                        <td>@item.KilosProcesoViaje</td>
                                    }

                                    <td rowspan="@grupoViaje.Count()">@item.IdCosecha</td>
                                    <td rowspan="@grupoViaje.Count()">@item.FechaCosecha.ToString("dd/MM/yyyy")</td>
                                    <td rowspan="@grupoViaje.Count()">@item.NumSemCosecha</td>

                                    <td rowspan="@grupoViaje.Count()">@item.IdProduccion</td>
                                    <td rowspan="@grupoViaje.Count()">@item.TipoCaja</td>
                                    <td rowspan="@grupoViaje.Count()">@item.CantidadCajas</td>
                                    <td rowspan="@grupoViaje.Count()">@item.KilosProceso</td>

                                    <td rowspan="@grupoViaje.Count()">@item.IdCultivo</td>
                                    <td rowspan="@grupoViaje.Count()">@item.TipoBerry</td>
                                    <td rowspan="@grupoViaje.Count()">@item.Variedad</td>

                                    <td rowspan="@grupoViaje.Count()">@item.IdRancho</td>
                                    <td rowspan="@grupoViaje.Count()">@item.NombreRancho</td>
                                    <td rowspan="@grupoViaje.Count()">@item.NumeroRancho</td>

                                    <td rowspan="@grupoViaje.Count()">@item.IdEmpleado</td>
                                    <td rowspan="@grupoViaje.Count()">@item.Nombre</td>
                                    <td rowspan="@grupoViaje.Count()">@item.Telefono</td>

                                    <td rowspan="@grupoViaje.Count()">@item.IdVehiculo</td>
                                    <td rowspan="@grupoViaje.Count()">@item.Placas</td>
                                    <td rowspan="@grupoViaje.Count()">@item.Modelo</td>
                                    <td rowspan="@grupoViaje.Count()">@item.Marca</td>
                                }

                            </tr>
                            esPrimeraFila = false;
                        }
                    }
                }
            </tbody>
        </table>
    </div>

    <h3 class="text-center mt-5 fw-bold">Gráfica de cajas por estatus</h3>
    <div class="d-flex justify-content-center">
        <canvas id="chartViajesPorEstatusProceso" width="800" height="400"></canvas>
    </div>
</div>

@code {
    private int tablaActual = 2; // 1 para cajas, 2 para proceso

    private List<ViajesDetallesDto> viajes = new();
    private List<IGrouping<string, ViajesDetallesDto>> viajesAgrupadosPorEstatus = new();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            viajes = await viajesService.GetViajesDetallesAsync();

            viajes = viajes
                .Where(v => v.CantidadCajasViaje == 0) // Solo viajes de proceso
                .OrderBy(v => v.FechaSalida)
                .ToList();

            viajesAgrupadosPorEstatus = viajes
                .Where(v => v.CantidadCajasViaje == 0) // Solo viajes de proceso
                .GroupBy(v => v.EstadoAprobacion ?? "Sin estatus")
                .ToList();

            await GenerarGrafica_ViajesEstatus();
        }
        catch (Exception ex)
        {
            await errorLogs.CreateErrorLogAsync(new ErrorLogDto
                {
                    UserName = UserSession.Usuario,
                    ErrorMessage = ex.Message,
                    ErrorProcedure = "OnInitializedAsync - ReporteViajeEstatusProceso",
                    ErrorLine = new System.Diagnostics.StackTrace(true).GetFrame(0)?.GetFileLineNumber().ToString(),
                    ErrorTime = DateTime.UtcNow
                });
        }
    }

    private async Task GenerarGrafica_ViajesEstatus()
    {
        try
        {
            var labels = viajesAgrupadosPorEstatus.Select(g => g.Key).ToList();
            var valores = viajesAgrupadosPorEstatus.Select(g => g.Sum(v => v.KilosProcesoViaje)).ToList();

            var labelsJson = System.Text.Json.JsonSerializer.Serialize(labels);
            var valuesJson = System.Text.Json.JsonSerializer.Serialize(valores);

            await JS.InvokeVoidAsync("generarGraficaViajesProcesoEstatus", labelsJson, valuesJson);
        }
        catch (Exception ex)
        {
            await errorLogs.CreateErrorLogAsync(new ErrorLogDto
                {
                    UserName = UserSession.Usuario,
                    ErrorMessage = ex.Message,
                    ErrorProcedure = "GenerarGrafica_ViajesEstatus - ReporteViajeEstatusProceso",
                    ErrorLine = new System.Diagnostics.StackTrace(true).GetFrame(0)?.GetFileLineNumber().ToString(),
                    ErrorTime = DateTime.UtcNow
                });
        }
    }

    private async Task DescargarPDF_ViajesProcesoEstatus()
    {
        try
        {
            await JS.InvokeVoidAsync("descargarPDF_ViajesProcesoEstatus");
        }
        catch (Exception ex)
        {
            await errorLogs.CreateErrorLogAsync(new ErrorLogDto
                {
                    UserName = UserSession.Usuario,
                    ErrorMessage = ex.Message,
                    ErrorProcedure = "DescargarPDF - ReporteViajeEstatusProceso",
                    ErrorLine = new System.Diagnostics.StackTrace(true).GetFrame(0)?.GetFileLineNumber().ToString(),
                    ErrorTime = DateTime.UtcNow
                });
        }
    }

    private async Task DescargarExcel_ViajesProcesoEstatus()
    {
        try
        {
            await JS.InvokeVoidAsync("descargarExcel_ViajesProcesoEstatus");
        }
        catch (Exception ex)
        {
            await errorLogs.CreateErrorLogAsync(new ErrorLogDto
                {
                    UserName = UserSession.Usuario,
                    ErrorMessage = ex.Message,
                    ErrorProcedure = "DescargarExcel - ReporteViajeEstatusProceso",
                    ErrorLine = new System.Diagnostics.StackTrace(true).GetFrame(0)?.GetFileLineNumber().ToString(),
                    ErrorTime = DateTime.UtcNow
                });
        }
    }

    [Inject] private IJSRuntime JS { get; set; }
}
