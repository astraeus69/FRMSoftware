@page "/Reportes/ReportePlantacionesPorCultivoVariedad"
@using FRMSoftware.Data
@inject FRMSoftware.Services.Movimientos.GestionPlantacionesService plantacionesService
@inject FRMSoftware.Services.Utilidades.ErrorLogService errorLogs
@inject FRMSoftware.Data.UserSession UserSession

<div class="container">
    <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 20px;">
        <img src="images/LogoFRM.png" alt="Logo FRM" style="height: 80px;" />
        <div class="ms-3" style="flex: 1;">
            <div class="fw-bold fs-5">Frutillos Rojos de México S. de P. R. de R. L.</div>
            <div class="text-muted fs-6">Calle Zapotlán 193, Lomas de San Cayetano, 49040, Ciudad Guzmán, Jalisco, México</div>
        </div>
        <span class="fs-5 fw-semibold">@DateTime.Now.ToString("dd/MM/yyyy")</span>
    </div>

    <h2 class="text-center fw-bold mb-4">Reporte de plantaciones por cultivo y variedad</h2>

    <div class="d-flex justify-content-end gap-2 mb-3">
        <button class="btn" @onclick="DescargarPDF_PlantacionesPorCultivoVariedad">Descargar PDF</button>
        <button class="btn" @onclick="DescargarExcel_PlantacionesPorCultivoVariedad">Descargar Excel</button>
    </div>
    
    <div class="table-responsive" style="max-height: 70vh; overflow-y: auto;">
        <table class="table table-striped table-bordered">
            <thead class="table-dark">
                <tr>
                    <th>ID Plantación</th>
                    <th>Cantidad de plantas</th>
                    <th>Plantas por metro</th>
                    <th>Fecha de plantación</th>
                    <th>Número de semana</th>
                    <th>Estatus de plantación</th>
                    <th>ID Cultivo</th>
                    <th>Tipo de berry</th>
                    <th>Variedad</th>
                    <th>ID Vivero</th>
                    <th>Nombre del vivero</th>
                    <th>Código del vivero</th>
                    <th>ID Rancho</th>
                    <th>Nombre del rancho</th>
                    <th>Número del rancho</th>
                    <th>ID Llave</th>
                    <th>Nombre de llave</th>
                    <th>Superficie (HA)</th>
                    <th>Superficie (Acres)</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var grupo in plantacionesAgrupadas)
                {
                    <tr class="table-success fw-bold">
                        <td colspan="19" class="text-start">Cultivo: @grupo.Key</td>
                    </tr>
                    @foreach (var plantacion in grupo.OrderBy(p => p.Variedad))
                    {
                        <tr>
                            <td>@plantacion.IdPlantacion</td>
                            <td>@plantacion.CantidadPlantas</td>
                            <td>@plantacion.PlantasPorMetro</td>
                            <td>@plantacion.FechaPlantacion.ToString("dd/MM/yyyy")</td>
                            <td>@plantacion.NumSemPlantacion</td>
                            <td>@plantacion.EstatusPlantacion</td>

                            <td>@plantacion.IdCultivo</td>
                            <td>@plantacion.TipoBerry</td>
                            <td>@plantacion.Variedad</td>

                            <td>@plantacion.IdVivero</td>
                            <td>@plantacion.NombreVivero</td>
                            <td>@plantacion.CodigoVivero</td>

                            <td>@plantacion.IdRancho</td>
                            <td>@plantacion.NombreRancho</td>
                            <td>@plantacion.NumeroRancho</td>

                            <td>@plantacion.IdLlave</td>
                            <td>@plantacion.NombreLlave</td>
                            <td>@plantacion.SuperficieHa</td>
                            <td>@plantacion.SuperficieAcres</td>
                        </tr>
                    }
                    var totalPlantasGrupo = grupo.Sum(p => p.CantidadPlantas);

                    <tr class="fw-bold text-end">
                        <td colspan="1" class="text-end">Total de plantas:</td>
                        <td class="text-start">@totalPlantasGrupo</td>
                        <td colspan="17"></td>
                    </tr>
                }
            </tbody>
        </table>
    </div>

    @foreach (var item in plantacionesAgrupadas.Select((grupo, index) => new { grupo, index }))
    {
        <h4 class="text-center mt-5 fw-bold">Gráfica de variedades - @item.grupo.Key</h4>
        <div class="d-flex justify-content-center">
            <canvas id="chartCultivo_@item.index" data-nombre="@item.grupo.Key" width="800" height="400"></canvas>
        </div>
    }
</div>

@code {
    private List<PlantacionesDetallesDto> plantaciones = new();
    private List<IGrouping<string, PlantacionesDetallesDto>> plantacionesAgrupadas = new();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            plantaciones = await plantacionesService.GetPlantacionesDetalles();

            plantacionesAgrupadas = plantaciones
                .GroupBy(p => p.TipoBerry)
                .OrderBy(g => g.Key)
                .ToList();
        }
        catch (Exception ex)
        {
            await errorLogs.CreateErrorLogAsync(new ErrorLogDto
                {
                    UserName = UserSession.Usuario,
                    ErrorMessage = ex.Message,
                    ErrorProcedure = "OnInitializedAsync - ReportePlantacionesPorCultivoVariedad",
                    ErrorLine = new System.Diagnostics.StackTrace(true).GetFrame(0)?.GetFileLineNumber().ToString(),
                    ErrorTime = DateTime.UtcNow
                });
        }
    }
    private bool graficasGeneradas = false;

    // Usar OnAfterRenderAsync con StateHasChanged y una bandera
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                await Task.Delay(200);
                await GenerarGraficas();
                graficasGeneradas = true;
                StateHasChanged();
            }
            catch (Exception ex)
            {
                await errorLogs.CreateErrorLogAsync(new ErrorLogDto
                    {
                        UserName = UserSession.Usuario,
                        ErrorMessage = ex.Message,
                        ErrorProcedure = "OnAfterRenderAsync - ReportePlantacionesPorCultivoVariedad",
                        ErrorLine = new System.Diagnostics.StackTrace(true).GetFrame(0)?.GetFileLineNumber().ToString(),
                        ErrorTime = DateTime.UtcNow
                    });
            }
        }
    }

    private async Task GenerarGraficas()
    {
        try
        {
            int index = 0;
            foreach (var grupo in plantacionesAgrupadas)
            {
                var cultivo = grupo.Key;
                var agrupadoPorVariedad = grupo
                    .Where(p => !string.IsNullOrEmpty(p.Variedad))
                    .GroupBy(p => p.Variedad)
                    .OrderBy(g => g.Key)
                    .ToList();

                var labels = agrupadoPorVariedad.Select(g => g.Key).ToList();
                var values = agrupadoPorVariedad.Select(g => g.Sum(p => p.CantidadPlantas ?? 0)).ToList();

                var labelsJson = System.Text.Json.JsonSerializer.Serialize(labels);
                var valuesJson = System.Text.Json.JsonSerializer.Serialize(values);
                var idCanvas = $"chartCultivo_{index}";

                await JS.InvokeVoidAsync("generarGraficaPlantacionesPorCultivoVariedad", idCanvas, labelsJson, valuesJson, index);

                index++;
            }

            StateHasChanged();
        }
        catch (Exception ex)
        {
            await errorLogs.CreateErrorLogAsync(new ErrorLogDto
                {
                    UserName = UserSession.Usuario,
                    ErrorMessage = ex.Message,
                    ErrorProcedure = "GenerarGraficas - ReportePlantacionesPorCultivoVariedad",
                    ErrorLine = new System.Diagnostics.StackTrace(true).GetFrame(0)?.GetFileLineNumber().ToString(),
                    ErrorTime = DateTime.UtcNow
                });
        }
    }

    private async Task DescargarPDF_PlantacionesPorCultivoVariedad()
    {
        try
        {
            await JS.InvokeVoidAsync("descargarPDF_PlantacionesPorCultivoVariedad");
        }
        catch (Exception ex)
        {
            await errorLogs.CreateErrorLogAsync(new ErrorLogDto
                {
                    UserName = UserSession.Usuario,
                    ErrorMessage = ex.Message,
                    ErrorProcedure = "DescargarPDF - PlantacionesPorCultivoVariedad",
                    ErrorLine = new System.Diagnostics.StackTrace(true).GetFrame(0)?.GetFileLineNumber().ToString(),
                    ErrorTime = DateTime.UtcNow
                });
        }
    }

    private async Task DescargarExcel_PlantacionesPorCultivoVariedad()
    {
        try
        {
            await JS.InvokeVoidAsync("descargarExcel_PlantacionesPorCultivoVariedad");
        }
        catch (Exception ex)
        {
            await errorLogs.CreateErrorLogAsync(new ErrorLogDto
                {
                    UserName = UserSession.Usuario,
                    ErrorMessage = ex.Message,
                    ErrorProcedure = "DescargarExcel - PlantacionesPorCultivoVariedad",
                    ErrorLine = new System.Diagnostics.StackTrace(true).GetFrame(0)?.GetFileLineNumber().ToString(),
                    ErrorTime = DateTime.UtcNow
                });
        }
    }

    [Inject] private IJSRuntime JS { get; set; }
}
