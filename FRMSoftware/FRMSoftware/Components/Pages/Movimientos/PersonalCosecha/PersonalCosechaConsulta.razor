@page "/Movimientos/PersonalCosechaConsulta"
@using FRMSoftware.Data
@inject FRMSoftware.Services.Movimientos.GestionPersonalCosechaService personalCosechaService

@inject FRMSoftware.Services.Utilidades.ErrorLogService errorLogs
@inject FRMSoftware.Data.UserSession UserSession

@inject NavigationManager Navigation

<div class="container">
    <div class="row justify-content-center align-items-center" style="margin-top:20px">
        <h2 class="text-center fw-bold" style="margin-bottom: 20px">Consulta de registro de jarras</h2>

        <!-- Contenedor para alinear horizontalmente -->
        <div class="row mb-3 align-items-center">
            <div class="col-auto">
                <input @bind="searchTermPersonalCosechas" placeholder="Buscar jarras por personal..." class="form-control" />
            </div>
            <div class="col-auto">
                <button class="btn fixed-size-btn" @onclick="AplicarFiltroPersonalCosechas">Buscar</button>
            </div>
        </div>


        <div class="d-flex justify-content-end gap-2 mb-3">
            <button class="btn" @onclick="DescargarPDF_RegistroJarras">Descargar PDF</button>
            <button class="btn" @onclick="DescargarExcel_RegistroJarras">Descargar Excel</button>
        </div>

        <!-- Contenedor de la tabla con scroll -->
        <div class="table-responsive" style="max-height: 70vh; overflow-y: auto;">
            <table class="table table-striped table-bordered">
                <thead class="table-dark">
                    <tr>
                            <th>ID Personal cosecha</th>
                            <th>Jarras</th>
                            <th>Precio por jarra</th>

                            <th>ID Cosecha</th>
                            <th>Fecha de cosecha</th>

                            <th>ID Cultivo</th>
                            <th>Tipo de berry</th>
                            <th>Variedad</th>
                            
                            <th>ID Empleado</th>
                            <th>Nombre de empleado</th>
                            <th>Teléfono</th>        

                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in filteredPersonalCosechas)
                    {
                        <tr>
                            <td>@item.IdPersonalCosecha</td>
                            <td>@item.Jarras</td>
                            <td>@item.PrecioJarra</td>

                            <td>@item.IdCosecha</td>
                            <td>@item.FechaCosecha.ToString("dd/MM/yyyy")</td
                                
                            <td>@item.IdCultivo</td>
                            <td>@item.TipoBerry</td
                            <td>@item.Variedad</td>

                            <td>@item.IdEmpleado</td>
                            <td>@item.Nombre</td>
                            <td>@item.Telefono</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
</div>

<!-- Botón de regreso -->
<div class="container-fluid">
    <div class="buttons fixed-bottom bg-white d-flex justify-content-center ms-auto botones-responsive">
        <button class="btn fixed-size-btn mx-2" @onclick="RedirigirPersonalCosechas">Regresar</button>
    </div>
</div>

@code {
    private List<PersonalCosechaDetallesDto> personalCosechas = new();

    // BÚSQUEDA INPUT
    private string searchTermPersonalCosechas = string.Empty;  // Campo de búsqueda
    private List<PersonalCosechaDetallesDto> filteredPersonalCosechas = new(); // Lista filtrada

    protected override async Task OnInitializedAsync()
    {
        await ConsultarPersonalCosechas();
    }

    private async Task ConsultarPersonalCosechas()
    {
        try
        {
            // Obtiene todos los registros de personal de cosecha desde el servicio
            personalCosechas = await personalCosechaService.GetPersonalCosechaDetallesAsync();

            // Ordena y almacena los datos en filteredPersonalCosechas
            filteredPersonalCosechas = personalCosechas.OrderBy(p => p.IdPersonalCosecha).ToList();

            // Refresca la UI después de la consulta
            StateHasChanged();
        }
        catch (Exception ex)
        {
            // Registrar el error en la tabla de logs
            await errorLogs.CreateErrorLogAsync(new ErrorLogDto
            {
                UserName = UserSession.Usuario, // Reemplazar con el nombre del usuario real
                ErrorMessage = ex.Message,
                ErrorProcedure = "ConsultarPersonalCosechas",
                ErrorLine = new System.Diagnostics.StackTrace(true).GetFrame(0)?.GetFileLineNumber().ToString(),
                ErrorTime = DateTime.UtcNow
            });
        }
    }

    private void AplicarFiltroPersonalCosechas()
    {
        filteredPersonalCosechas = string.IsNullOrEmpty(searchTermPersonalCosechas) ?
            personalCosechas :
            personalCosechas.Where(pc =>

                pc.IdPersonalCosecha.ToString().Contains(searchTermPersonalCosechas, StringComparison.OrdinalIgnoreCase) ||
                pc.Jarras.ToString().Contains(searchTermPersonalCosechas, StringComparison.OrdinalIgnoreCase) ||
                pc.PrecioJarra.ToString().Contains(searchTermPersonalCosechas, StringComparison.OrdinalIgnoreCase) ||

                // Datos de la Cosecha
                pc.IdCosecha.ToString().Contains(searchTermPersonalCosechas, StringComparison.OrdinalIgnoreCase) ||
                pc.FechaCosecha.ToString("dd/MM/yyyy").Contains(searchTermPersonalCosechas, StringComparison.OrdinalIgnoreCase) ||
                pc.NumSemCosecha.ToString().Contains(searchTermPersonalCosechas, StringComparison.OrdinalIgnoreCase) ||

                // Datos del Cultivo
                pc.IdCultivo.ToString().Contains(searchTermPersonalCosechas, StringComparison.OrdinalIgnoreCase) ||
                pc.TipoBerry.Contains(searchTermPersonalCosechas, StringComparison.OrdinalIgnoreCase) ||
                pc.Variedad.Contains(searchTermPersonalCosechas, StringComparison.OrdinalIgnoreCase) ||


                // Datos del Empleado
                pc.IdEmpleado.ToString().Contains(searchTermPersonalCosechas, StringComparison.OrdinalIgnoreCase) ||
                pc.Nombre.Contains(searchTermPersonalCosechas, StringComparison.OrdinalIgnoreCase) ||
                pc.Telefono.Contains(searchTermPersonalCosechas, StringComparison.OrdinalIgnoreCase)
            ).ToList();
    }



    private void RedirigirPersonalCosechas()
    {
        Navigation.NavigateTo("/Movimientos/PersonalCosecha");
    }


    private async Task DescargarPDF_RegistroJarras()
    {
        try
        {
            await JS.InvokeVoidAsync("descargarPDF_RegistroJarras");
        }
        catch (Exception ex)
        {
            await errorLogs.CreateErrorLogAsync(new ErrorLogDto
            {
                UserName = UserSession.Usuario,
                ErrorMessage = ex.Message,
                ErrorProcedure = "DescargarPDF - RegistroJarras",
                ErrorLine = new System.Diagnostics.StackTrace(true).GetFrame(0)?.GetFileLineNumber().ToString(),
                ErrorTime = DateTime.UtcNow
            });
        }
    }

    private async Task DescargarExcel_RegistroJarras()
    {
        try
        {
            await JS.InvokeVoidAsync("descargarExcel_RegistroJarras");
        }
        catch (Exception ex)
        {
            await errorLogs.CreateErrorLogAsync(new ErrorLogDto
            {
                UserName = UserSession.Usuario,
                ErrorMessage = ex.Message,
                ErrorProcedure = "DescargarExcel - RegistroJarras",
                ErrorLine = new System.Diagnostics.StackTrace(true).GetFrame(0)?.GetFileLineNumber().ToString(),
                ErrorTime = DateTime.UtcNow
            });
        }
    }

    [Inject] private IJSRuntime JS { get; set; }

}
