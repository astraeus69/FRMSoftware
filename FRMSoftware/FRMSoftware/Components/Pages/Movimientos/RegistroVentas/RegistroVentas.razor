@page "/Movimientos/RegistroVentas"

@using FRMSoftware.Data
@inject Services.Catalogos.CultivoService cultivoService
@inject Services.Catalogos.RanchosService ranchoService
@inject Services.Catalogos.VehiculosService vehiculosService
@inject Services.Catalogos.EmpleadosService empleadosService

@inject FRMSoftware.Services.Movimientos.GestionCosechasService cosechasService
@inject FRMSoftware.Services.Movimientos.GestionViajesService viajesService
@inject FRMSoftware.Services.Movimientos.VentasService ventasService


@inject FRMSoftware.Services.Utilidades.ErrorLogService errorLogs
@inject FRMSoftware.Data.UserSession UserSession

@inject NavigationManager Navigation


<div class="container d-flex justify-content-center align-items-center" style="min-height: calc(100vh - 3.5rem); overflow-y: auto;">
    <div class="row justify-content-center align-items-start mt-4">
        <h2 class="text-center fw-bold">Gestión de ventas</h2>

        <div class="row">
            <!-- Columna 1: -->
            <div class="col-lg-4 mb-3">
                <div class="card shadow-sm mb-3 same-height-Ventas-1">
                    <div class="card-body">
                        <EditForm Model="viaje">
                            <h5 class="text-center fw-bold">Viaje</h5>

                            <div class="mb-1">
                                <label class="form-label">Fecha de viaje:</label>
                                <InputDate class="form-control" @bind-Value="viaje.FechaSalida" disabled="true" />
                            </div>

                            <div class="mb-1">
                                <label class="form-label">Número de semana:</label>
                                <InputNumber class="form-control" @bind-Value="viaje.NumSemViaje" disabled="true" />
                            </div>

                            <div class="d-flex justify-content-center">
                                <button class="btn fixed-size-btn btn-seleccion mx-2" @onclick="AbrirModalViaje" disabled="@deshabilitarGuardar">
                                    Seleccionar
                                </button>
                            </div>

                        </EditForm>
                    </div>
                </div>

                <div class="card shadow-sm mb-3 same-height-Ventas-1">
                    <div class="card-body">
                        <EditForm Model="rancho">
                            <h5 class="text-center fw-bold">Rancho</h5>
                            <div class="mb-1">
                                <label class="form-label">Nombre del rancho:</label>
                                <InputText class="form-control" @bind-Value="rancho.NombreRancho" disabled="true" />
                            </div>
                            <div class="mb-1">
                                <label class="form-label">Número del rancho:</label>
                                <InputText class="form-control" @bind-Value="rancho.NumeroRancho" disabled="true" />
                            </div>
                        </EditForm>
                    </div>
                </div>

                <div class="card shadow-sm mb-3 same-height-Ventas-1">
                    <div class="card-body">
                        <EditForm Model="cultivo">
                            <h5 class="text-center fw-bold">Cultivo</h5>
                            <div class="mb-1">
                                <label class="form-label">Tipo de berry:</label>
                                <InputText class="form-control" @bind-Value="cultivo.TipoBerry" disabled="true" />
                            </div>
                            <div class="mb-1">
                                <label class="form-label">Variedad de berry:</label>
                                <InputText class="form-control" @bind-Value="cultivo.Variedad" disabled="true" />
                            </div>
                        </EditForm>
                    </div>
                </div>
            </div>



            <!-- Columna 2: -->
            <div class="col-lg-4 mb-3">
                <div class="card shadow-sm mb-3 same-height-Ventas-2">
                    <div class="card-body">
                        @if (mostrarTarima)
                        {
                            <h5 class="text-center fw-bold">Detalles de viajes</h5>

                            <div class="table-responsive" style="max-height: 100px; overflow-y: auto; margin-bottom:30px;">
                                <table class="table table-bordered">
                                    <thead>
                                        <tr>
                                            <th>ID</th>
                                            <th>Cantidad de Cajas</th>
                                            <th>Licencia</th>

                                            <th>Acciones</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach (var item in tarimas)
                                        {
                                            <tr>
                                                <td>@item.IdTarima</td>
                                                <td>@item.CantidadCajasViaje</td>
                                                <td>@item.Licencia</td>
                                                <td>
                                                    <div class="d-flex gap-2">
                                                        @if (mostrarTarima && modificando && !tarimasAgregadas.Contains(item.IdTarima))
                                                        {
                                                            <button class="btn editar" @onclick="() => EditarTarima(item.IdTarima)">Agregar</button>
                                                        }
                                                        else if (tarimasAgregadas.Contains(item.IdTarima))
                                                        {
                                                            <span class="text-muted">Agregada</span>
                                                        }
                                                    </div>
                                                </td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            </div>
                        }


                        <EditForm Model="venta" OnValidSubmit="GrabarRegistro" id="ventaForm">
                            <DataAnnotationsValidator />

                            @if (mostrarTarima)
                            {
                                <h5 class="text-center fw-bold" style="margin-top:10px;">Datos de tarima</h5>


                                <div class="mb-1">
                                    <label class="form-label">Cantidad de cajas:</label>
                                    <InputNumber class="form-control" @bind-Value="tarima.CantidadCajasViaje" disabled="true" />
                                </div>

                                <div class="mb-1">
                                    <label class="form-label">Licencia:</label>
                                    <InputNumber class="form-control" @bind-Value="tarima.Licencia" disabled="true" />
                                </div>

                            }
                            <!-- Kilos de proceso -->
                            @if (mostrarKilosProceso)
                            {
                                <h5 class="text-center fw-bold">Datos de proceso</h5>

                                <div class="mb-1">
                                    <label class="form-label">Kilos de proceso:</label>
                                    <InputNumber class="form-control" @bind-Value="tarima.KilosProcesoViaje" disabled="true" />
                                </div>
                            }

                            <h5 class="text-center fw-bold" style="margin-top:10px;">Datos de venta</h5>

                            <label class="form-label">Precio de venta ($):</label>
                            <InputNumber class="form-control" @bind-Value="ventas.PrecioVentaTarima" disabled="@deshabilitarFormulario" />
                            <ValidationMessage For="@(() => ventas.PrecioVentaTarima)" class="text-danger" />

                            <label class="form-label">Precio de dólar ($):</label>
                            <InputNumber class="form-control" @bind-Value="venta.PrecioDolar" disabled="@deshabilitarFormulario" />
                            <ValidationMessage For="@(() => venta.PrecioDolar)" class="text-danger" />

                            <label class="form-label">Venta total ($):</label>
                            <InputNumber class="form-control" @bind-Value="venta.Total" disabled="true" />
                            <ValidationMessage For="@(() => venta.Total)" class="text-danger" />

                            <label class="form-label">Fecha de facturación:</label>
                            <InputDate class="form-control" @bind-Value="venta.FechaFacturacion" disabled="@deshabilitarFormulario" />
                            <ValidationMessage For="@(() => venta.FechaFacturacion)" class="text-danger" />


                        </EditForm>

                        <div class="d-flex justify-content-center">
                            <button class="btn fixed-size-btn btn-seleccion mx-2"
                            @onclick="AgregarTarimaVentas"
                            disabled="@(!CamposValidos || deshabilitarGuardar)">
                                Agregar
                            </button>
                        </div>
                    </div>
                </div>
            </div>


            <!-- Columna 3: -->
            <div class="col-lg-4 mb-3">
                <div class="card shadow-sm mb-3 same-height-Ventas-3">
                    <div class="card-body">
                        <div class="table-responsive" style="max-height: 600px; overflow-y: auto;">
                            <h5 class="text-center fw-bold">Detalles de ventas</h5>
                            <table class="table table-bordered">
                                <thead>
                                    <tr>
                                        <th>ID</th>
                                        @if (mostrarTarima)
                                        {
                                            <th>Cantidad de Cajas</th>
                                            <th>Licencia</th>
                                        }
                                        else if (mostrarKilosProceso)
                                        {
                                            <th>Kilos de Proceso</th>
                                        }
                                        <th>Precio</th>
                                        <th>Acciones</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var item in ventasDetalles)
                                    {
                                        <tr>
                                            <td>@item.IdTarima</td>
                                            @if (mostrarTarima)
                                            {
                                                <td>@item.CantidadCajasViaje</td>
                                                <td>@item.Licencia</td>
                                            }
                                            else if (mostrarKilosProceso)
                                            {
                                                <td>@item.KilosProcesoViaje</td>
                                            }
                                            <td>@item.PrecioVentaTarima</td>
                                            <td>
                                                <div class="d-flex gap-2">
                                                    <button class="btn btn-red editar" @onclick="() => EliminarTarima(item)">Eliminar</button>
                                                </div>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>

                        </div>

                    </div>
                </div>
            </div>
        </div>
    </div>
</div>



<!-- Botones -->
<div class="container-fluid">
    <div class="buttons fixed-bottom bg-white d-flex justify-content-center ms-auto botones-responsive">

        @if (UserSession.Rol == "Admin" || UserSession.Rol == "Editor")
        {
            <button class="btn fixed-size-btn mx-2" @onclick="NuevoRegistro" disabled="@deshabilitarNuevo">Nuevo</button>
            <button class="btn fixed-size-btn mx-2" type="submit" form="ventaForm" disabled="@deshabilitarGuardar">Guardar</button>
            <button class="btn fixed-size-btn mx-2" @onclick="AbrirModalVentas" disabled="@deshabilitarModificar">Modificar</button>
            <button class="btn fixed-size-btn mx-2" @onclick="Cancelar" disabled="@deshabilitarCancelar">Cancelar</button>
        }

        @if (UserSession.Rol == "Admin" || UserSession.Rol == "Consultor")
        {
            <button class="btn fixed-size-btn mx-2" @onclick="RedirigirAConsulta" disabled="@deshabilitarConsultar">Consultar</button>
        }

    </div>
</div>



<!-- MODAL para mostrar la tabla de detalles de viajes -->
@if (mostrarModalVentas)
{
    <div class="modal fade show d-block" tabindex="-1" role="dialog" style="background: rgba(0, 0, 0, 0.5);">
        <div class="modal-dialog modal-xl" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h3 class="modal-title" style="font-weight: bold;">Lista de ventas</h3>
                    <button type="button" class="btn-close" @onclick="CerrarModalVentas"></button>
                </div>
                <div class="modal-body">

                    <!-- Contenedor para alinear horizontalmente -->
                    <div class="row mb-3 align-items-center">
                        <div class="col-auto">
                            <input @bind="searchTermVentas" placeholder="Buscar ventas..." class="form-control" />
                        </div>
                        <div class="col-auto">
                            <button class="btn fixed-size-btn" @onclick="AplicarFiltroVentas">Buscar</button>
                        </div>
                    </div>

                    <!-- Botones deslizantes para alternar entre tablas -->
                    <div class="d-flex justify-content-center mb-3">
                        <div class="toggle-container">
                            <div class="toggle-slider" style='left: @(tablaActual == 1 ? "0%" : "50%")'></div>
                            <button class="toggle-btn @(tablaActual == 1 ? "active" : "")" @onclick="() => FiltrarVentas(1)">
                                Venta de cajas
                            </button>
                            <button class="toggle-btn @(tablaActual == 2 ? "active" : "")" @onclick="() => FiltrarVentas(2)">
                                Venta de proceso
                            </button>
                        </div>
                    </div>

                    <!-- Contenedor de la tabla con scroll -->
                    <div class="table-responsive" style="max-height: 70vh; overflow-y: auto;">
                        <table class="table table-striped table-bordered">
                            <thead class="table-dark">
                                <tr>
                                    <th>Acciones</th>

                                    <th>ID Venta</th>
                                    <th>Fecha de facturación</th>
                                    <th>Total de venta</th>
                                    <th>Precio del dólar</th>

                                    <th>ID Viaje</th>
                                    <th>Fecha de salida</th>
                                    <th>Número de semana</th>

                                    <th>ID Rancho</th>
                                    <th>Nombre del rancho</th>
                                    <th>Número del rancho</th>

                                    <th>ID Cultivo</th>
                                    <th>Tipo de berry</th>
                                    <th>Variedad</th>

                                    @if (tablaActual != 2)
                                    {
                                        <th>ID Tarima</th>
                                        <th>Cantidad de cajas</th>
                                        <th>Licencia</th>
                                    }
                                    @if (tablaActual != 1)
                                    {
                                        <th>Kilos proceso</th>
                                    }

                                    <th>Fecha de recepción</th>
                                    <th>Precio de venta</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var ventaGrupo in filteredVentas.GroupBy(v => v.IdVenta))
                                {
                                    bool esPrimeraFilaVenta = true;
                                    int filasTotalVenta = ventaGrupo.Count();

                                    // Agrupamos por viaje dentro de cada venta
                                    var viajesPorVenta = ventaGrupo.GroupBy(v => v.IdViaje);

                                    @foreach (var viajeGrupo in viajesPorVenta)
                                    {
                                        bool esPrimeraFilaViaje = true;
                                        int filasViaje = viajeGrupo.Count();

                                        @foreach (var item in viajeGrupo)
                                        {
                                            <tr>
                                                @if (esPrimeraFilaVenta)
                                                {
                                                    <td rowspan="@filasTotalVenta">
                                                        <div class="d-flex gap-2">
                                                            <button class="btn btn-red editar" @onclick="() => ConfirmarEliminar(item.IdVenta)">Eliminar</button>
                                                        </div>
                                                    </td>
                                                    <td rowspan="@filasTotalVenta">@item.IdVenta</td>
                                                    <td rowspan="@filasTotalVenta">@item.FechaFacturacion.ToString("dd/MM/yyyy")</td>
                                                    <td rowspan="@filasTotalVenta">@item.TotalVenta</td>
                                                    <td rowspan="@filasTotalVenta">@item.PrecioDolar</td>

                                                    esPrimeraFilaVenta = false;
                                                }

                                                @if (esPrimeraFilaViaje)
                                                {
                                                    <td rowspan="@filasViaje">@item.IdViaje</td>
                                                    <td rowspan="@filasViaje">@item.FechaSalida.ToString("dd/MM/yyyy")</td>
                                                    <td rowspan="@filasViaje">@item.NumSemViaje</td>

                                                    <td rowspan="@filasViaje">@item.IdRancho</td>
                                                    <td rowspan="@filasViaje">@item.NombreRancho</td>
                                                    <td rowspan="@filasViaje">@item.NumeroRancho</td>

                                                    <td rowspan="@filasViaje">@item.IdCultivo</td>
                                                    <td rowspan="@filasViaje">@item.TipoBerry</td>
                                                    <td rowspan="@filasViaje">@item.Variedad</td>

                                                    esPrimeraFilaViaje = false;
                                                }

                                                @if (tablaActual != 2)
                                                {
                                                    <td>@item.IdTarima</td>
                                                    <td>@item.CantidadCajasViaje</td>
                                                    <td>@item.Licencia</td>
                                                }

                                                @if (tablaActual != 1)
                                                {
                                                    <td>@item.KilosProcesoViaje</td>
                                                }

                                                <td>@item.FechaRecepcion.ToString("dd/MM/yyyy")</td>
                                                <td>@item.PrecioVentaTarima</td>
                                            </tr>
                                        }
                                    }
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>
}




<!-- MODAL para mostrar la tabla de detalles de viajes -->
@if (mostrarModalViaje)
{
    <div class="modal fade show d-block" tabindex="-1" role="dialog" style="background: rgba(0, 0, 0, 0.5);">
        <div class="modal-dialog modal-xl" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h3 class="modal-title" style="font-weight: bold;">Lista de viajes</h3>
                    <button type="button" class="btn-close" @onclick="CerrarModalViaje"></button>
                </div>
                <div class="modal-body">

                    <!-- Contenedor para alinear horizontalmente -->
                    <div class="row mb-3 align-items-center">
                        <div class="col-auto">
                            <input @bind="searchTermViajes" placeholder="Buscar viajes..." class="form-control" />
                        </div>
                        <div class="col-auto">
                            <button class="btn fixed-size-btn" @onclick="AplicarFiltroViajes">Buscar</button>
                        </div>
                    </div>

                    <!-- Contenedor de la tabla con scroll -->
                    <div class="table-responsive" style="max-height: 70vh; overflow-y: auto;">
                        <table class="table table-striped table-bordered">
                            <thead class="table-dark">
                                <tr>
                                    <th>ID Viaje</th> 
                                    <th>Fecha de salida</th>
                                    <th>Número de semana</th>
                                    <th>Estado de aprobación</th>

                                    @if (tablaActual != 2)
                                    {
                                        <th>ID Tarima</th>
                                        <th>Cantidad de cajas</th>
                                        <th>Licencia</th>
                                    }
                                    @if (tablaActual != 1)
                                    {
                                        <th>Kilos proceso</th>
                                    }

                                    <th>ID Cosecha</th>
                                    <th>Fecha de cosecha</th>
                                    <th>Número de semana</th>

                                    <th>ID Producción</th>
                                    <th>Tipo de clamshell</th>
                                    <th>Cantidad de cajas</th>
                                    <th>Kilos de proceso</th>

                                    <th>ID Cultivo</th>
                                    <th>Tipo de berry</th>
                                    <th>Variedad</th>

                                    <th>ID Rancho</th>
                                    <th>Nombre del rancho</th>
                                    <th>Número del rancho</th>

                                    <th>ID Empleado</th>
                                    <th>Nombre del empleado</th>
                                    <th>Teléfono</th>

                                    <th>ID Vehículo</th>
                                    <th>Placas</th>
                                    <th>Modelo</th>
                                    <th>Marca</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var grupo in filteredViajes.GroupBy(v => new { v.IdViaje, v.IdProduccion }))
                                {
                                    var primeraTarima = grupo.FirstOrDefault(v => v.IdTarima != null);
                                    bool esPrimeraFila = true;

                                    @foreach (var item in grupo)
                                    {
                                        <tr @onclick="() => SeleccionarViaje(item)" class="fila-seleccionable">
                                            @if (tablaActual != 2)
                                            {
                                                <!-- Solo mostramos ID Viaje y Fecha Salida en la primera fila -->
                                                @if (esPrimeraFila)
                                                {
                                                    <td rowspan="@grupo.Count()">@item.IdViaje</td>
                                                    <td rowspan="@grupo.Count()">@item.FechaSalida.ToString("dd/MM/yyyy")</td>
                                                    <td rowspan="@grupo.Count()">@item.NumSemViaje</td>
                                                    <td rowspan="@grupo.Count()">@item.EstadoAprobacion</td>
                                                }

                                                <!-- Mostrar solo en la primera fila si hay tarimas -->
                                                @if (esPrimeraFila && primeraTarima != null)
                                                {
                                                    <td>@primeraTarima.IdTarima</td>
                                                    <td>@primeraTarima.CantidadCajasViaje</td>
                                                    <td>@primeraTarima.Licencia</td>
                                                }
                                                else if (!esPrimeraFila)
                                                {
                                                    <td>@item.IdTarima</td>
                                                    <td>@item.CantidadCajasViaje</td>
                                                    <td>@item.Licencia</td>
                                                }

                                            }

                                            <!-- Datos generales del viaje, solo en la primera fila -->
                                            @if (esPrimeraFila)
                                            {

                                                if (tablaActual != 1)
                                                {
                                                    <td rowspan="@grupo.Count()">@item.IdViaje</td>
                                                    <td rowspan="@grupo.Count()">@item.FechaSalida.ToString("dd/MM/yyyy")</td>
                                                    <td rowspan="@grupo.Count()">@item.NumSemViaje</td>
                                                    <td rowspan="@grupo.Count()">@item.EstadoAprobacion</td>
                                                    <td>@item.KilosProcesoViaje</td>
                                                }

                                                <td rowspan="@grupo.Count()">@item.IdCosecha</td>
                                                <td rowspan="@grupo.Count()">@item.FechaCosecha.ToString("dd/MM/yyyy")</td>
                                                <td rowspan="@grupo.Count()">@item.NumSemCosecha</td>

                                                <td rowspan="@grupo.Count()">@item.IdProduccion</td>
                                                <td rowspan="@grupo.Count()">@item.TipoCaja</td>
                                                <td rowspan="@grupo.Count()">@item.CantidadCajas</td>
                                                <td rowspan="@grupo.Count()">@item.KilosProceso</td>

                                                <td rowspan="@grupo.Count()">@item.IdCultivo</td>
                                                <td rowspan="@grupo.Count()">@item.TipoBerry</td>
                                                <td rowspan="@grupo.Count()">@item.Variedad</td>

                                                <td rowspan="@grupo.Count()">@item.IdRancho</td>
                                                <td rowspan="@grupo.Count()">@item.NombreRancho</td>
                                                <td rowspan="@grupo.Count()">@item.NumeroRancho</td>

                                                <td rowspan="@grupo.Count()">@item.IdEmpleado</td>
                                                <td rowspan="@grupo.Count()">@item.Nombre</td>
                                                <td rowspan="@grupo.Count()">@item.Telefono</td>

                                                <td rowspan="@grupo.Count()">@item.IdVehiculo</td>
                                                <td rowspan="@grupo.Count()">@item.Placas</td>
                                                <td rowspan="@grupo.Count()">@item.Modelo</td>
                                                <td rowspan="@grupo.Count()">@item.Marca</td>
                                            }

                                        </tr>
                                        esPrimeraFila = false;
                                    }
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>
}



<!-- Modal de confirmación de eliminación -->
@if (mostrarConfirmacion)
{
    <div class="modal fade show d-block" tabindex="-1" role="dialog" style="background: rgba(0, 0, 0, 0.5);">
        <div class="modal-dialog modal-dialog-centered" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Confirmar eliminación</h5>
                </div>
                <div class="modal-body">
                    <p>¿Está seguro de que desea eliminar esta venta?</p>
                </div>
                <div class="modal-footer">
                    <button class="btn" @onclick="CancelarEliminar">Cancelar</button>
                    <button class="btn btn-red" @onclick="EliminarVentaConfirmado">Eliminar</button>
                </div>
            </div>
        </div>
    </div>
}



<!-- Modal para mostrar mensajes -->
@if (mostrarMensajeModal)
{
    <div class="modal fade show d-block" tabindex="-1" role="dialog" style="background: rgba(0, 0, 0, 0.5);">
        <div class="modal-dialog modal-dialog-centered" role="document">
            <!-- Agregar modal-dialog-centered -->
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">@mensajeTitulo</h5>
                    <button type="button" class="btn-close" @onclick="CerrarMensajeModal"></button>
                </div>
                <div class="modal-body">
                    <p>@mensajeContenido</p>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-red" @onclick="CerrarMensajeModal">Cerrar</button>
                </div>
            </div>
        </div>
    </div>
}


<!-- Modal de confirmación de eliminación -->
@if (mostrarModalTipoViaje)
{
    <div class="modal fade show d-block" tabindex="-1" role="dialog" style="background: rgba(0, 0, 0, 0.5);">
        <div class="modal-dialog modal-dialog-centered" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Tipo de viaje</h5>
                    <button type="button" class="btn-close" @onclick="CerrarModalTipoViaje"></button>
                </div>
                <div class="modal-body">
                    <p>¿Se trata de un viaje de cajas o de proceso?</p>
                </div>
                <div class="modal-footer d-flex justify-content-center align-items-center">
                    <button class="btn" @onclick="ViajeCajas">Cajas</button>
                    <button class="btn" @onclick="ViajeProceso">Proceso</button>
                </div>
            </div>
        </div>
    </div>
}


@code {
    private CosechasDto cosecha = new CosechasDto();
    private ProduccionDto produccion = new ProduccionDto();
    private List<CosechasProduccionDto> cosechas = new();

    private CultivosDto cultivo = new CultivosDto();
    private List<CultivosDto> cultivos = new();

    private RanchosDto rancho = new RanchosDto();
    private List<RanchosDto> ranchos = new();

    private VehiculosDto vehiculo = new VehiculosDto();
    private List<VehiculosDto> vehiculos = new();

    private EmpleadosDto empleado = new EmpleadosDto();
    private List<EmpleadosDto> empleados = new();

    private TarimasDto tarima = new TarimasDto();
    private List<TarimasDto> tarimas = new();

    private ConductoresDto conductor = new ConductoresDto();
    private List<ConductoresDto> conductores = new();


    private ViajesDto viaje = new ViajesDto();
    private List<ViajesDto> viajes = new();

    private ViajesDetallesDto viajeDC = new ViajesDetallesDto();
    private List<ViajesDetallesDto> viajesDetalles = new();

    private HashSet<int> tarimasAgregadas = new();


    private VentasDto venta = new VentasDto();
    private VentasDetallesDto ventas = new VentasDetallesDto();
    private List<VentasDetallesDto> ventasDetalles = new();
    private List<VentasDetallesCompletosDto> ventasDC = new();

    // BUSQUEDA INPUT
    private string searchTermVentas = string.Empty;
    private List<VentasDetallesCompletosDto> filteredVentas = new();


    // BUSQUEDA INPUT
    private string searchTermViajes = string.Empty;
    private List<ViajesDetallesDto> filteredViajes = new();
    private List<int> idsViajesConVentas = new(); // esta se llena con el servicio antes del filtro



    // FORMULARIO TARIMAS
    private bool mostrarTarima = false;
    private bool mostrarKilosProceso = false;
    private bool MostarFormularioTarimas = false;

    private bool mostrarModalTipoViaje = false;

    // MODALES
    private bool mostrarModalCosecha = false;
    private bool mostrarConfirmacion = false;

    // MENSAJES
    private bool mostrarMensajeModal = false;
    private string mensajeTitulo = string.Empty;
    private string mensajeContenido = string.Empty;


    // FORMULARIO
    private bool deshabilitarFormulario = true;

    // BOTONES
    private bool deshabilitarNuevo = false;
    private bool deshabilitarGuardar = true;
    private bool deshabilitarModificar = false;
    private bool deshabilitarCancelar = true;
    private bool deshabilitarConsultar = false;

    // ELIMINAR
    private int idViajeEliminar;

    // MODAL PROCESO
    bool mostrarModalTarimasProceso = false; // Controla la visibilidad del modal de tarimas o proceso

    // BANDERA DE MODIFICACION
    private bool modificando = false;


    protected override async Task OnInitializedAsync()
    {
        await ConsultarViajes();
        await ConsultarVentas();
    }

    private async Task ConsultarVentas()
    {
        try
        {
            ventasDC = await ventasService.GetVentasDCAsync();
            // Verificar existencia de datos
            if (ventasDC == null || !ventasDC.Any())
            {
                MostrarMensajeModal("Sin datos", "No se encontraron ventas.");
                return;
            }

            filteredVentas = ventasDC.OrderBy(c => c.IdVenta).ToList(); // Inicializa  con la lista completa
            FiltrarVentas(1); // Filtra la tabla de ventas por defecto
            FiltrarViajes(1); // Filtra la tabla de viajes por defecto
            StateHasChanged(); // Fuerza el refresco de la UI después de consultar
        }
        catch (Exception ex)
        {
            // Registrar el error en la base de datos usando el servicio ErrorLogService
            await errorLogs.CreateErrorLogAsync(new ErrorLogDto
                {
                    UserName = UserSession.Usuario, // Reemplazar con el nombre del usuario real
                    ErrorMessage = ex.Message,
                    ErrorProcedure = "ConsultarViajesDetalles",
                    ErrorLine = ex.StackTrace?.Split('\n').FirstOrDefault(),
                    ErrorTime = DateTime.UtcNow
                });

            // Mostrar el mensaje de error al usuario
            MostrarMensajeModal("Error inesperado", $"Error: {ex.Message}");
        }
    }

    private void AplicarFiltroVentas()
    {
        var listaBase = ventasDC;

        // Aplicar el filtro según la tabla seleccionada
        if (tablaActual == 1)
        {
            listaBase = listaBase.Where(v => v.KilosProcesoViaje == 0).ToList();
        }
        else if (tablaActual == 2)
        {
            listaBase = listaBase.Where(v => v.CantidadCajasViaje == 0 && v.Licencia == 0).ToList();
        }

        // Aplicar búsqueda sobre la lista filtrada
        filteredVentas = string.IsNullOrEmpty(searchTermVentas)
            ? listaBase
            : listaBase.Where(v =>

                // Datos de venta
                v.IdVenta.ToString().Contains(searchTermVentas, StringComparison.OrdinalIgnoreCase) ||
                v.FechaFacturacion.ToString("dd/MM/yyyy").Contains(searchTermVentas, StringComparison.OrdinalIgnoreCase) ||
                v.TotalVenta.ToString().Contains(searchTermVentas, StringComparison.OrdinalIgnoreCase) ||
                v.PrecioDolar.ToString().Contains(searchTermVentas, StringComparison.OrdinalIgnoreCase) ||

                // Datos del Viaje
                v.IdViaje.ToString().Contains(searchTermVentas, StringComparison.OrdinalIgnoreCase) ||
                v.FechaSalida.ToString("dd/MM/yyyy").Contains(searchTermVentas, StringComparison.OrdinalIgnoreCase) ||
                v.NumSemViaje.ToString().Contains(searchTermVentas, StringComparison.OrdinalIgnoreCase) ||
                v.CantidadCajasViaje.ToString().Contains(searchTermVentas, StringComparison.OrdinalIgnoreCase) ||
                v.Licencia.ToString().Contains(searchTermVentas, StringComparison.OrdinalIgnoreCase) ||
                v.KilosProcesoViaje.ToString().Contains(searchTermVentas, StringComparison.OrdinalIgnoreCase) ||

                // Datos del Cultivo
                v.IdCultivo.ToString().Contains(searchTermVentas, StringComparison.OrdinalIgnoreCase) ||
                (v.TipoBerry?.Contains(searchTermVentas, StringComparison.OrdinalIgnoreCase) ?? false) ||
                (v.Variedad?.Contains(searchTermVentas, StringComparison.OrdinalIgnoreCase) ?? false) ||

                // Datos del Rancho
                v.IdRancho.ToString().Contains(searchTermVentas, StringComparison.OrdinalIgnoreCase) ||
                (v.NombreRancho?.Contains(searchTermVentas, StringComparison.OrdinalIgnoreCase) ?? false) ||
                (v.NumeroRancho?.Contains(searchTermVentas, StringComparison.OrdinalIgnoreCase) ?? false) ||

                v.FechaRecepcion.ToString("dd/MM/yyyy").Contains(searchTermVentas, StringComparison.OrdinalIgnoreCase) ||
                v.PrecioVentaTarima.ToString().Contains(searchTermVentas, StringComparison.OrdinalIgnoreCase)
            ).ToList();
    }


    private async Task SeleccionarVenta(VentasDetallesCompletosDto selectedVenta)
    {
        try
        {
            tarimas.Clear(); // Limpiar la lista de tarimas antes de agregar nuevas
            tarima = await viajesService.GetTarimasPorIdAsync(selectedVenta.IdTarima);

            viajeDC = await viajesService.GetViajeDetallesPorIdAsync(tarima.IdViaje);
            if (viajeDC != null)
            {
                viajeDC.IdViaje = viaje.IdViaje;
                viajeDC.FechaSalida = viaje.FechaSalida;
                viajeDC.NumSemViaje = viaje.NumSemViaje;
            }


            produccion = await cosechasService.GetProduccionPorIdAsync(viajeDC.IdProduccion);
            if (produccion != null)
            {
                produccion.TipoCaja = produccion.TipoCaja;
                produccion.CantidadCajas = produccion.CantidadCajas;
                produccion.KilosProceso = produccion.KilosProceso;
            }

            cultivo = await cultivoService.GetCultivos(viajeDC.IdCultivo);
            if (cultivo != null)
            {
                cultivo.TipoBerry = cultivo.TipoBerry;
                cultivo.Variedad = cultivo.Variedad;
            }

            rancho = await ranchoService.GetRancho(viajeDC.IdRancho);
            if (rancho != null)
            {
                rancho.NombreRancho = rancho.NombreRancho;
                rancho.NumeroRancho = rancho.NumeroRancho;
            }

            if (tablaActual == 1)
            {
                foreach (var item in viajesDetalles)
                {
                    if (item.CantidadCajasViaje > 0 && item.Licencia > 0 && item.IdViaje == viajeDC.IdViaje) // Usamos item en vez de tarima
                    {
                        tarimas.Add(new TarimasDto
                            {
                                IdTarima = item.IdTarima,
                                IdProduccion = item.IdProduccion, // Tomamos los valores de item
                                IdViaje = item.IdViaje,
                                CantidadCajasViaje = item.CantidadCajasViaje,
                                Licencia = item.Licencia,
                                KilosProcesoViaje = item.KilosProcesoViaje
                            });
                    }
                }
            }
            if (tablaActual == 2)
            {
                tarima.KilosProcesoViaje = viajeDC.KilosProcesoViaje;
                tarima = new TarimasDto
                    {
                        IdTarima = viajeDC.IdTarima,
                        IdProduccion = viajeDC.IdProduccion,
                        IdViaje = viajeDC.IdViaje,
                        CantidadCajasViaje = viajeDC.CantidadCajasViaje,
                        Licencia = viajeDC.Licencia,
                        KilosProcesoViaje = viajeDC.KilosProcesoViaje
                    };

            }

            StateHasChanged(); // Forzar actualización de la UI

            // Actualizar el formulario con los datos obtenidos
            deshabilitarFormulario = false;
            deshabilitarGuardar = false;
            deshabilitarNuevo = true;
            deshabilitarModificar = true;
            deshabilitarCancelar = false;
            deshabilitarConsultar = true;
            mostrarModalViaje = false;
            modificando = true;

            MostarFormularioTarimas = true;
            mostrarTarima = !mostrarModalTarimasProceso;
            mostrarKilosProceso = mostrarModalTarimasProceso;
        }
        catch (Exception ex)
        {
            MostrarMensajeModal("Error inesperado", $"Error: {ex.Message}");

            // Registrar el error inesperado
            await errorLogs.CreateErrorLogAsync(new ErrorLogDto
                {
                    UserName = UserSession.Usuario, // Reemplazar con el nombre del usuario real
                    ErrorMessage = ex.Message,
                    ErrorProcedure = "SeleccionarViaje",
                    ErrorLine = new System.Diagnostics.StackTrace(true).GetFrame(0)?.GetFileLineNumber().ToString(),
                    ErrorTime = DateTime.UtcNow
                });
        }
    }


    private async Task ConsultarViajes()
    {
        try
        {
            idsViajesConVentas = await ventasService.GetIdsViajesConVentasAsync();

            viajesDetalles = await viajesService.GetViajesDetallesAsync();
            filteredViajes = viajesDetalles.Where(v => !idsViajesConVentas.Contains(v.IdViaje)).OrderBy(c => c.IdViaje).ToList(); // Inicializa  con la lista completa
            FiltrarViajes(1); // Filtra la tabla de viajes por defecto
            StateHasChanged(); // Fuerza el refresco de la UI después de consultar
        }
        catch (Exception ex)
        {
            // Registrar el error en la base de datos usando el servicio ErrorLogService
            await errorLogs.CreateErrorLogAsync(new ErrorLogDto
                {
                    UserName = UserSession.Usuario, // Reemplazar con el nombre del usuario real
                    ErrorMessage = ex.Message,
                    ErrorProcedure = "ConsultarViajesDetalles",
                    ErrorLine = ex.StackTrace?.Split('\n').FirstOrDefault(),
                    ErrorTime = DateTime.UtcNow
                });

            // Mostrar el mensaje de error al usuario
            MostrarMensajeModal("Error inesperado", $"Error: {ex.Message}");
        }
    }

    private async Task AplicarFiltroViajes()
    {
        var listaBase = viajesDetalles
        .Where(v => !idsViajesConVentas.Contains(v.IdViaje)) // Excluir viajes con venta
        .ToList();

        // Aplicar el filtro según la tabla seleccionada
        if (tablaActual == 1)
        {
            listaBase = listaBase.Where(v => v.KilosProcesoViaje == 0).ToList();
        }
        else if (tablaActual == 2)
        {
            listaBase = listaBase.Where(v => v.CantidadCajasViaje == 0 && v.Licencia == 0).ToList();
        }

        // Aplicar búsqueda sobre la lista filtrada
        filteredViajes = string.IsNullOrEmpty(searchTermViajes)
            ? listaBase
            : listaBase.Where(v =>

                // Datos del Viaje
                v.IdViaje.ToString().Contains(searchTermViajes, StringComparison.OrdinalIgnoreCase) ||
                v.FechaSalida.ToString("dd/MM/yyyy").Contains(searchTermViajes, StringComparison.OrdinalIgnoreCase) ||
                v.NumSemViaje.ToString().Contains(searchTermViajes, StringComparison.OrdinalIgnoreCase) ||
                v.CantidadCajasViaje.ToString().Contains(searchTermViajes, StringComparison.OrdinalIgnoreCase) ||
                v.Licencia.ToString().Contains(searchTermViajes, StringComparison.OrdinalIgnoreCase) ||
                v.KilosProcesoViaje.ToString().Contains(searchTermViajes, StringComparison.OrdinalIgnoreCase) ||

                // Datos de la Cosecha
                v.IdCosecha.ToString().Contains(searchTermViajes, StringComparison.OrdinalIgnoreCase) ||
                v.FechaCosecha.ToString("dd/MM/yyyy").Contains(searchTermViajes, StringComparison.OrdinalIgnoreCase) ||
                v.NumSemCosecha.ToString().Contains(searchTermViajes, StringComparison.OrdinalIgnoreCase) ||

                // Datos de la Producción
                v.IdProduccion.ToString().Contains(searchTermViajes, StringComparison.OrdinalIgnoreCase) ||
                v.TipoCaja.Contains(searchTermViajes, StringComparison.OrdinalIgnoreCase) ||
                (v.CantidadCajas?.ToString().Contains(searchTermViajes, StringComparison.OrdinalIgnoreCase) ?? false) ||
                (v.KilosProceso?.ToString().Contains(searchTermViajes, StringComparison.OrdinalIgnoreCase) ?? false) ||

                // Datos del Cultivo
                v.IdCultivo.ToString().Contains(searchTermViajes, StringComparison.OrdinalIgnoreCase) ||
                (v.TipoBerry?.Contains(searchTermViajes, StringComparison.OrdinalIgnoreCase) ?? false) ||
                (v.Variedad?.Contains(searchTermViajes, StringComparison.OrdinalIgnoreCase) ?? false) ||

                // Datos del Rancho
                v.IdRancho.ToString().Contains(searchTermViajes, StringComparison.OrdinalIgnoreCase) ||
                (v.NombreRancho?.Contains(searchTermViajes, StringComparison.OrdinalIgnoreCase) ?? false) ||
                (v.NumeroRancho?.Contains(searchTermViajes, StringComparison.OrdinalIgnoreCase) ?? false) ||

                // Datos del Empleado
                v.IdEmpleado.ToString().Contains(searchTermViajes, StringComparison.OrdinalIgnoreCase) ||
                v.Nombre.Contains(searchTermViajes, StringComparison.OrdinalIgnoreCase) ||
                v.Telefono.Contains(searchTermViajes, StringComparison.OrdinalIgnoreCase) ||

                // Datos del Vehículo
                v.IdVehiculo.ToString().Contains(searchTermViajes, StringComparison.OrdinalIgnoreCase) ||
                v.Placas.Contains(searchTermViajes, StringComparison.OrdinalIgnoreCase) ||
                v.Modelo.Contains(searchTermViajes, StringComparison.OrdinalIgnoreCase) ||
                v.Marca.Contains(searchTermViajes, StringComparison.OrdinalIgnoreCase)

            ).ToList();
    }

    private async Task SeleccionarViaje(ViajesDetallesDto selectedViaje)
    {
        try
        {
            tarimas.Clear(); // Limpiar la lista de tarimas antes de agregar nuevas
            cosecha = await cosechasService.GetCosechaPorIdAsync(selectedViaje.IdCosecha);
            if (cosecha != null)
            {
                cosecha.IdCosecha = cosecha.IdCosecha;
                cosecha.FechaCosecha = cosecha.FechaCosecha;
                cosecha.NumSemCosecha = cosecha.NumSemCosecha;
            }

            // Asignar datos del viaje
            viaje = new ViajesDto
                {
                    IdViaje = selectedViaje.IdViaje,
                    IdVehiculo = selectedViaje.IdVehiculo,
                    IdConductor = selectedViaje.IdEmpleado,
                    FechaSalida = DateOnly.FromDateTime(cosecha.FechaCosecha),
                    NumSemViaje = cosecha.NumSemCosecha ?? 0,
                    EstadoAprobacion = selectedViaje.EstadoAprobacion
                };


            produccion = await cosechasService.GetProduccionPorIdAsync(selectedViaje.IdProduccion);
            if (produccion != null)
            {
                produccion.TipoCaja = produccion.TipoCaja;
                produccion.CantidadCajas = produccion.CantidadCajas;
                produccion.KilosProceso = produccion.KilosProceso;
            }

            cultivo = await cultivoService.GetCultivos(selectedViaje.IdCultivo);
            if (cultivo != null)
            {
                cultivo.TipoBerry = cultivo.TipoBerry;
                cultivo.Variedad = cultivo.Variedad;
            }

            rancho = await ranchoService.GetRancho(selectedViaje.IdRancho);
            if (rancho != null)
            {
                rancho.NombreRancho = rancho.NombreRancho;
                rancho.NumeroRancho = rancho.NumeroRancho;
            }

            vehiculo = await vehiculosService.GetVehiculosPorIdAsync(selectedViaje.IdVehiculo);
            if (vehiculo != null)
            {
                vehiculo.Placas = vehiculo.Placas;
                vehiculo.Modelo = vehiculo.Modelo;
                vehiculo.Marca = vehiculo.Marca;
            }

            empleado = await empleadosService.GetEmpleadoPorIdAsync(selectedViaje.IdEmpleado);
            if (empleado != null)
            {
                empleado.Nombre = empleado.Nombre;
                empleado.Telefono = empleado.Telefono;
            }

            if (tablaActual == 1)
            {
                foreach (var item in viajesDetalles)
                {
                    if (item.CantidadCajasViaje > 0 && item.Licencia > 0 && item.IdViaje == selectedViaje.IdViaje) // Usamos item en vez de tarima
                    {
                        tarimas.Add(new TarimasDto
                            {
                                IdTarima = item.IdTarima,
                                IdProduccion = item.IdProduccion, // Tomamos los valores de item
                                IdViaje = item.IdViaje,
                                CantidadCajasViaje = item.CantidadCajasViaje,
                                Licencia = item.Licencia,
                                KilosProcesoViaje = item.KilosProcesoViaje
                            });
                    }
                }
            }
            if (tablaActual == 2)
            {
                tarima.KilosProcesoViaje = selectedViaje.KilosProcesoViaje;
                tarima = new TarimasDto
                    {
                        IdTarima = selectedViaje.IdTarima,
                        IdProduccion = selectedViaje.IdProduccion,
                        IdViaje = selectedViaje.IdViaje,
                        CantidadCajasViaje = selectedViaje.CantidadCajasViaje,
                        Licencia = selectedViaje.Licencia,
                        KilosProcesoViaje = selectedViaje.KilosProcesoViaje
                    };

            }

            StateHasChanged(); // Forzar actualización de la UI

            // Actualizar el formulario con los datos obtenidos
            deshabilitarFormulario = false;
            deshabilitarGuardar = false;
            deshabilitarNuevo = true;
            deshabilitarCancelar = false;
            deshabilitarConsultar = true;
            mostrarModalViaje = false;
            modificando = true;

            MostarFormularioTarimas = true;
            mostrarTarima = !mostrarModalTarimasProceso;
            mostrarKilosProceso = mostrarModalTarimasProceso;

            produccion.IdCosecha = selectedViaje.IdCosecha;
        }
        catch (Exception ex)
        {
            MostrarMensajeModal("Error inesperado", $"Error: {ex.Message}");

            // Registrar el error inesperado
            await errorLogs.CreateErrorLogAsync(new ErrorLogDto
                {
                    UserName = UserSession.Usuario, // Reemplazar con el nombre del usuario real
                    ErrorMessage = ex.Message,
                    ErrorProcedure = "SeleccionarViaje",
                    ErrorLine = new System.Diagnostics.StackTrace(true).GetFrame(0)?.GetFileLineNumber().ToString(),
                    ErrorTime = DateTime.UtcNow
                });
        }
    }


    private async Task EditarTarima(int id)
    {
        try
        {
            tarima = await viajesService.GetTarimasPorIdAsync(id);
            if (tarima != null)
            {
                tarima.CantidadCajasViaje = tarima.CantidadCajasViaje;
                tarima.Licencia = tarima.Licencia;
                tarimasAgregadas.Add(tarima.IdTarima);
            }

        }
        catch (Exception ex)
        {
            MostrarMensajeModal("Error inesperado", $"Error: {ex.Message}");

            // Registrar el error inesperado
            await errorLogs.CreateErrorLogAsync(new ErrorLogDto
                {
                    UserName = UserSession.Usuario, // Reemplazar con el nombre del usuario real
                    ErrorMessage = ex.Message,
                    ErrorProcedure = "SeleccionarViaje",
                    ErrorLine = new System.Diagnostics.StackTrace(true).GetFrame(0)?.GetFileLineNumber().ToString(),
                    ErrorTime = DateTime.UtcNow
                });
        }
    }



    private bool CamposValidos =>
        (mostrarTarima ? (tarima.CantidadCajasViaje > 0 && tarima.Licencia > 0) : true) &&
        (mostrarKilosProceso ? tarima.KilosProcesoViaje > 0 : true) &&
        ventas.PrecioVentaTarima != null &&
        venta.PrecioDolar != null &&
        venta.FechaFacturacion != default;


    // Función para agregar una tarima a la lista de ventas
    private void AgregarTarimaVentas()
    {
        bool esTarimaCajas = mostrarTarima && tarima.CantidadCajasViaje > 0 && tarima.Licencia > 0;
        bool esTarimaProceso = mostrarKilosProceso && tarima.KilosProcesoViaje > 0;

        // Validar si ya existe una tarima con ese IdTarima
        if (ventasDetalles.Any(v => v.IdTarima == tarima.IdTarima))
        {
            MostrarMensajeModal("Viaje duplicado", $"Ese viaje ya había sido agregado.");

            return;
        }

        if (esTarimaCajas || esTarimaProceso)
        {
            ventasDetalles.Insert(0, new VentasDetallesDto
                {
                    IdVenta = venta.IdVenta,
                    IdTarima = tarima.IdTarima,
                    CantidadCajasViaje = esTarimaCajas ? tarima.CantidadCajasViaje : 0,
                    Licencia = esTarimaCajas ? tarima.Licencia : 0,
                    KilosProcesoViaje = esTarimaProceso ? tarima.KilosProcesoViaje : 0,
                    PrecioVentaTarima = ventas.PrecioVentaTarima,
                });

            venta.Total = ventasDetalles.Sum(v => v.PrecioVentaTarima ?? 0);

            // Limpiar campos
            tarima = new TarimasDto();
            ventas = new VentasDetallesDto();
        }
    }



    // Función para agregar una tarima a la lista
    private void AgregarTarima()
    {
        // Verificamos que los campos no estén vacíos
        if (tarima.CantidadCajasViaje > 0 && tarima.Licencia > 0)
        {
            tarimas.Add(new TarimasDto
                {
                    IdTarima = tarima.IdTarima,
                    IdProduccion = produccion.IdProduccion,
                    IdViaje = viaje.IdViaje,
                    CantidadCajasViaje = tarima.CantidadCajasViaje,
                    Licencia = tarima.Licencia,
                    KilosProcesoViaje = 0
                });

            // Limpiar los campos después de agregar
            tarima = new TarimasDto();
        }
    }

    // Función para eliminar una tarima de la lista
    private void EliminarTarima(VentasDetallesDto item)
    {
        ventasDetalles.Remove(item);
        venta.Total = ventasDetalles.Sum(v => v.PrecioVentaTarima ?? 0);

    }


    // CONTROL MODAL MODIFICACIÓN
    private int tablaActual = 1; // 1 = Sin KilosProcesoViajes, 2 = Sin Cantidad de Cajas ni Licencia

    private void FiltrarViajes(int opcion)
    {
        tablaActual = opcion;

        if (opcion == 1)
        {
            // Filtrar solo los que tienen KilosProcesoViajes en 0
            filteredViajes = viajesDetalles.Where(v => v.KilosProcesoViaje == 0 && !idsViajesConVentas.Contains(v.IdViaje)).ToList();

            mostrarModalTarimasProceso = false;
            searchTermViajes = string.Empty; // Limpiar el campo de búsqueda
        }
        else if (opcion == 2)
        {
            // Filtrar solo los que tienen CantidadCajasViaje y Licencia en 0 o vacío
            filteredViajes = viajesDetalles.Where(v => v.CantidadCajasViaje == 0 && v.Licencia == 0 && !idsViajesConVentas.Contains(v.IdViaje)).ToList();

            mostrarModalTarimasProceso = true;
            searchTermViajes = string.Empty; // Limpiar el campo de búsqueda
        }
    }


    private void FiltrarVentas(int opcion)
    {
        tablaActual = opcion;

        if (opcion == 1)
        {
            // Filtrar solo los que tienen KilosProcesoViajes en 0
            filteredVentas = ventasDC.Where(v => v.KilosProcesoViaje == 0).ToList();

            mostrarModalTarimasProceso = false;
            searchTermVentas = string.Empty; // Limpiar el campo de búsqueda

        }
        else if (opcion == 2)
        {
            // Filtrar solo los que tienen CantidadCajasViaje y Licencia en 0 o vacío
            filteredVentas = ventasDC.Where(v => v.CantidadCajasViaje == 0 && v.Licencia == 0).ToList();

            mostrarModalTarimasProceso = true;
            searchTermVentas = string.Empty; // Limpiar el campo de búsqueda

        }
    }

    private void NuevoRegistro()
    {
        deshabilitarFormulario = false;
        deshabilitarGuardar = false;
        deshabilitarNuevo = true;
        deshabilitarModificar = true;
        deshabilitarConsultar = true;
        deshabilitarCancelar = false;

        mostrarModalTipoViaje = true;

    }

    private void ViajeCajas()
    {
        MostarFormularioTarimas = true;
        mostrarModalTipoViaje = false;
        mostrarTarima = true;
        tablaActual = 1;
        FiltrarViajes(tablaActual);
    }

    private void ViajeProceso()
    {
        MostarFormularioTarimas = true;
        mostrarModalTipoViaje = false;
        mostrarKilosProceso = true;
        tablaActual = 2;
        FiltrarViajes(tablaActual);
    }

    private void Cancelar()
    {
        cosecha = new CosechasDto();
        produccion = new ProduccionDto();
        cultivo = new CultivosDto();
        rancho = new RanchosDto();
        empleado = new EmpleadosDto();
        vehiculo = new VehiculosDto();
        viaje = new ViajesDto();
        tarima = new TarimasDto();
        tarimas.Clear();

        venta = new VentasDto();
        ventas = new VentasDetallesDto();
        ventasDetalles.Clear();

        deshabilitarFormulario = true;
        deshabilitarGuardar = true;
        deshabilitarNuevo = false;
        deshabilitarModificar = false;
        deshabilitarConsultar = false;
        deshabilitarCancelar = true;

        MostarFormularioTarimas = false;
        mostrarTarima = false;
        mostrarKilosProceso = false;

        modificando = false;
    }

    private async Task GrabarRegistro()
    {
        if (ventas == null || venta.Total <= 0 || venta.PrecioDolar == null || ventasDetalles == null || !ventasDetalles.Any())
        {
            MostrarMensajeModal("Error", "Debe capturar todos los datos de la venta antes de continuar.");
            return;
        }

        try
        {
            bool success = false;
            string message = string.Empty;

            // Primero, crear la Venta
            if (ventas.IdVenta == 0)
            {
                var resultVenta = await ventasService.CreateVentaAsync(venta);

                if (!resultVenta.Success)
                {
                    MostrarMensajeModal("Error", resultVenta.Message);

                    // Registrar error
                    await errorLogs.CreateErrorLogAsync(new ErrorLogDto
                        {
                            UserName = UserSession.Usuario, // Reemplazar con el nombre del usuario real
                            ErrorMessage = resultVenta.Message,
                            ErrorProcedure = "GrabarVenta - CreateVenta",
                            ErrorLine = new System.Diagnostics.StackTrace(true).GetFrame(0)?.GetFileLineNumber().ToString(),
                            ErrorTime = DateTime.UtcNow
                        });

                    return;
                }

                ventas.IdVenta = resultVenta.IdVenta;
            }

            // Asignar el IdVenta a cada detalle
            foreach (var detalle in ventasDetalles)
            {
                detalle.IdVenta = ventas.IdVenta;
            }

            // Crear los detalles de la venta
            var resultDetalles = await ventasService.CreateVentaDetalleAsync(ventasDetalles);

            if (!resultDetalles.Success)
            {
                MostrarMensajeModal("Error", resultDetalles.Message);

                // Registrar error
                await errorLogs.CreateErrorLogAsync(new ErrorLogDto
                    {
                        UserName = UserSession.Usuario, // Reemplazar con el nombre del usuario real
                        ErrorMessage = resultDetalles.Message,
                        ErrorProcedure = "GrabarVenta - CreateVentasDetalles",
                        ErrorLine = new System.Diagnostics.StackTrace(true).GetFrame(0)?.GetFileLineNumber().ToString(),
                        ErrorTime = DateTime.UtcNow
                    });

                return;
            }

            MostrarMensajeModal("Éxito", "Venta y detalles guardados correctamente.");

            // Actualizar la UI y limpiar los datos
            await ConsultarVentas(); // <- Este método deberías tenerlo igual que tu ConsultarViajes

            deshabilitarFormulario = true;
            deshabilitarGuardar = true;
            deshabilitarNuevo = false;
            deshabilitarModificar = false;
            deshabilitarCancelar = true;
            deshabilitarConsultar = false;

            viaje = new ViajesDto();
            cultivo = new CultivosDto();
            rancho = new RanchosDto();


            tarima = new TarimasDto();
            tarimas.Clear();            
            
            venta = new VentasDto();
            ventasDetalles.Clear();
            ventas = new VentasDetallesDto();


            mostrarTarima = false;
            mostrarKilosProceso = false;


            modificando = false;
        }
        catch (Exception ex)
        {
            MostrarMensajeModal("Error inesperado", $"Error: {ex.Message}");

            await errorLogs.CreateErrorLogAsync(new ErrorLogDto
                {
                    UserName = UserSession.Usuario, // Reemplazar con el nombre del usuario real
                    ErrorMessage = ex.Message,
                    ErrorProcedure = "GrabarVenta",
                    ErrorLine = new System.Diagnostics.StackTrace(true).GetFrame(0)?.GetFileLineNumber().ToString(),
                    ErrorTime = DateTime.UtcNow
                });

            modificando = false;
        }
    }



    private void MostrarMensajeModal(string titulo, string contenido)
    {
        mensajeTitulo = titulo;
        mensajeContenido = contenido;
        mostrarMensajeModal = true;
    }

    private void CerrarMensajeModal()
    {
        mostrarMensajeModal = false;
    }
    
    bool mostrarModalVentas = false;
    private void AbrirModalVentas()
    {
        mostrarModalVentas = true;
    }

    private void CerrarModalVentas()
    {
        mostrarModalVentas = false;
        searchTermViajes = string.Empty;
    }


    bool mostrarModalViaje = false;
    private void AbrirModalViaje()
    {
        mostrarModalViaje = true;
    }

    private void CerrarModalViaje()
    {
        mostrarModalViaje = false;
        searchTermViajes = string.Empty;
    }

    private void CerrarModalTipoViaje()
    {
        Cancelar();
        mostrarModalTipoViaje = false;
    }

    int idVentaEliminar = 0;

    private void ConfirmarEliminar(int id)
    {
        idVentaEliminar = id;
        mostrarConfirmacion = true;
    }

    private void CancelarEliminar()
    {
        mostrarConfirmacion = false;
    }

    private async Task EliminarVentaConfirmado()
    {
        try
        {
            mostrarConfirmacion = false;

            // Eliminar el viaje
            bool success = await ventasService.DeleteVentaAsync(idVentaEliminar);
            if (success)
            {
                await ConsultarVentas();
            }
        }
        catch (Exception ex)
        {
            // Registrar el error en la base de datos usando el servicio ErrorLogService
            await errorLogs.CreateErrorLogAsync(new ErrorLogDto
                {
                    UserName = UserSession.Usuario, // Reemplazar con el nombre del usuario real
                    ErrorMessage = ex.Message,
                    ErrorProcedure = "EliminarProcesoConfirmado",
                    ErrorLine = ex.StackTrace?.Split('\n').FirstOrDefault(),
                    ErrorTime = DateTime.UtcNow
                });

            // Mostrar el mensaje de error al usuario
            MostrarMensajeModal("Error inesperado", $"Error: {ex.Message}");
        }
    }


    private void RedirigirAConsulta()
    {
        Navigation.NavigateTo("/Movimientos/RegistroVentasConsulta");
    }

}
