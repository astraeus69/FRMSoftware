@page "/Catalogos/Viveros"
@using FRMSoftware.Data
@inject Services.Catalogos.ViverosService viveroService
@inject FRMSoftware.Services.Utilidades.ErrorLogService errorLogs
@inject FRMSoftware.Data.UserSession UserSession

@inject NavigationManager Navigation

<div class="container">
    <div class="row justify-content-center align-items-center" style="margin-top:20px">
        <div class="col-md-6 d-none d-xl-flex align-items-center justify-content-center">
            <img src="images/Catalogos/ViverosFRM.png" alt="Imagen de Viveros" class="img-fluid" />
        </div>

        <div class="col-xl-6">
            <EditForm Model="vivero" OnValidSubmit="GrabarRegistro" id="viveroForm">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <div class="card shadow-sm">
                    <div class="card-body">
                        <h3 class="text-center my-4 fw-bold">Viveros</h3>

                        <div class="mb-1">
                            <label for="NombreVivero" class="form-label">Nombre del Vivero:</label>
                            <InputText id="NombreVivero" class="form-control" @bind-Value="vivero.NombreVivero" disabled="@deshabilitarFormulario" />
                            <ValidationMessage For="@(() => vivero.NombreVivero)" class="text-danger" />
                        </div>

                        <div class="mb-1">
                            <label for="CodigoVivero" class="form-label">Código del Vivero:</label>
                            <InputText id="CodigoVivero" class="form-control" @bind-Value="vivero.CodigoVivero" disabled="@deshabilitarFormulario" />
                            <ValidationMessage For="@(() => vivero.CodigoVivero)" class="text-danger" />
                        </div>
                    </div>
                </div>
            </EditForm>
        </div>
    </div>
</div>


<!-- Botones -->
<div class="container-fluid">
    <div class="buttons fixed-bottom bg-white d-flex justify-content-center ms-auto botones-responsive">

        @if (UserSession.Rol == "Admin" || UserSession.Rol == "Editor")
        {
            <button class="btn fixed-size-btn mx-2" @onclick="NuevoRegistro" disabled="@deshabilitarNuevo">Nuevo</button>
            <button class="btn fixed-size-btn mx-2" type="submit" form="viveroForm" disabled="@deshabilitarGuardar">Guardar</button>
            <button class="btn fixed-size-btn mx-2" @onclick="AbrirModal" disabled="@deshabilitarModificar">Modificar</button>
            <button class="btn fixed-size-btn mx-2" @onclick="Cancelar" disabled="@deshabilitarCancelar">Cancelar</button>
        }

        @if (UserSession.Rol == "Admin" || UserSession.Rol == "Consultor")
        {
            <button class="btn fixed-size-btn mx-2" @onclick="RedirigirAConsulta" disabled="@deshabilitarConsultar">Consultar</button>
        }

    </div>
</div>


<!-- MODAL para mostrar la tabla -->
@if (mostrarModal)
{
    <div class="modal fade show d-block" tabindex="-1" role="dialog" style="background: rgba(0, 0, 0, 0.5);">
        <div class="modal-dialog modal-lg" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h3 class="modal-title" style="font-weight: bold;">Lista de viveros</h3>
                    <button type="button" class="btn-close" @onclick="CerrarModal"></button>
                </div>
                <div class="modal-body">
                    <!-- Contenedor para alinear horizontalmente -->
                    <div class="row mb-3 align-items-center">
                        <div class="col-auto">
                            <input @bind="searchTerm" placeholder="Buscar viveros..." class="form-control" />
                        </div>
                        <div class="col-auto">
                            <button class="btn fixed-size-btn" @onclick="AplicarFiltro">Buscar</button>
                        </div>
                    </div>

                    <!-- Contenedor de la tabla con scroll -->
                    <div class="table-responsive" style="max-height: 70vh; overflow-y: auto;">
                        <table class="table table-striped table-bordered">
                            <thead class="table-dark">
                                <tr>
                                    <th style="width: 10%;">Acciones</th>

                                    <th style="width: 4%;">ID</th>
                                    <th style="width: 50%;">Nombre del vivero</th>
                                    <th style="width: 36%;">Código del vivero</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var item in filteredViveros)
                                {
                                    <tr>
                                        <td>
                                            <div class="d-flex gap-2">
                                                <button class="btn editar" @onclick="() => SeleccionarVivero(item)">Editar</button>
                                                @if (UserSession.Rol == "Admin")
                                                {
                                                    <button class="btn btn-red editar" @onclick="() => ConfirmarEliminar(item.IdVivero)">Eliminar</button>
                                                }

                                            </div>
                                        </td>

                                        <td>@item.IdVivero</td>
                                        <td>@item.NombreVivero</td>
                                        <td>@item.CodigoVivero</td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>
}

<!-- Modal de confirmación de eliminación -->
@if (mostrarConfirmacion)
{
    <div class="modal fade show d-block" tabindex="-1" role="dialog" style="background: rgba(0, 0, 0, 0.5);">
        <div class="modal-dialog modal-dialog-centered" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Confirmar Eliminación</h5>
                </div>
                <div class="modal-body">
                    <p>¿Está seguro de que desea eliminar este vivero?</p>
                </div>
                <div class="modal-footer">
                    <button class="btn" @onclick="CancelarEliminar">Cancelar</button>
                    <button class="btn btn-red" @onclick="EliminarViveroConfirmado">Eliminar</button>
                </div>
            </div>
        </div>
    </div>
}


<!-- Modal para mostrar mensajes -->
@if (mostrarMensajeModal)
{
    <div class="modal fade show d-block" tabindex="-1" role="dialog" style="background: rgba(0, 0, 0, 0.5);">
        <div class="modal-dialog modal-dialog-centered" role="document">
            <!-- Agregar modal-dialog-centered -->
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">@mensajeTitulo</h5>
                    <button type="button" class="btn-close" @onclick="CerrarMensajeModal"></button>
                </div>
                <div class="modal-body">
                    <p>@mensajeContenido</p>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-red" @onclick="CerrarMensajeModal">Cerrar</button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private ViverosDto vivero = new ViverosDto();
    private List<ViverosDto> viveros = new();

    // MODALES
    private bool mostrarModal = false;
    private bool mostrarConfirmacion = false;

    // FORMULARIO
    private bool deshabilitarFormulario = true;

    // BOTONES
    private bool deshabilitarNuevo = false;
    private bool deshabilitarGuardar = true;
    private bool deshabilitarModificar = false;
    private bool deshabilitarCancelar = true;
    private bool deshabilitarConsultar = false;
    private int idViveroEliminar;

    // BÚSQUEDA INPUT
    private string searchTerm = string.Empty;  // Campo de búsqueda
    private List<ViverosDto> filteredViveros = new(); // Lista filtrada

    // VIVEROS DUPLICADOS
    private bool mostrarMensajeModal = false;
    private string mensajeTitulo = string.Empty;
    private string mensajeContenido = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await ConsultarViveros();
    }

    // Actualiza la lista de viveros
    private async Task ConsultarViveros()
    {
        try
        {
            viveros = await viveroService.GetViverosAsync();

            if (viveros == null || !viveros.Any())
            {
                MostrarMensajeModal("Información", "No se encontraron viveros.");
                return;
            }

            filteredViveros = viveros.OrderBy(v => v.IdVivero).ToList(); // Inicializa con la lista completa
            StateHasChanged(); // Refresca la UI después de consultar los viveros
        }
        catch (Exception ex)
        {
            // Mostrar mensaje de error
            MostrarMensajeModal("Error", $"Error al consultar los viveros: {ex.Message}");

            // Registrar el error en los logs
            await errorLogs.CreateErrorLogAsync(new ErrorLogDto
                {
                    UserName = UserSession.Usuario, // Reemplazar con el nombre del usuario real
                    ErrorMessage = ex.Message,
                    ErrorProcedure = "ConsultarViveros",
                    ErrorLine = new System.Diagnostics.StackTrace(true).GetFrame(0)?.GetFileLineNumber().ToString(),
                    ErrorTime = DateTime.UtcNow
                });
        }
    }

    private void AplicarFiltro()
    {
        if (string.IsNullOrEmpty(searchTerm))
        {
            filteredViveros = viveros;
        }
        else
        {
            searchTerm = searchTerm.Trim();

            filteredViveros = viveros.Where(v =>
                v.NombreVivero.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                v.CodigoVivero.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)
            ).ToList();
        }
    }

    private void NuevoRegistro()
    {
        vivero = new ViverosDto();
        deshabilitarFormulario = false;
        deshabilitarGuardar = false;
        deshabilitarNuevo = true;
        deshabilitarModificar = true;
        deshabilitarConsultar = true;
        deshabilitarCancelar = false;
    }

    private void Cancelar()
    {
        // Restablece el formulario y los botones a su estado inicial
        vivero = new ViverosDto();
        deshabilitarFormulario = true;
        deshabilitarGuardar = true;
        deshabilitarNuevo = false;
        deshabilitarModificar = false;
        deshabilitarConsultar = false;
        deshabilitarCancelar = true;
    }

    private async Task GrabarRegistro()
    {
        bool success;
        string message;

        try
        {
            if (vivero.IdVivero == 0)
            {
                // Si no tiene un IdVivero, es un nuevo registro
                var result = await viveroService.CreateViveroAsync(vivero);
                success = result.Success;
                message = result.Message;
            }
            else
            {
                // Si tiene un IdVivero, es una actualización
                success = await viveroService.UpdateViveroAsync(vivero.IdVivero, vivero);
                message = success ? "Actualización exitosa." : "Error al actualizar el registro.";
            }

            if (success)
            {
                await ConsultarViveros();
                deshabilitarFormulario = true;
                deshabilitarGuardar = true;
                deshabilitarNuevo = false;
                deshabilitarModificar = false;
                deshabilitarCancelar = true;
                deshabilitarConsultar = false;
                vivero = new ViverosDto(); // Limpiar formulario

                // Mostrar mensaje de éxito
                MostrarMensajeModal("Éxito", message);
            }
            else
            {
                // Mostrar mensaje de error o duplicidad
                MostrarMensajeModal("Error", message);
            }
        }
        catch (Exception ex)
        {
            // Mostrar mensaje de error
            MostrarMensajeModal("Error", $"Hubo un error al guardar el vivero: {ex.Message}");

            // Registrar el error en los logs
            await errorLogs.CreateErrorLogAsync(new ErrorLogDto
                {
                    UserName = UserSession.Usuario, // Reemplazar con el nombre del usuario real
                    ErrorMessage = ex.Message,
                    ErrorProcedure = "GrabarRegistroVivero",
                    ErrorLine = new System.Diagnostics.StackTrace(true).GetFrame(0)?.GetFileLineNumber().ToString(),
                    ErrorTime = DateTime.UtcNow
                });
        }
    }

    // VIVEROS DUPLICADOS
    // Método para mostrar el modal de mensajes
    private void MostrarMensajeModal(string titulo, string contenido)
    {
        mensajeTitulo = titulo;
        mensajeContenido = contenido;
        mostrarMensajeModal = true;
    }

    // Método para cerrar el modal de mensajes
    private void CerrarMensajeModal()
    {
        mostrarMensajeModal = false;
    }

    // CONTROL DE MODALES
    private void AbrirModal()
    {
        mostrarModal = true;
    }

    private void CerrarModal()
    {
        mostrarModal = false;
        searchTerm = string.Empty;

    }

    // MODIFICAR VIVERO (Editar)
    private void SeleccionarVivero(ViverosDto viveroSeleccionado)
    {
        vivero = viveroSeleccionado;
        deshabilitarFormulario = false;
        deshabilitarGuardar = false;
        deshabilitarNuevo = true;
        deshabilitarModificar = true;
        deshabilitarCancelar = false;
        deshabilitarConsultar = true;
        mostrarModal = false;
    }

    // Eliminar Vivero
    private void ConfirmarEliminar(int idVivero)
    {
        idViveroEliminar = idVivero;
        mostrarConfirmacion = true;
    }

    private void CancelarEliminar()
    {
        mostrarConfirmacion = false;
    }

    private async Task EliminarViveroConfirmado()
    {
        try
        {
            bool success = await viveroService.DeleteViveroAsync(idViveroEliminar);
            if (success)
            {
                await ConsultarViveros();
                MostrarMensajeModal("Éxito", "Vivero eliminado exitosamente.");
            }
            else
            {
                MostrarMensajeModal("Error", "No se pudo eliminar el vivero.");
            }
        }
        catch (Exception ex)
        {
            // Mostrar mensaje de error
            MostrarMensajeModal("Error", $"Hubo un error al eliminar el vivero: {ex.Message}");

            // Registrar el error en los logs
            await errorLogs.CreateErrorLogAsync(new ErrorLogDto
                {
                    UserName = UserSession.Usuario, // Reemplazar con el nombre del usuario real
                    ErrorMessage = ex.Message,
                    ErrorProcedure = "EliminarViveroConfirmado",
                    ErrorLine = new System.Diagnostics.StackTrace(true).GetFrame(0)?.GetFileLineNumber().ToString(),
                    ErrorTime = DateTime.UtcNow
                });
        }
        finally
        {
            mostrarConfirmacion = false;
        }
    }

    private void RedirigirAConsulta()
    {
        Navigation.NavigateTo("/Catalogos/ViverosConsulta");
    }
}
