@inherits LayoutComponentBase
@using Microsoft.AspNetCore.Components.Authorization
@inject FRMSoftware.Services.Catalogos.UsuariosService UsuariosService
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthProvider
@using System.Security.Claims

@using FRMSoftware.Data

@inject FRMSoftware.Services.Utilidades.ErrorLogService errorLogs
@inject FRMSoftware.Data.UserSession UserSession

<div class="page">
    <div class="sidebar">
        <NavMenu />
    </div>

    <main>
        <div class="top-row px-4 d-flex justify-content-between align-items-center">
            <AuthorizeView>
                <Authorized>
                    <div>
                        <span class="bi bi-person-circle" aria-hidden="true"></span> <strong>@Rol:</strong> @NombreReal
                    </div>
                    <div class="d-flex align-items-center">
                        <a href="/Ayuda/Ayuda" class="btn-link d-flex align-items-center me-2">
                            <i class="bi bi-question-circle me-1"></i> Ayuda
                        </a>
                        <button class="btn btn-red editar" @onclick="CerrarSesion">Cerrar sesión</button>
                    </div>
                </Authorized>
            </AuthorizeView>
        </div>

        <article class="content px-4">
            @Body
        </article>
    </main>
</div>

@code {
    private string NombreReal = "";
    private string Rol = "";

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var authState = await AuthProvider.GetAuthenticationStateAsync();
            var user = authState.User;

            if (user.Identity is { IsAuthenticated: true })
            {
                NombreReal = user.FindFirst(ClaimTypes.Name)?.Value
                             ?? user.FindFirst("name")?.Value
                             ?? "Desconocido";

                Rol = user.FindFirst(ClaimTypes.Role)?.Value
                      ?? user.FindFirst("role")?.Value
                      ?? "Sin rol";
            }
        }
        catch (Exception ex)
        {
            await errorLogs.CreateErrorLogAsync(new ErrorLogDto
                {
                    UserName = UserSession.Usuario,
                    ErrorMessage = ex.Message,
                    ErrorProcedure = "OnInitializedAsync - MainLayout",
                    ErrorLine = new System.Diagnostics.StackTrace(true).GetFrame(0)?.GetFileLineNumber().ToString(),
                    ErrorTime = DateTime.UtcNow
                });
        }
    }

    private async Task CerrarSesion()
    {
        try
        {
            await UsuariosService.LogoutAsync();
            Navigation.NavigateTo("/", true);
        }
        catch (Exception ex)
        {
            await errorLogs.CreateErrorLogAsync(new ErrorLogDto
                {
                    UserName = UserSession.Usuario,
                    ErrorMessage = ex.Message,
                    ErrorProcedure = "CerrarSesion - MainLayout",
                    ErrorLine = new System.Diagnostics.StackTrace(true).GetFrame(0)?.GetFileLineNumber().ToString(),
                    ErrorTime = DateTime.UtcNow
                });
        }
    }

}

