@page "/Catalogos/VehiculosConsulta"
@using FRMSoftware.Data
@inject Services.Catalogos.VehiculosService vehiculoService
@inject FRMSoftware.Services.Utilidades.ErrorLogService errorLogs
@inject FRMSoftware.Data.UserSession UserSession

@inject NavigationManager Navigation

<div class="container">
    <div class="row justify-content-center align-items-center" style="margin-top:20px">
        <h2 class="text-center fw-bold" style="margin-bottom: 20px">Consulta de vehiculos</h2>

        <!-- Contenedor para alinear horizontalmente -->
        <div class="row mb-3 align-items-center">
            <div class="col-auto">
                <input @bind="searchTerm" placeholder="Buscar vehículos..." class="form-control" />
            </div>
            <div class="col-auto">
                <button class="btn fixed-size-btn" @onclick="AplicarFiltro">Buscar</button>
            </div>
        </div>


        <!-- Contenedor de la tabla con scroll -->
        <div class="table-responsive" style="max-height: 70vh; overflow-y: auto;">
            <table class="table table-striped table-bordered">
                <thead class="table-dark">
                    <tr>
                        <th>ID Vehículo</th>
                        <th>Placas</th>
                        <th>Modelo</th>
                        <th>Marca</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in filteredVehiculos)
                    {
                        <tr>
                            <td>@item.IdVehiculo</td>
                            <td>@item.Placas</td>
                            <td>@item.Modelo</td>
                            <td>@item.Marca</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
</div>

<!-- Botones -->
<div class="container-fluid">
    <div class="buttons fixed-bottom bg-white d-flex justify-content-center ms-auto botones-responsive">
        <button class="btn fixed-size-btn mx-2" @onclick="RedirigirVehiculos">Regresar</button>
    </div>
</div>

@code {
    private List<VehiculosDto> vehiculos = new(); // Lista completa de vehículos
    private string searchTerm = string.Empty;  // Campo de búsqueda
    private List<VehiculosDto> filteredVehiculos = new(); // Lista filtrada

    // Se llama al inicializar para cargar los vehículos
    protected override async Task OnInitializedAsync()
    {
        await ConsultarVehiculos(); // Llamada al servicio para obtener los vehículos
    }

    private async Task ConsultarVehiculos()
    {
        try
        {
            vehiculos = await vehiculoService.GetVehiculosAsync();

            filteredVehiculos = vehiculos.OrderBy(v => v.IdVehiculo).ToList();
            StateHasChanged(); // Refresca la UI
        }
        catch (Exception ex)
        {
            // Registrar el error en la base de datos
            await errorLogs.CreateErrorLogAsync(new ErrorLogDto
                {
                    UserName = UserSession.Usuario, // Reemplazar con el nombre del usuario real
                    ErrorMessage = ex.Message,
                    ErrorProcedure = "ConsultarVehiculos",
                    ErrorLine = new System.Diagnostics.StackTrace(true).GetFrame(0)?.GetFileLineNumber().ToString(),
                    ErrorTime = DateTime.UtcNow
                });
        }
    }

    private void AplicarFiltro()
    {
        filteredVehiculos = string.IsNullOrEmpty(searchTerm) ?
            vehiculos :
            vehiculos.Where(v => v.Placas.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                                 v.Modelo.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                                 v.Marca.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)).ToList();
    }

    // Redirigir a la página de consulta de vehículos
    private void RedirigirVehiculos()
    {
        Navigation.NavigateTo("/Catalogos/Vehiculos");
    }

    private async Task DescargarPDF_Vehiculos()
    {
        try
        {
            await JS.InvokeVoidAsync("descargarPDF_Vehiculos");
        }
        catch (Exception ex)
        {
            await errorLogs.CreateErrorLogAsync(new ErrorLogDto
                {
                    UserName = UserSession.Usuario,
                    ErrorMessage = ex.Message,
                    ErrorProcedure = "DescargarPDF - Vehículos",
                    ErrorLine = new System.Diagnostics.StackTrace(true).GetFrame(0)?.GetFileLineNumber().ToString(),
                    ErrorTime = DateTime.UtcNow
                });
        }
    }

    private async Task DescargarExcel_Vehiculos()
    {
        try
        {
            await JS.InvokeVoidAsync("descargarExcel_Vehiculos");
        }
        catch (Exception ex)
        {
            await errorLogs.CreateErrorLogAsync(new ErrorLogDto
                {
                    UserName = UserSession.Usuario,
                    ErrorMessage = ex.Message,
                    ErrorProcedure = "DescargarExcel - Vehículos",
                    ErrorLine = new System.Diagnostics.StackTrace(true).GetFrame(0)?.GetFileLineNumber().ToString(),
                    ErrorTime = DateTime.UtcNow
                });
        }
    }

    [Inject] private IJSRuntime JS { get; set; }
}
