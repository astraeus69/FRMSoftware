@page "/Reportes/ReporteProcesoPorLlave"
@using FRMSoftware.Data
@inject FRMSoftware.Services.Movimientos.GestionCosechasService cosechasService

@inject FRMSoftware.Services.Utilidades.ErrorLogService errorLogs
@inject FRMSoftware.Data.UserSession UserSession

<!-- Encabezado del reporte -->
<div class="container">
    <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 20px;">
        <img src="images/LogoFRM.png" alt="Logo FRM" style="height: 80px;" />
        <div class="ms-3" style="flex: 1;">
            <div class="fw-bold fs-5">Frutillos Rojos de México S. de P. R. de R. L.</div>
            <div class="text-muted fs-6">Calle Zapotlán 193, Lomas de San Cayetano, 49040, Ciudad Guzmán, Jalisco, México</div>
        </div>
        <span class="fs-5 fw-semibold">@DateTime.Now.ToString("dd/MM/yyyy")</span>
    </div>

    <h2 class="text-center fw-bold mb-4">Reporte de kilos de proceso por llave</h2>


    <!-- Tabla -->
    <div class="table-responsive mt-4">
        <table class="table table-bordered table-striped">
            <thead class="table-dark">
                <tr>
                    <th>ID Cosecha</th>
                    <th>Fecha de cosecha</th>
                    <th>Número de semana</th>

                    <th>ID Producción</th>
                    <th>Kilos de proceso</th>

                    <th>ID Plantación</th>
                    <th>Fecha de plantación</th>
                    <th>Número de semana</th>
                    <th>Estatus de plantación</th>

                    <th>ID Cultivo</th>
                    <th>Tipo de berry</th>
                    <th>Variedad</th>

                    <th>ID Rancho</th>
                    <th>Nombre del rancho</th>
                    <th>Número del rancho</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var grupoCosechas in cosechasAgrupadas)
                {
                    <tr class="table-success fw-bold llave-fila">
                        <td colspan="17">
                            (ID: @grupoCosechas.Key.IdLlave) Llave: @grupoCosechas.Key.NombreLlave
                            &nbsp; Superficie (ha): @grupoCosechas.Key.SuperficieHa
                            &nbsp; Superficie (acres): @grupoCosechas.Key.SuperficieAcres
                        </td>
                    </tr>

                    @foreach (var cosecha in grupoCosechas)
                    {
                        <tr>
                            <td>@cosecha.IdCosecha</td>
                            <td>@cosecha.FechaCosecha.ToString("dd/MM/yyyy")</td>
                            <td>@cosecha.NumSemCosecha</td>

                            <td>@cosecha.IdProduccion</td>
                            <td>@cosecha.KilosProceso</td>

                            <td>@cosecha.IdPlantacion</td>
                            <td>@cosecha.FechaPlantacion.ToString("dd/MM/yyyy")</td>
                            <td>@cosecha.NumSemPlantacion</td>
                            <td>@cosecha.EstatusPlantacion</td>

                            <td>@cosecha.IdCultivo</td>
                            <td>@cosecha.TipoBerry</td>
                            <td>@cosecha.Variedad</td>

                            <td>@cosecha.IdRancho</td>
                            <td>@cosecha.NombreRancho</td>
                            <td>@cosecha.NumeroRancho</td>
                        </tr>
                    }

                    var totalKilos = grupoCosechas.Sum(c => c.KilosProceso);

                    <tr class="fw-bold text-end total-fila">
                        <td colspan="4">Total de kilos procesados para la llave: @grupoCosechas.Key.NombreLlave</td>
                        <td class="text-start">@totalKilos</td>
                        <td colspan="12"></td>
                    </tr>
                }

                @{
                    var totalGeneral = cosechasAgrupadas.SelectMany(g => g).Sum(c => c.KilosProceso);
                }

                <tr class="fw-bold text-end table-primary total-general-fila">
                    <td colspan="4">Total general de kilos procesados:</td>
                    <td class="text-start">@totalGeneral</td>
                    <td colspan="12"></td>
                </tr>
            </tbody>
        </table>
    </div>

    <!-- Gráfica -->
    <h3 class="text-center mt-5 fw-bold">Gráfica de kilos por llave</h3>
    <div class="d-flex justify-content-center">
        <canvas id="chartKilosPorLlave" width="800" height="400"></canvas>
    </div>
</div>

@code {
    private List<CosechasProduccionDto> cosechas = new();
    private List<IGrouping<(int IdLlave, string NombreLlave, decimal? SuperficieHa, decimal? SuperficieAcres), CosechasProduccionDto>> cosechasAgrupadas = new();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            cosechas = await cosechasService.GetCosechasProduccionAsync();

            cosechasAgrupadas = cosechas
                .GroupBy(c => (c.IdLlave, c.NombreLlave, c.SuperficieHa, c.SuperficieAcres))
                .ToList();

            await GenerarGrafica();
        }
        catch (Exception ex)
        {
            await errorLogs.CreateErrorLogAsync(new ErrorLogDto
                {
                    UserName = UserSession.Usuario,
                    ErrorMessage = ex.Message,
                    ErrorProcedure = "OnInitializedAsync - ReporteProcesoPorLlave",
                    ErrorLine = new System.Diagnostics.StackTrace(true).GetFrame(0)?.GetFileLineNumber().ToString(),
                    ErrorTime = DateTime.UtcNow
                });
        }
    }

    private async Task GenerarGrafica()
    {
        try
        {
            var dataLabels = cosechasAgrupadas.Select(g => g.Key.NombreLlave).ToList();
            var dataValues = cosechasAgrupadas.Select(g => g.Sum(c => c.KilosProceso ?? 0)).ToList();

            var labelsJson = System.Text.Json.JsonSerializer.Serialize(dataLabels);
            var valuesJson = System.Text.Json.JsonSerializer.Serialize(dataValues);

            await JS.InvokeVoidAsync("generarGraficaProcesoLlaves", labelsJson, valuesJson);
        }
        catch (Exception ex)
        {
            await errorLogs.CreateErrorLogAsync(new ErrorLogDto
                {
                    UserName = UserSession.Usuario,
                    ErrorMessage = ex.Message,
                    ErrorProcedure = "GenerarGrafica - ReporteProcesoPorLlave",
                    ErrorLine = new System.Diagnostics.StackTrace(true).GetFrame(0)?.GetFileLineNumber().ToString(),
                    ErrorTime = DateTime.UtcNow
                });
        }
    }

    private async Task DescargarPDF()
    {
        try
        {
            await JS.InvokeVoidAsync("descargarPDF_ProcesoLlaves");
        }
        catch (Exception ex)
        {
            await errorLogs.CreateErrorLogAsync(new ErrorLogDto
                {
                    UserName = UserSession.Usuario,
                    ErrorMessage = ex.Message,
                    ErrorProcedure = "DescargarPDF - ReporteProcesoPorLlave",
                    ErrorLine = new System.Diagnostics.StackTrace(true).GetFrame(0)?.GetFileLineNumber().ToString(),
                    ErrorTime = DateTime.UtcNow
                });
        }
    }

    private async Task DescargarExcel()
    {
        try
        {
            await JS.InvokeVoidAsync("descargarExcel_ProcesoLlaves");
        }
        catch (Exception ex)
        {
            await errorLogs.CreateErrorLogAsync(new ErrorLogDto
                {
                    UserName = UserSession.Usuario,
                    ErrorMessage = ex.Message,
                    ErrorProcedure = "DescargarExcel - ReporteProcesoPorLlave",
                    ErrorLine = new System.Diagnostics.StackTrace(true).GetFrame(0)?.GetFileLineNumber().ToString(),
                    ErrorTime = DateTime.UtcNow
                });
        }
    }

    [Inject] private IJSRuntime JS { get; set; }
}
