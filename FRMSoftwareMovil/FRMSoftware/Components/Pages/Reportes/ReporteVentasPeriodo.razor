@page "/Reportes/ReporteVentasPeriodo"
@using FRMSoftware.Data
@inject FRMSoftware.Services.Movimientos.VentasService ventasService

@inject FRMSoftware.Services.Utilidades.ErrorLogService errorLogs
@inject FRMSoftware.Data.UserSession UserSession

<div class="container">
    <!-- Encabezado -->
    <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 20px;">
        <img src="images/LogoFRM.png" alt="Logo FRM" style="height: 80px;" />
        <div class="ms-3" style="flex: 1;">
            <div class="fw-bold fs-5">Frutillos Rojos de México S. de P. R. de R. L.</div>
            <div class="text-muted fs-6">Calle Zapotlán 193, Lomas de San Cayetano, 49040, Ciudad Guzmán, Jalisco, México</div>
        </div>
        <span class="fs-5 fw-semibold">@DateTime.Now.ToString("dd/MM/yyyy")</span>
    </div>

    <h2 class="text-center fw-bold mb-4">Reporte de ventas por periodo</h2>

    <!-- Filtros -->
    <div class="d-flex justify-content-start gap-2 mb-3">
        <input type="date" class="form-control" @bind="FechaInicio" />
        <input type="date" class="form-control" @bind="FechaFin" />
        <button class="btn" @onclick="FiltrarDatos">Filtrar</button>
    </div>

    <!-- Botones deslizantes para alternar entre tablas -->
    <div class="d-flex justify-content-center mb-3">
        <div class="toggle-container">
            <div class="toggle-slider" style='left: @(tablaActual == 1 ? "0%" : "50%")'></div>
            <button class="toggle-btn @(tablaActual == 1 ? "active" : "")" @onclick="() => CambiarTabla(1)">
                Venta de cajas
            </button>
            <button class="toggle-btn @(tablaActual == 2 ? "active" : "")" @onclick="() => CambiarTabla(2)">
                Venta de proceso
            </button>
        </div>
    </div>


    <!-- Tabla -->
    <div class="table-responsive" style="max-height: 70vh; overflow-y: auto;">
        <table class="table table-striped table-bordered">
            <thead class="table-dark">
                <tr>
                    <th>ID Venta</th>
                    <th>Fecha de facturación</th>
                    <th>Total de venta</th>
                    <th>Precio del dólar</th>

                    <th>ID Viaje</th>
                    <th>Fecha de salida</th>
                    <th>Número de semana</th>

                    <th>ID Rancho</th>
                    <th>Nombre del rancho</th>
                    <th>Número del rancho</th>

                    <th>ID Cultivo</th>
                    <th>Tipo de berry</th>
                    <th>Variedad</th>

                    @if (tablaActual != 2)
                    {
                        <th>ID Tarima</th>
                        <th>Cantidad de cajas</th>
                        <th>Licencia</th>
                    }
                    @if (tablaActual != 1)
                    {
                        <th>Kilos proceso</th>
                    }

                    <th>Fecha de recepción</th>
                    <th>Precio de venta</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var ventaGrupo in filteredVentas.GroupBy(v => v.IdVenta))
                {
                    bool esPrimeraFilaVenta = true;
                    int filasTotalVenta = ventaGrupo.Count();

                    // Agrupamos por viaje dentro de cada venta
                    var viajesPorVenta = ventaGrupo.GroupBy(v => v.IdViaje);

                    @foreach (var viajeGrupo in viajesPorVenta)
                    {
                        bool esPrimeraFilaViaje = true;
                        int filasViaje = viajeGrupo.Count();

                        @foreach (var item in viajeGrupo)
                        {
                            <tr>
                                @if (esPrimeraFilaVenta)
                                {
                                    <td rowspan="@filasTotalVenta">@item.IdVenta</td>
                                    <td rowspan="@filasTotalVenta">@item.FechaFacturacion.ToString("dd/MM/yyyy")</td>
                                    <td rowspan="@filasTotalVenta">@item.TotalVenta</td>
                                    <td rowspan="@filasTotalVenta">@item.PrecioDolar</td>

                                    esPrimeraFilaVenta = false;
                                }

                                @if (esPrimeraFilaViaje)
                                {
                                    <td rowspan="@filasViaje">@item.IdViaje</td>
                                    <td rowspan="@filasViaje">@item.FechaSalida.ToString("dd/MM/yyyy")</td>
                                    <td rowspan="@filasViaje">@item.NumSemViaje</td>

                                    <td rowspan="@filasViaje">@item.IdRancho</td>
                                    <td rowspan="@filasViaje">@item.NombreRancho</td>
                                    <td rowspan="@filasViaje">@item.NumeroRancho</td>

                                    <td rowspan="@filasViaje">@item.IdCultivo</td>
                                    <td rowspan="@filasViaje">@item.TipoBerry</td>
                                    <td rowspan="@filasViaje">@item.Variedad</td>

                                    esPrimeraFilaViaje = false;
                                }

                                @if (tablaActual != 2)
                                {
                                    <td>@item.IdTarima</td>
                                    <td>@item.CantidadCajasViaje</td>
                                    <td>@item.Licencia</td>
                                }

                                @if (tablaActual != 1)
                                {
                                    <td>@item.KilosProcesoViaje</td>
                                }

                                <td>@item.FechaRecepcion.ToString("dd/MM/yyyy")</td>
                                <td>@item.PrecioVentaTarima</td>
                            </tr>
                        }
                    }
                }

                @if (filteredVentas.Any())
                {
                    <tr class="table-primary fw-bold text-end">
                        @if (tablaActual == 1)
                        {
                            var totalCajas = filteredVentas.Sum(v => v.CantidadCajasViaje);
                            var totalVentas = filteredVentas.Sum(v => v.TotalVenta);
                            <td colspan="14">Total de cajas vendidas en el periodo:</td>
                            <td class="text-start">@totalCajas</td>

                            <td colspan="2">Total ventas $:</td>
                            <td class="text-start">@totalVentas</td>
                        }
                        else
                        {
                            var totalKilos = filteredVentas.Sum(v => v.KilosProcesoViaje);
                            var totalVentas = filteredVentas.Sum(v => v.TotalVenta);
                            <td colspan="13">Total de kilos procesados vendidos en el periodo:</td>
                            <td class="text-start">@totalKilos</td>
                            <td colspan="1">Total ventas $:</td>
                            <td class="text-start">@totalVentas</td>
                        }
                    </tr>
                }
            </tbody>
        </table>
    </div>

    <!-- Gráficas -->
    <h3 class="text-center mt-5 fw-bold">Gráfica de ventas por periodo</h3>
    <div class="d-flex justify-content-center">
        <canvas id="chartVentasPorPeriodo" width="800" height="400"></canvas>
    </div>

    <h3 class="text-center mt-5 fw-bold">Distribución de ventas por tipo de berry</h3>

    <!-- Resumen en una fila completa -->
    <div id="resumenTipoBerry" class="text-center my-3"></div>

    <!-- Gráfica centrada -->
    <div class="d-flex justify-content-center">
        <canvas id="chartVentasPorTipoBerry" width="400" height="400"></canvas>
    </div>
</div>

@code {
    private int tablaActual = 1; // 1 para cajas, 2 para proceso

    private List<VentasDetallesCompletosDto> ventas = new();
    private List<IGrouping<DateOnly, VentasDetallesCompletosDto>> ventasAgrupadas = new();
    private List<VentasDetallesCompletosDto> filteredVentas = new();

    private DateOnly FechaInicio = DateOnly.FromDateTime(DateTime.Today.AddMonths(-1));
    private DateOnly FechaFin = DateOnly.FromDateTime(DateTime.Today);

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await CargarDatos();
        }
        catch (Exception ex)
        {
            await errorLogs.CreateErrorLogAsync(new ErrorLogDto
                {
                    UserName = UserSession.Usuario,
                    ErrorMessage = ex.Message,
                    ErrorProcedure = "OnInitializedAsync - ReporteVentasPeriodo",
                    ErrorLine = new System.Diagnostics.StackTrace(true).GetFrame(0)?.GetFileLineNumber().ToString(),
                    ErrorTime = DateTime.UtcNow
                });
        }
    }

    private async Task CargarDatos()
    {
        try
        {
            ventas = await ventasService.GetVentasDCAsync();
            FiltrarYAgrupar();
            await GenerarGraficas();
        }
        catch (Exception ex)
        {
            await errorLogs.CreateErrorLogAsync(new ErrorLogDto
                {
                    UserName = UserSession.Usuario,
                    ErrorMessage = ex.Message,
                    ErrorProcedure = "CargarDatos - ReporteVentasPeriodo",
                    ErrorLine = new System.Diagnostics.StackTrace(true).GetFrame(0)?.GetFileLineNumber().ToString(),
                    ErrorTime = DateTime.UtcNow
                });
        }
    }

    private void FiltrarYAgrupar()
    {
        try
        {
            var listaBase = ventas;

            if (tablaActual == 1)
            {
                listaBase = listaBase.Where(v => v.KilosProcesoViaje == 0).ToList();
            }
            else
            {
                listaBase = listaBase.Where(v => v.CantidadCajasViaje == 0 && v.Licencia == 0).ToList();
            }

            listaBase = listaBase.Where(v => v.FechaFacturacion >= FechaInicio && v.FechaFacturacion <= FechaFin).ToList();

            filteredVentas = listaBase;

            ventasAgrupadas = listaBase
                .GroupBy(v => v.FechaFacturacion)
                .OrderBy(g => g.Key)
                .ToList();
        }
        catch (Exception ex)
        {
            _ = errorLogs.CreateErrorLogAsync(new ErrorLogDto
                {
                    UserName = UserSession.Usuario,
                    ErrorMessage = ex.Message,
                    ErrorProcedure = "FiltrarYAgrupar - ReporteVentasPeriodo",
                    ErrorLine = new System.Diagnostics.StackTrace(true).GetFrame(0)?.GetFileLineNumber().ToString(),
                    ErrorTime = DateTime.UtcNow
                });
        }
    }

    private async Task FiltrarDatos()
    {
        try
        {
            FiltrarYAgrupar();
            await GenerarGraficas();
        }
        catch (Exception ex)
        {
            await errorLogs.CreateErrorLogAsync(new ErrorLogDto
                {
                    UserName = UserSession.Usuario,
                    ErrorMessage = ex.Message,
                    ErrorProcedure = "FiltrarDatos - ReporteVentasPeriodo",
                    ErrorLine = new System.Diagnostics.StackTrace(true).GetFrame(0)?.GetFileLineNumber().ToString(),
                    ErrorTime = DateTime.UtcNow
                });
        }
    }

    private void CambiarTabla(int opcion)
    {
        try
        {
            tablaActual = opcion;
            FiltrarYAgrupar();
            _ = GenerarGraficas(); // async call no esperada explícitamente
        }
        catch (Exception ex)
        {
            _ = errorLogs.CreateErrorLogAsync(new ErrorLogDto
                {
                    UserName = UserSession.Usuario,
                    ErrorMessage = ex.Message,
                    ErrorProcedure = "CambiarTabla - ReporteVentasPeriodo",
                    ErrorLine = new System.Diagnostics.StackTrace(true).GetFrame(0)?.GetFileLineNumber().ToString(),
                    ErrorTime = DateTime.UtcNow
                });
        }
    }

    private async Task GenerarGraficas()
    {
        try
        {
            var labels = ventasAgrupadas.Select(g => g.Key.ToString("dd/MM/yyyy")).ToList();

            List<double> valores;
            if (tablaActual == 1)
                valores = ventasAgrupadas.Select(g => (double)g.Sum(v => v.CantidadCajasViaje)).ToList();
            else
                valores = ventasAgrupadas.Select(g => (double)g.Sum(v => v.KilosProcesoViaje)).ToList();

            var labelsJson = System.Text.Json.JsonSerializer.Serialize(labels);
            var valoresJson = System.Text.Json.JsonSerializer.Serialize(valores);

            await JS.InvokeVoidAsync("generarGraficaVentasPorPeriodo", labelsJson, valoresJson, tablaActual);

            var berryTypes = filteredVentas
                .GroupBy(v => v.TipoBerry)
                .Select(g => new
                {
                    TipoBerry = g.Key,
                    Total = tablaActual == 1
                        ? (double)g.Sum(v => v.CantidadCajasViaje)
                        : (double)g.Sum(v => v.KilosProcesoViaje)
                }).ToList();

            var berryLabels = berryTypes.Select(b => b.TipoBerry).ToList();
            var berryValues = berryTypes.Select(b => b.Total).ToList();

            var berryLabelsJson = System.Text.Json.JsonSerializer.Serialize(berryLabels);
            var berryValuesJson = System.Text.Json.JsonSerializer.Serialize(berryValues);

            await JS.InvokeVoidAsync("generarGraficaVentasPorTipoBerry", berryLabelsJson, berryValuesJson, tablaActual);
        }
        catch (Exception ex)
        {
            await errorLogs.CreateErrorLogAsync(new ErrorLogDto
                {
                    UserName = UserSession.Usuario,
                    ErrorMessage = ex.Message,
                    ErrorProcedure = "GenerarGraficas - ReporteVentasPeriodo",
                    ErrorLine = new System.Diagnostics.StackTrace(true).GetFrame(0)?.GetFileLineNumber().ToString(),
                    ErrorTime = DateTime.UtcNow
                });
        }
    }

    private async Task DescargarPDF()
    {
        try
        {
            await JS.InvokeVoidAsync("descargarPDF_VentasPorPeriodo");
        }
        catch (Exception ex)
        {
            await errorLogs.CreateErrorLogAsync(new ErrorLogDto
                {
                    UserName = UserSession.Usuario,
                    ErrorMessage = ex.Message,
                    ErrorProcedure = "DescargarPDF - ReporteVentasPeriodo",
                    ErrorLine = new System.Diagnostics.StackTrace(true).GetFrame(0)?.GetFileLineNumber().ToString(),
                    ErrorTime = DateTime.UtcNow
                });
        }
    }

    private async Task DescargarExcel()
    {
        try
        {
            await JS.InvokeVoidAsync("descargarExcel_VentasPorPeriodo");
        }
        catch (Exception ex)
        {
            await errorLogs.CreateErrorLogAsync(new ErrorLogDto
                {
                    UserName = UserSession.Usuario,
                    ErrorMessage = ex.Message,
                    ErrorProcedure = "DescargarExcel - ReporteVentasPeriodo",
                    ErrorLine = new System.Diagnostics.StackTrace(true).GetFrame(0)?.GetFileLineNumber().ToString(),
                    ErrorTime = DateTime.UtcNow
                });
        }
    }

    [Inject] private IJSRuntime JS { get; set; }
}
