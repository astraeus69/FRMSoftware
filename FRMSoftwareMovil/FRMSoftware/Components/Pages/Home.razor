@page "/"
@inject NavigationManager Navigation
@inject Services.Catalogos.UsuariosService usuariosService
@using Microsoft.Maui.Storage
@using FRMSoftware.Data
@using System.IdentityModel.Tokens.Jwt;


@inject FRMSoftware.Services.Utilidades.ErrorLogService errorLogs
@inject FRMSoftware.Data.UserSession UserSession


<div class="container d-flex justify-content-center align-items-center"
     style="min-height: calc(100vh - 3.5rem); overflow-y: auto;">
    <img src="images/LogoFRM.png" alt="Logo"
         style="width: 100%; max-width: 600px; height: auto; object-fit: contain;" />
</div>

@if (mostrarLogin)
{
    <div class="modal-backdrop-Login">
        <div class="modal-content-Login">
            <h3 class="text-center fw-bold">Iniciar sesión</h3>

            @if (!string.IsNullOrEmpty(mensajeError))
            {
                <div class="alert alert-danger">@mensajeError</div>
            }

            @if (tokenExpirado)
            {
                <div class="alert alert-warning">Tu sesión ha expirado. Por favor, inicia sesión nuevamente.</div>
            }

            <EditForm Model="credenciales" OnValidSubmit="IniciarSesion">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <div class="mb-3">
                    <label class="form-label">Usuario:</label>
                    <InputText class="form-control" @bind-Value="credenciales.Usuario" />
                </div>

                <div class="mb-3">
                    <label class="form-label">Contraseña:</label>
                    <InputText class="form-control" type="password" @bind-Value="credenciales.Contrasena" />
                </div>

                <div class="d-flex justify-content-center">
                    <button type="submit" class="btn">Iniciar sesión</button>
                </div>
            </EditForm>
        </div>
    </div>
}

@code {
    private bool mostrarLogin = true;
    private bool tokenExpirado = false;
    private LoginDto credenciales = new();
    private string mensajeError = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await MostrarLoginSiNoHayTokenAsync();
    }

    private bool IsTokenExpired(string token)
    {
        try
        {
            var jwt = new JwtSecurityToken(token);
            var expirationDate = jwt.ValidTo;
            return expirationDate < DateTime.UtcNow;
        }
        catch
        {
            return true;
        }
    }

    private async Task IniciarSesion()
    {
        mensajeError = string.Empty;
        tokenExpirado = false;

        try
        {
            var resultado = await usuariosService.LoginAsync(credenciales);

            if (resultado.Exito)
            {
                await SecureStorage.SetAsync("jwt_token", resultado.Token);
                mostrarLogin = false;
                Navigation.NavigateTo("/", true);
            }
            else
            {
                mensajeError = resultado.Mensaje;
            }
        }
        catch (Exception ex)
        {
            mensajeError = $"Error inesperado: {ex.Message}";

            // Registrar el error inesperado
            await errorLogs.CreateErrorLogAsync(new ErrorLogDto
                {
                    UserName = UserSession.Usuario, // Reemplazar con el nombre del usuario real
                    ErrorMessage = ex.Message,
                    ErrorProcedure = "IniciarSesion",
                    ErrorLine = new System.Diagnostics.StackTrace(true).GetFrame(0)?.GetFileLineNumber().ToString(),
                    ErrorTime = DateTime.UtcNow
                });
        }
    }

    private async Task MostrarLoginSiNoHayTokenAsync()
    {
        var token = await SecureStorage.GetAsync("jwt_token");

        if (string.IsNullOrWhiteSpace(token))
        {
            mostrarLogin = true;
            tokenExpirado = false;
        }
        else if (IsTokenExpired(token))
        {
            mostrarLogin = true;
            tokenExpirado = true;
            SecureStorage.Remove("jwt_token");
        }
        else
        {
            mostrarLogin = false;
            tokenExpirado = false;
        }

        StateHasChanged();
    }
}
