@page "/Movimientos/GestionReplantesConsulta"
@using FRMSoftware.Data
@inject FRMSoftware.Services.Movimientos.GestionReplantesService replanteService

@inject FRMSoftware.Services.Utilidades.ErrorLogService errorLogs
@inject FRMSoftware.Data.UserSession UserSession

@inject NavigationManager Navigation

<div class="container">
    <div class="row justify-content-center align-items-center" style="margin-top:20px">
        <h2 class="text-center fw-bold" style="margin-bottom: 20px">Consulta de replantes</h2>

        <div style="height: 140px">
            <!-- Botones para seleccionar tipo de búsqueda -->
            <div class="d-flex mb-3">
                <div class="toggle-container">
                    <div class="toggle-slider" style='left: @(busquedaGeneral ? "0%" : "50%")'></div>
                    <button class="toggle-btn @(busquedaGeneral ? "active" : "")" @onclick="() => CambiarTipoBusqueda(true)">
                        Búsqueda general
                    </button>
                    <button class="toggle-btn @(!busquedaGeneral ? "active" : "")" @onclick="() => CambiarTipoBusqueda(false)">
                        Búsqueda por período
                    </button>
                </div>
            </div>

            <!-- Contenedor para búsqueda general (texto) -->
            @if (busquedaGeneral)
            {
                <div class="row mb-3 align-items-center">
                    <div class="col-auto">
                        <input @bind="searchTermReplante" placeholder="Buscar replantes..." class="form-control" />
                    </div>
                    <div class="col-auto">
                        <button class="btn fixed-size-btn" @onclick="AplicarFiltroReplantes">Buscar</button>
                    </div>
                </div>
            }

            <!-- Contenedor para búsqueda por período (fechas) -->
            @if (!busquedaGeneral)
            {
                <div class="row mb-3 align-items-center">
                    <div class="col-auto">
                        <label>Desde:</label>
                        <InputDate class="form-control" @bind-Value="fechaInicio" />
                    </div>
                    <div class="col-auto">
                        <label>Hasta:</label>
                        <InputDate class="form-control" @bind-Value="fechaFin" />
                    </div>
                    <div class="col-auto">
                        <button class="btn fixed-size-btn" style="margin-top: 25px" @onclick="AplicarFiltroReplantes">Buscar</button>
                    </div>
                </div>
            }
        </div>


        <!-- Contenedor de la tabla con scroll -->
        <div class="table-responsive" style="max-height: 70vh; overflow-y: auto;">
            <table class="table table-striped table-bordered">
                <thead class="table-dark">
                    <tr>
                        <th>ID Replante</th>
                        <th>Cantidad de replante</th>
                        <th>Fecha de replante</th>
                        <th>Número de semana</th>

                        <th>ID Plantación</th>
                        <th>Fecha de plantación</th>
                        <th>Número de semana</th>
                        <th>Estatus de plantación</th>

                        <th>ID Cultivo</th>
                        <th>Tipo de berry</th>
                        <th>Variedad</th>

                        <th>ID Vivero</th>
                        <th>Nombre del vivero</th>
                        <th>Código del vivero</th>

                        <th>ID Rancho</th>
                        <th>Nombre de rancho</th>
                        <th>Número de rancho</th>

                        <th>ID Llave</th>
                        <th>Nombre de llave</th>
                        <th>Superficie (Ha)</th>
                        <th>Superficie (Acres)</th>

                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in filteredReplantes)
                    {
                        <tr>
                            <td>@item.IdReplante</td>
                            <td>@item.CantidadReplante</td>
                            <td>@item.FechaReplante.ToString("dd/MM/yyyy")</td>
                            <td>@item.NumSemReplante</td>

                            <td>@item.IdPlantacion</td>
                            <td>@item.FechaPlantacion.ToString("dd/MM/yyyy")</td>
                            <td>@item.NumSemPlantacion</td>
                            <td>@item.EstatusPlantacion</td>

                            <td>@item.IdCultivo</td>
                            <td>@item.TipoBerry</td>
                            <td>@item.Variedad</td>

                            <td>@item.IdVivero</td>
                            <td>@item.NombreVivero</td>
                            <td>@item.CodigoVivero</td>

                            <td>@item.IdRancho</td>
                            <td>@item.NombreRancho</td>
                            <td>@item.NumeroRancho</td>

                            <td>@item.IdLlave</td>
                            <td>@item.NombreLlave</td>
                            <td>@item.SuperficieHa</td>
                            <td>@item.SuperficieAcres</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
</div>

<!-- Botón de regreso -->
<div class="container-fluid">
    <div class="buttons fixed-bottom bg-white d-flex justify-content-center ms-auto botones-responsive">
        <button class="btn fixed-size-btn mx-2" @onclick="RedirigirReplantes">Regresar</button>
    </div>
</div>

@code {
    private List<ReplantesDetallesDto> replantes = new();
    private string searchTermReplante = string.Empty;
    private List<ReplantesDetallesDto> filteredReplantes = new();

    private DateTime? fechaInicio;
    private DateTime? fechaFin;

    // MENSAJES
    private bool mostrarMensajeModal = false;
    private string mensajeTitulo = string.Empty;
    private string mensajeContenido = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await ConsultarReplantes();
    }

    private async Task ConsultarReplantes()
    {
        try
        {
            // Obtiene todos los replantes desde el servicio
            replantes = await replanteService.GetReplantesDetallesAsync();

            // Filtra los replantes activos
            filteredReplantes = replantes.OrderBy(r => r.IdReplante).ToList();

            StateHasChanged(); // Refresca la UI

        }
        catch (Exception ex)
        {
            // Manejo de errores

            // Opcionalmente, registrar el error
            await errorLogs.CreateErrorLogAsync(new ErrorLogDto
                {
                    UserName = UserSession.Usuario, // Reemplazar con el nombre del usuario real
                    ErrorMessage = ex.Message,
                    ErrorProcedure = "ConsultarReplantes",
                    ErrorLine = new System.Diagnostics.StackTrace(true).GetFrame(0)?.GetFileLineNumber().ToString(),
                    ErrorTime = DateTime.UtcNow
                });
        }
    }

    private void AplicarFiltroReplantes()
    {
        filteredReplantes =
            replantes.Where(r =>

                // Filtro de fechas
                (!fechaInicio.HasValue || r.FechaReplante.Date >= fechaInicio.Value.Date) &&
                (!fechaFin.HasValue || r.FechaReplante.Date <= fechaFin.Value.Date) &&

                (string.IsNullOrEmpty(searchTermReplante) ||
                    r.IdReplante.ToString().Contains(searchTermReplante, StringComparison.OrdinalIgnoreCase) ||
                    r.CantidadReplante.ToString().Contains(searchTermReplante, StringComparison.OrdinalIgnoreCase) ||
                    r.FechaReplante.ToString("dd/MM/yyyy").Contains(searchTermReplante, StringComparison.OrdinalIgnoreCase) ||
                    r.NumSemReplante.ToString().Contains(searchTermReplante, StringComparison.OrdinalIgnoreCase) ||

                    // Datos de la Plantación
                    r.IdPlantacion.ToString().Contains(searchTermReplante, StringComparison.OrdinalIgnoreCase) ||
                    r.FechaPlantacion.ToString("dd/MM/yyyy").Contains(searchTermReplante, StringComparison.OrdinalIgnoreCase) ||
                    r.NumSemPlantacion.ToString().Contains(searchTermReplante, StringComparison.OrdinalIgnoreCase) ||
                    r.EstatusPlantacion.Contains(searchTermReplante, StringComparison.OrdinalIgnoreCase) ||

                    // Datos del Cultivo
                    r.IdCultivo.ToString().Contains(searchTermReplante, StringComparison.OrdinalIgnoreCase) ||
                    r.TipoBerry.Contains(searchTermReplante, StringComparison.OrdinalIgnoreCase) ||
                    r.Variedad.Contains(searchTermReplante, StringComparison.OrdinalIgnoreCase) ||

                    // Datos de la Llave
                    r.IdLlave.ToString().Contains(searchTermReplante, StringComparison.OrdinalIgnoreCase) ||
                    r.NombreLlave.Contains(searchTermReplante, StringComparison.OrdinalIgnoreCase) ||
				    r.SuperficieHa.ToString().Contains(searchTermReplante, StringComparison.OrdinalIgnoreCase) ||
				    r.SuperficieAcres.ToString().Contains(searchTermReplante, StringComparison.OrdinalIgnoreCase) ||
                    r.Disponibilidad.ToString().Contains(searchTermReplante, StringComparison.OrdinalIgnoreCase) ||

                    // Datos del Rancho
                    r.IdRancho.ToString().Contains(searchTermReplante, StringComparison.OrdinalIgnoreCase) ||
                    r.NombreRancho.Contains(searchTermReplante, StringComparison.OrdinalIgnoreCase) ||
                    r.NumeroRancho.ToString().Contains(searchTermReplante, StringComparison.OrdinalIgnoreCase) ||

                    // Datos del Vivero
                    r.IdVivero.ToString().Contains(searchTermReplante, StringComparison.OrdinalIgnoreCase) ||
                    r.NombreVivero.Contains(searchTermReplante, StringComparison.OrdinalIgnoreCase) ||
                    r.CodigoVivero.Contains(searchTermReplante, StringComparison.OrdinalIgnoreCase)
                )
            ).ToList();
    }

    private bool busquedaGeneral = true; // true = búsqueda general, false = por período

    private void CambiarTipoBusqueda(bool esGeneral)
    {
        busquedaGeneral = esGeneral;
        // Limpiar filtros al cambiar de tipo
        if (esGeneral)
        {
            fechaInicio = null;
            fechaFin = null;
        }
        else
        {
            searchTermReplante = string.Empty;
        }
    }

    private void MostrarMensajeModal(string titulo, string contenido)
    {
        mensajeTitulo = titulo;
        mensajeContenido = contenido;
        mostrarMensajeModal = true;
    }


    private void RedirigirReplantes()
    {
        Navigation.NavigateTo("/Movimientos/GestionReplantes");
    }


    private async Task DescargarPDF_GestionReplantes()
    {
        try
        {
            await JS.InvokeVoidAsync("descargarPDF_GestionReplantes");
        }
        catch (Exception ex)
        {
            await errorLogs.CreateErrorLogAsync(new ErrorLogDto
                {
                    UserName = UserSession.Usuario,
                    ErrorMessage = ex.Message,
                    ErrorProcedure = "DescargarPDF - GestionReplantes",
                    ErrorLine = new System.Diagnostics.StackTrace(true).GetFrame(0)?.GetFileLineNumber().ToString(),
                    ErrorTime = DateTime.UtcNow
                });
        }
    }

    private async Task DescargarExcel_GestionReplantes()
    {
        try
        {
            await JS.InvokeVoidAsync("descargarExcel_GestionReplantes");
        }
        catch (Exception ex)
        {
            await errorLogs.CreateErrorLogAsync(new ErrorLogDto
                {
                    UserName = UserSession.Usuario,
                    ErrorMessage = ex.Message,
                    ErrorProcedure = "DescargarExcel - GestionReplantes",
                    ErrorLine = new System.Diagnostics.StackTrace(true).GetFrame(0)?.GetFileLineNumber().ToString(),
                    ErrorTime = DateTime.UtcNow
                });
        }
    }

    [Inject] private IJSRuntime JS { get; set; }
}
